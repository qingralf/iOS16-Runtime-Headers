/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SwiftUI.framework/SwiftUI
 */

@interface _TtGC7SwiftUI14_UIHostingViewVS_14_ViewList_View_ : UIView <SwiftUI.XcodeViewDebugDataProvider> {
    void $__lazy_storage_$_presentationModeLocation;
    union { in /* Warning: Unrecognized filer type: 'u' using 'void*' */ void*x1; long x2; long x3; }  _rootView;
    void accessibilityEnabled;
    void accessibilityVersion;
    void allowFrameChanges;
    void allowUIKitAnimations;
    void allowUIKitAnimationsForNextUpdate;
    void canAdvanceTimeAutomatically;
    void colorScheme;
    void contextMenuBridge;
    void currentAccessibilityFocusStore;
    void currentTimestamp;
    void defaultAddsKeyboardToSafeAreaInsets;
    void delegate;
    void deprecatedActionSheetBridge;
    void deprecatedAlertBridge;
    void disabledBackgroundColor;
    void displayLink;
    void dragBridge;
    void environmentOverride;
    void eventBindingManager;
    void eventBridge;
    void explicitSafeAreaInsets;
    void externalUpdateCount;
    void focusBridge;
    void focusedValues;
    void inheritedEnvironment;
    void inspectorBridge;
    void isEnteringForeground;
    void isExitingForeground;
    void isHiddenForReuse;
    void isRendering;
    void keyboardFrame;
    void keyboardSeed;
    void largeContentViewerInteractionBridge;
    void lastRenderTime;
    void navigationV3State;
    void nextTimerTime;
    void observedScene;
    void pendingPreferencesUpdate;
    void pointerBridge;
    void propertiesNeedingUpdate;
    void registeredForGeometryChanges;
    void renderer;
    void rootViewDelegate;
    void sceneBridge;
    void scrollTest;
    void sharingActivityPickerBridge;
    void sheetBridge;
    void shouldUpdateAccessibilityFocus;
    void statusBarBridge;
    void traitCollectionOverride;
    void updateTimer;
    void viewController;
    void viewGraph;
    void wantsTransparentBackground;
}

@property (nonatomic, readonly) unsigned long long _axesForDerivingIntrinsicContentSizeFromLayoutSize;
@property (nonatomic, readonly) bool _layoutHeightDependsOnWidth;
@property (nonatomic, copy) NSArray *accessibilityElements;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) bool canBecomeFirstResponder;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) NSArray *preferredFocusEnvironments;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } safeAreaInsets;

+ (bool)_supportsInvalidatingFocusCache;

- (void).cxx_destruct;
- (bool)_accessibilityAutomationHitTestReverseOrder;
- (id)_accessibilityUserTestingChildren;
- (unsigned long long)_axesForDerivingIntrinsicContentSizeFromLayoutSize;
- (struct { double x1; double x2; })_baselineOffsetsAtSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_childFocusRegionsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCoordinateSpace:(id)arg2;
- (void)_didChangeToFirstResponder:(id)arg1;
- (void)_geometryChanged:(void*)arg1 forAncestor:(id)arg2;
- (bool)_layoutHeightDependsOnWidth;
- (struct CGSize { double x1; double x2; })_layoutSizeThatFits:(struct CGSize { double x1; double x2; })arg1 fixedAxes:(unsigned long long)arg2;
- (void)accessibilityBooleanDidChange:(id)arg1;
- (long long)accessibilityElementCount;
- (id)accessibilityElements;
- (void)accessibilityFocusedElementDidChange:(id)arg1;
- (bool)accessibilityShouldEnumerateContainerElementsArrayDirectly;
- (id)backgroundColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)canBecomeFirstResponder;
- (void)clarityUISettingDidChange:(id)arg1;
- (void)contentSizeCategoryDidChange;
- (void)dealloc;
- (void)didMoveToWindow;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (void)externalEnvironmentDidChange;
- (id)focusItemsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)keyboardWillHideWithNotification:(id)arg1;
- (void)keyboardWillShowWithNotification:(id)arg1;
- (void)layoutSubviews;
- (id)makeViewDebugData;
- (id)preferredFocusEnvironments;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })safeAreaInsets;
- (void)safeAreaInsetsDidChange;
- (void)sceneDidActivateWithNotification:(id)arg1;
- (void)sceneDidEnterBackgroundWithNotification:(id)arg1;
- (void)sceneWillDeactivateWithNotification:(id)arg1;
- (void)sceneWillEnterForegroundWithNotification:(id)arg1;
- (void)setAccessibilityElements:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (void)windowDidRotateWithNotification:(id)arg1;
- (void)windowWillRotateWithNotification:(id)arg1;

@end
