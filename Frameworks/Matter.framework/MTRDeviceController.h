/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Matter.framework/Matter
 */

@interface MTRDeviceController : NSObject {
    NSObject<OS_dispatch_queue> * _chipWorkQueue;
    void * _cppCommissioner;
    void * _deviceAttestationDelegateBridge;
    MTRControllerFactory * _factory;
    struct MTROperationalCredentialsDelegate { int (**x1)(); struct P256Keypair {} *x2; struct AesCcm128Key { unsigned char x_3_1_1[16]; } x3; struct MTRPersistentStorageDelegateBridge {} *x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; bool x8; id x9; id x10; } * _operationalCredentialsDelegate;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _operationalKeypairBridge;
    struct MTRDevicePairingDelegateBridge { int (**x1)(); id x2; id x3; } * _pairingDelegateBridge;
    struct MTRP256KeypairBridge { 
        int (**_vptr$ECPKeypair)(); 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPublicKey; 
        struct P256KeypairContext { 
            unsigned char mBytes[512]; 
        } mKeypair; 
        bool mInitialized; 
        <MTRKeypair> *mKeypair; 
        struct P256PublicKey { 
            int (**_vptr$ECPKey)(); 
            unsigned char bytes[65]; 
        } mPubkey; 
    }  _signingKeypairBridge;
}

@property (readonly) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (nonatomic, readonly) NSNumber *controllerNodeId;
@property (readonly) void*cppCommissioner;
@property (readonly) void*deviceAttestationDelegateBridge;
@property (readonly) MTRControllerFactory *factory;
@property (nonatomic, readonly) bool isRunning;
@property (readonly) struct MTROperationalCredentialsDelegate { int (**x1)(); struct P256Keypair {} *x2; struct AesCcm128Key { unsigned char x_3_1_1[16]; } x3; struct MTRPersistentStorageDelegateBridge {} *x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; bool x8; id x9; id x10; }*operationalCredentialsDelegate;
@property (readonly) struct MTRP256KeypairBridge { int (**x1)(); struct P256PublicKey { int (**x_2_1_1)(); unsigned char x_2_1_2[65]; } x2; struct P256KeypairContext { unsigned char x_3_1_1[512]; } x3; bool x4; id x5; struct P256PublicKey { int (**x_6_1_1)(); unsigned char x_6_1_2[65]; } x6; } operationalKeypairBridge;
@property (readonly) struct MTRDevicePairingDelegateBridge { int (**x1)(); id x2; id x3; }*pairingDelegateBridge;
@property (readonly) struct MTRP256KeypairBridge { int (**x1)(); struct P256PublicKey { int (**x_2_1_1)(); unsigned char x_2_1_2[65]; } x2; struct P256KeypairContext { unsigned char x_3_1_1[512]; } x3; bool x4; id x5; struct P256PublicKey { int (**x_6_1_1)(); unsigned char x_6_1_2[65]; } x6; } signingKeypairBridge;

+ (id)decodeXPCReadParams:(id)arg1;
+ (id)decodeXPCResponseValues:(id)arg1;
+ (id)decodeXPCSubscribeParams:(id)arg1;
+ (id)encodeXPCReadParams:(id)arg1;
+ (id)encodeXPCResponseValues:(id)arg1;
+ (id)encodeXPCSubscribeParams:(id)arg1;
+ (id)sharedControllerWithId:(id)arg1 xpcConnectBlock:(id /* block */)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_deviceBeingCommissionedOverBLE:(unsigned long long)arg1;
- (bool)checkForError:(struct ChipError { unsigned int x1; char *x2; unsigned int x3; })arg1 logMsg:(id)arg2 error:(id*)arg3;
- (bool)checkForInitError:(bool)arg1 logMsg:(id)arg2;
- (bool)checkForStartError:(bool)arg1 logMsg:(id)arg2;
- (bool)checkIsRunning;
- (bool)checkIsRunning:(id*)arg1;
- (id)chipWorkQueue;
- (void)cleanup;
- (void)cleanupAfterStartup;
- (void)clearDeviceAttestationDelegateBridge;
- (bool)commissionDevice:(unsigned long long)arg1 commissioningParams:(id)arg2 error:(id*)arg3;
- (bool)continueCommissioningDevice:(void*)arg1 ignoreAttestationFailure:(bool)arg2 error:(id*)arg3;
- (id)controllerNodeId;
- (void*)cppCommissioner;
- (void*)deviceAttestationDelegateBridge;
- (unsigned char)fabricIndex;
- (id)factory;
- (bool)getBaseDevice:(unsigned long long)arg1 queue:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)getDeviceBeingCommissioned:(unsigned long long)arg1 error:(id*)arg2;
- (id)initWithFactory:(id)arg1 queue:(id)arg2;
- (bool)isRunning;
- (struct ChipError { unsigned int x1; char *x2; unsigned int x3; })isRunningOnFabric:(void*)arg1 fabricIndex:(unsigned char)arg2 isRunning:(bool*)arg3;
- (bool)openPairingWindow:(unsigned long long)arg1 duration:(unsigned long long)arg2 error:(id*)arg3;
- (id)openPairingWindowWithPIN:(unsigned long long)arg1 duration:(unsigned long long)arg2 discriminator:(unsigned long long)arg3 setupPIN:(unsigned long long)arg4 error:(id*)arg5;
- (struct MTROperationalCredentialsDelegate { int (**x1)(); struct P256Keypair {} *x2; struct AesCcm128Key { unsigned char x_3_1_1[16]; } x3; struct MTRPersistentStorageDelegateBridge {} *x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; bool x8; id x9; id x10; }*)operationalCredentialsDelegate;
- (struct MTRP256KeypairBridge { int (**x1)(); struct P256PublicKey { int (**x_2_1_1)(); unsigned char x_2_1_2[65]; } x2; struct P256KeypairContext { unsigned char x_3_1_1[512]; } x3; bool x4; id x5; struct P256PublicKey { int (**x_6_1_1)(); unsigned char x_6_1_2[65]; } x6; })operationalKeypairBridge;
- (bool)pairDevice:(unsigned long long)arg1 address:(id)arg2 port:(unsigned short)arg3 setupPINCode:(unsigned int)arg4 error:(id*)arg5;
- (bool)pairDevice:(unsigned long long)arg1 discriminator:(unsigned short)arg2 setupPINCode:(unsigned int)arg3 error:(id*)arg4;
- (bool)pairDevice:(unsigned long long)arg1 onboardingPayload:(id)arg2 error:(id*)arg3;
- (struct MTRDevicePairingDelegateBridge { int (**x1)(); id x2; id x3; }*)pairingDelegateBridge;
- (void)setPairingDelegate:(id)arg1 queue:(id)arg2;
- (void)shutDownCppController;
- (void)shutdown;
- (struct MTRP256KeypairBridge { int (**x1)(); struct P256PublicKey { int (**x_2_1_1)(); unsigned char x_2_1_2[65]; } x2; struct P256KeypairContext { unsigned char x_3_1_1[512]; } x3; bool x4; id x5; struct P256PublicKey { int (**x_6_1_1)(); unsigned char x_6_1_2[65]; } x6; })signingKeypairBridge;
- (bool)startup:(id)arg1;
- (bool)stopDevicePairing:(unsigned long long)arg1 error:(id*)arg2;

@end
