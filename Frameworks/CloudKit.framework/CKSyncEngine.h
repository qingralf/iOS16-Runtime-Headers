/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CloudKit.framework/CloudKit
 */

@interface CKSyncEngine : NSObject <CKPropertiesDescription> {
    bool  _allowFetchAndModifyConcurrently;
    bool  _allowMetadataCallbackDeferral;
    NSString * _apsMachServiceName;
    bool  _automaticSyncingEnabled;
    NSObject<OS_dispatch_queue> * _batchCreationQueue;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    bool  _continueModifyingPendingChangesAfterFailure;
    <CKSyncEngineDataSource> * _dataSource;
    CKDatabase * _database;
    NSString * _databaseSubscriptionIDOverride;
    NSDate * _earliestStartDateForSchedulerActivities;
    bool  _ignoringSystemConditions;
    long long  _lastKnownAccountStatus;
    unsigned long long  _lastNotifiedMetadataChangeCount;
    unsigned long long  _maxRecordBytesPerBatch;
    unsigned long long  _maxRecordCountPerBatch;
    unsigned long long  _maxZoneCountPerBatch;
    CKSyncEngineMetadata * _metadata;
    bool  _needsToReloadAccount;
    CKNotificationListener * _notificationListener;
    NSOperationQueue * _operationQueue;
    long long  _priority;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _skipRetryOnOperationError;
    id /* block */  _updateMetadataBlock;
    bool  _useEarliestStartDateForSchedulerActivitiesInPast;
    bool  _useUniqueActivityIdentifiers;
    bool  _waitingForHSA2;
    bool  _waitingForIdentityUpdate;
    NSObject<OS_xpc_object> * _xpcActivityCriteriaOverrides;
}

@property (nonatomic) bool allowFetchAndModifyConcurrently;
@property (nonatomic) bool allowMetadataCallbackDeferral;
@property (nonatomic, retain) NSString *apsMachServiceName;
@property (getter=isAutomaticSyncingEnabled, nonatomic) bool automaticSyncingEnabled;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic) bool continueModifyingPendingChangesAfterFailure;
@property (nonatomic, readonly) <CKSyncEngineDataSource> *dataSource;
@property (nonatomic, retain) CKDatabase *database;
@property (nonatomic, retain) NSString *databaseSubscriptionIDOverride;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSDate *earliestStartDateForSchedulerActivities;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long lastKnownAccountStatus;
@property (nonatomic) unsigned long long maxRecordCountPerBatch;
@property (nonatomic) unsigned long long maxZoneCountPerBatch;
@property (nonatomic, retain) CKSyncEngineMetadata *metadata;
@property (nonatomic) bool needsToReloadAccount;
@property (nonatomic, retain) CKNotificationListener *notificationListener;
@property (nonatomic, retain) NSOperationQueue *operationQueue;
@property (nonatomic) long long priority;
@property (nonatomic, readonly) NSArray *recordIDsToDelete;
@property (nonatomic, readonly) NSArray *recordIDsToSave;
@property (nonatomic) bool skipRetryOnOperationError;
@property (readonly) Class superclass;
@property (nonatomic) bool useEarliestStartDateForSchedulerActivitiesInPast;
@property (nonatomic) bool useOpportunisticPushTopic;
@property (getter=isWaitingForHSA2, nonatomic) bool waitingForHSA2;
@property (getter=isWaitingForIdentityUpdate, nonatomic) bool waitingForIdentityUpdate;
@property (nonatomic, retain) NSObject<OS_xpc_object> *xpcActivityCriteriaOverrides;

+ (id)earliestStartDateAfterError:(id)arg1;
+ (bool)fastErrorRetry;
+ (id)saveSubscriptionActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(bool)arg2;
+ (void)setFastErrorRetry:(bool)arg1;
+ (bool)shouldDeferAfterError:(id)arg1;
+ (id)syncActivityIdentifierInDatabase:(id)arg1 ignoringSystemConditions:(bool)arg2;
+ (void)unregisterActivitiesWithDatabase:(id)arg1 ignoringSystemConditions:(bool)arg2;

- (void).cxx_destruct;
- (void)CKDescribePropertiesUsing:(id)arg1;
- (id)_adopterVisibleFetchChangesErrorForZoneID:(id)arg1 error:(id)arg2;
- (void)_fetchChangesForZoneIDs:(id)arg1 ifNecessary:(bool)arg2 operationGroup:(id)arg3 completionHandler:(id /* block */)arg4;
- (bool)_isFetchChangesErrorAdopterVisible:(id)arg1;
- (void)_updateDataSourceForFailedToFetchChangesForRecordZoneID:(id)arg1 error:(id)arg2;
- (void)accountChangedNotification:(id)arg1;
- (void)addRecordIDsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (void)addRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (bool)allowFetchAndModifyConcurrently;
- (bool)allowFetchAndModifyConcurrentlyForContainerIdentifier:(id)arg1;
- (bool)allowMetadataCallbackDeferral;
- (id)apsMachServiceName;
- (id)callbackQueue;
- (void)cancelPendingOperationsWithCompletionHandler:(id /* block */)arg1;
- (bool)continueModifyingPendingChangesAfterFailure;
- (id)dataSource;
- (id)database;
- (id)databaseSubscription;
- (id)databaseSubscriptionIDOverride;
- (id)databaseSubscriptionWithID:(id)arg1;
- (void)dealloc;
- (id)defaultDatabaseSubscription;
- (id)defaultDatabaseSubscriptionID;
- (id)description;
- (void)didReceiveDatabaseNotification:(id)arg1;
- (id)earliestStartDateForSchedulerActivities;
- (id)existingOperationToFetchChangesForZoneIDs:(id)arg1 group:(id)arg2 includingExecutingOperations:(bool)arg3;
- (id)existingOperationToModifyPendingChangesForZoneIDs:(id)arg1 group:(id)arg2 includingExecutingOperations:(bool)arg3;
- (void)fetchChangesForZoneIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchChangesForZoneIDs:(id)arg1 group:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)fetchChangesForZoneIDs:(id)arg1 group:(id)arg2 ifNecessary:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)fetchChangesWithCompletionHandler:(id /* block */)arg1;
- (bool)hasPendingModifications;
- (bool)hasSchedulerActivityWithIdentifier:(id)arg1;
- (void)identityUpdateNotification:(id)arg1;
- (id)init;
- (id)initWithConfiguration:(id)arg1;
- (bool)isAutomaticSyncingEnabled;
- (bool)isWaitingForHSA2;
- (bool)isWaitingForIdentityUpdate;
- (long long)lastKnownAccountStatus;
- (unsigned long long)maxRecordCountPerBatch;
- (unsigned long long)maxZoneCountPerBatch;
- (id)metadata;
- (void)modifyPendingChangesInZoneIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)modifyPendingChangesInZoneIDs:(id)arg1 group:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)modifyPendingChangesWithCompletionHandler:(id /* block */)arg1;
- (bool)needsToFetchChangesForZoneIDs:(id)arg1;
- (bool)needsToReloadAccount;
- (void)networkAttributionBundleIDForZoneIDs:(id)arg1 recordIDs:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)nextBatchOfRecordsToModifyInZoneIDs:(id)arg1;
- (id)nextBatchOfRecordsToModifyWithCustomBatchingInZoneIDs:(id)arg1;
- (id)notificationListener;
- (unsigned long long)numberOfModifyPendingRecordsOperations;
- (id)operationQueue;
- (void)performSyncActivity:(id)arg1 completionHandler:(id /* block */)arg2;
- (long long)priority;
- (id)recordIDsToDelete;
- (id)recordIDsToSave;
- (id)redactedDescription;
- (void)relatedApplicationBundleIdentifiersForZoneIDs:(id)arg1 recordIDs:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)removeRecordIDsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (void)removeRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (id)saveSubscriptionActivityIdentifier;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:(id /* block */)arg1;
- (void)setAllowFetchAndModifyConcurrently:(bool)arg1;
- (void)setAllowMetadataCallbackDeferral:(bool)arg1;
- (void)setApsMachServiceName:(id)arg1;
- (void)setAutomaticSyncingEnabled:(bool)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setContinueModifyingPendingChangesAfterFailure:(bool)arg1;
- (void)setDatabase:(id)arg1;
- (void)setDatabaseSubscriptionIDOverride:(id)arg1;
- (void)setEarliestStartDateForSchedulerActivities:(id)arg1;
- (void)setHasPendingModifications;
- (void)setLastKnownAccountStatus:(long long)arg1;
- (void)setMaxRecordCountPerBatch:(unsigned long long)arg1;
- (void)setMaxZoneCountPerBatch:(unsigned long long)arg1;
- (void)setMetadata:(id)arg1;
- (void)setNeedsToFetchChanges;
- (void)setNeedsToReloadAccount:(bool)arg1;
- (void)setNotificationListener:(id)arg1;
- (void)setOperationQueue:(id)arg1;
- (void)setPriority:(long long)arg1;
- (void)setSkipRetryOnOperationError:(bool)arg1;
- (void)setUseEarliestStartDateForSchedulerActivitiesInPast:(bool)arg1;
- (void)setUseOpportunisticPushTopic:(bool)arg1;
- (void)setWaitingForHSA2:(bool)arg1;
- (void)setWaitingForIdentityUpdate:(bool)arg1;
- (void)setXpcActivityCriteriaOverrides:(id)arg1;
- (bool)skipRetryOnOperationError;
- (void)submitActivityIfNecessaryWithIdentifier:(id)arg1 earliestStartDate:(id)arg2 priority:(long long)arg3 userRequestedBackupTask:(bool)arg4 relatedApplicationBundleIdentifiers:(id)arg5;
- (id)syncActivityIdentifier;
- (void)unregisterActivities;
- (void)updateMetadataAndNotifyDatasourceIfNecessaryForUserRecordID:(id)arg1;
- (bool)useEarliestStartDateForSchedulerActivitiesInPast;
- (bool)useOpportunisticPushTopic;
- (id)userRequestedBackupActivityIdentifier;
- (id)xpcActivityCriteriaOverrides;
- (id)zoneIDsToDeleteInZoneIDs:(id)arg1;
- (id)zoneIDsToSaveInZoneIDs:(id)arg1;

@end
