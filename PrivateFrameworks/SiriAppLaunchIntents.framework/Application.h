/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MobileSafariUI.framework/MobileSafariUI
 */

@interface Application : SFBrowserApplication <BKSMousePointerDeviceObserver, MCProfileConnectionObserver, PageLoadTestRunnerDelegate, SFBrowserApplicationProxy, SFUIApplicationModifierFlagsProviding, SFWebExtensionsControllerDelegate, TabSnapshotCacheStressTestRunnerDelegate, UIApplicationDelegatePrivate, WBDatabaseLockAcquisitorDelegate, WBSBrowserTabCompletionProviderSource, WBSSystemNoteTakingControllerDelegate, WBSUnifiedBarAnalyticsRecorderDelegate, _SFDownloadDelegate, _SFNavigationIntentHandling> {
    WBSParsecABGroupManager * _abGroupManager;
    NSMutableArray * _activeDownloads;
    AutomationController * _automationController;
    WebBookmarkCollection * _bookmarkCollection;
    unsigned long long  _bookmarksDatabaseBackgroundTaskIdentifier;
    WBDatabaseLockAcquisitor * _bookmarksDatabaseBackgroundTaskLockAcquisitor;
    BookmarksDatabaseHealthReporter * _bookmarksDatabaseHealthReporter;
    BrowserWindowController * _browserWindowController;
    WBSAllowedLegacyTLSHostManager * _cachedLegacyTLSHostManager;
    <WBSCloudHistoryServiceProtocol> * _cloudHistory;
    long long  _currentKeyboardModifierFlags;
    WBSCyclerConnectionManager * _cyclerConnectionManager;
    <NSObject> * _developerPreferencesDidChangeNotificationToken;
    WBTabGroupManager * _ephemeralTabGroupManager;
    ForYouRecommendationMediator * _existingForYouRecommendationMediator;
    bool  _finishedLaunching;
    NSString * _focusedTabGroupUUIDString;
    WBSForYouRecentParsecResultsManager * _forYouRecentParsecResultsManager;
    ForYouRecommendationMediator * _forYouRecommendationMediator;
    WBSFormAutoFillCorrectionsHistoryObserver * _formAutoFillCorrectionsHistoryObserver;
    HighlightManager * _highlightManager;
    bool  _isReadingDefaults;
    bool  _isRunningCanvasTest;
    bool  _isRunningShowBookmarksTest;
    bool  _needsFocusedTabGroupUpdate;
    NSString * _openURLOriginBundleIdentifier;
    WBSPhishingClassifierController * _phishingClassifier;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _pointerDeviceLock;
    <BSInvalidatable> * _pointerDeviceObserverToken;
    NSMutableSet * _pointerDevices;
    ReadingListLeadImageCache * _readingListImageCache;
    bool  _resigningActive;
    WBSavedStateManager * _savedStateManager;
    SafariSettingsSyncEngine * _settingsSyncEngine;
    bool  _shouldReadDefaultsOnResume;
    bool  _startedBookmarksTest;
    SystemNoteTakingController * _systemNoteTakingController;
    WBTabCollection * _tabCollection;
    WBSBrowserTabCompletionProvider * _tabCompletionProvider;
    WBTabGroupManager * _tabGroupManager;
    WBSUnifiedBarAnalyticsRecorder * _unifiedBarAnalyticsRecorder;
    SBSAssertion * _wallpaperSuspensionAssertion;
    bool  _willEnterSuspendedState;
}

@property (nonatomic, readonly) WBSParsecABGroupManager *abGroupManager;
@property (nonatomic, readonly) AutomationController *automationController;
@property (nonatomic, readonly) WebBookmarkCollection *bookmarkCollection;
@property (nonatomic, readonly) NSArray *browserControllers;
@property (nonatomic, readonly) BrowserWindowController *browserWindowController;
@property (nonatomic, readonly) long long currentKeyboardModifierFlags;
@property (nonatomic, readonly) UIScene *currentScene;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) WBTabGroupManager *ephemeralTabGroupManager;
@property (nonatomic) ForYouRecommendationMediator *existingForYouRecommendationMediator;
@property (nonatomic, readonly, copy) NSString *focusedTabGroupUUIDString;
@property (nonatomic, readonly) WBSForYouRecentParsecResultsManager *forYouRecentParsecResultsManager;
@property (nonatomic, readonly) bool hasPointerDevice;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HighlightManager *highlightManager;
@property (nonatomic, readonly) bool isCloudHistoryEnabled;
@property (nonatomic, readonly) bool isRunningPPT;
@property (nonatomic, readonly) WBSAllowedLegacyTLSHostManager *legacyTLSHostManager;
@property (nonatomic, readonly) unsigned long long maximumTabCount;
@property (nonatomic) bool needsFocusedTabGroupUpdate;
@property (nonatomic, readonly) <WBSPhishingClassifier> *phishingClassifier;
@property (nonatomic, readonly) bool prefersSingleWindow;
@property (nonatomic, readonly) BrowserController *primaryBrowserController;
@property (nonatomic, readonly) ReadingListLeadImageCache *readingListLeadImageCache;
@property (nonatomic, readonly) WBSavedStateManager *savedStateManager;
@property (nonatomic, readonly) SafariSettingsSyncEngine *settingsSyncEngine;
@property (nonatomic, readonly) bool shouldRestoreStateForPPT;
@property (readonly) Class superclass;
@property (nonatomic, readonly) SystemNoteTakingController *systemNoteTakingController;
@property (nonatomic, readonly) WBTabCollection *tabCollection;
@property (nonatomic, readonly, copy) NSArray *tabEntitiesForAutomation;
@property (nonatomic, readonly) WBTabGroupManager *tabGroupManager;
@property (nonatomic, readonly) <WBSUnifiedBarAnalyticsProviding> *unifiedBarAnalyticsProvider;
@property (nonatomic, readonly) bool usesDefaultBrowsingModeInAllWindows;
@property (nonatomic, readonly) bool usesLoweredSearchBar;
@property (nonatomic, readonly) bool usesPrivateBrowsingModeInAnyWindow;

+ (id /* block */)browserControllerUIDelegateProvider;
+ (void)commandLineTestOption:(int)arg1 arg:(const char *)arg2;
+ (id)contextClient;
+ (void)initialize;
+ (void)postTestNotificationName:(id)arg1 object:(id)arg2;
+ (void)postTestNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
+ (void)setBrowserControllerUIDelegateProvider:(id /* block */)arg1;
+ (id)sharedApplication;
+ (id)sharedTestRunner;
+ (unsigned long long)systemMemorySize;

- (void).cxx_destruct;
- (void)_addDefaultsObserver;
- (void)_appleKeyboardsChanged:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (id)_browserControllerForApplicationTesting;
- (id)_browserControllerForExternalNavigation;
- (id)_browserControllerForTabWithUUID:(id)arg1;
- (void)_connectToCyclerIfNecessary;
- (void)_didEnableCustomizationSync;
- (void)_doSearchTestOnCVC:(id)arg1 WithTestStrings:(id)arg2 andDispatchGroup:(id)arg3;
- (void)_downloadDidStartNotification:(id)arg1;
- (void)_downloadDidStopNotification:(id)arg1;
- (void)_export30DaysWorthOfHistoryAfterUpgrade;
- (id)_extendLaunchTest;
- (id)_generateMemoryFootprintResults:(id)arg1;
- (void)_getBookmarksDataClassEnabledWithCompletionHandler:(id /* block */)arg1;
- (void)_handleHIDEvent:(struct __IOHIDEvent { }*)arg1;
- (void)_historyHostnamesWereRemoved:(id)arg1;
- (void)_historyWasCleared:(id)arg1;
- (void)_loadAlternateHTMLString:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_loadLargeForm:(id /* block */)arg1;
- (void)_loadTabsForTesting:(unsigned long long)arg1 presentTabView:(bool)arg2 completion:(id /* block */)arg3;
- (void)_managedProfileConfigurationDidUpdate;
- (unsigned long long)_maximumTabCount;
- (unsigned long long)_numberOfTabsForPrivateBrowsing:(bool)arg1;
- (id)_numberOption:(id)arg1;
- (void)_observeNotificationOnce:(id)arg1 handler:(id /* block */)arg2;
- (void)_performBookmarksDatabaseTasksInBackground;
- (void)_pollCanvasTest:(id)arg1;
- (void)_populateInMemoryBookmarksDBForTestNamed:(id)arg1;
- (void)_preparePageLoadTestControllerParameters;
- (void)_prepareTabViewBringUpTest;
- (void)_prepareTabViewCloseTest;
- (void)_prepareTabViewOpenTest;
- (void)_prepareTabViewRotationTest;
- (void)_prepareTabViewScrollTest;
- (void)_prepareTabViewSelectTest;
- (void)_prewarmAutomationControllerIfEnabled;
- (void)_pruneExpiredScenes;
- (void)_readDefaults;
- (void)_readFocusConfigurationKeys;
- (void)_reloadSearchEngines;
- (void)_reportBookmarksDatabaseHealth;
- (void)_reportLaunchAnalyticsSoon;
- (void)_resetCloudHistoryAccountIfNeeded;
- (bool)_resetHistoryWithCompressedDatabaseAtURL:(id)arg1 error:(id*)arg2;
- (void)_runFormTypingTextWithSetupScript:(id)arg1;
- (void)_runSidebarTest;
- (void)_runTabBarSwitchTabTest;
- (void)_runTabOverviewOpenNewTabTest;
- (void)_runTabOverviewPresentingAndDismissalTest;
- (void)_runTabOverviewScrollPerfTest;
- (void)_saveBrowserState;
- (void)_scrollContentWithTestName:(id)arg1 scrollingBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 amplitude:(double)arg3 completionHandler:(id /* block */)arg4;
- (id)_scrollViewForTestNamed:(id)arg1;
- (void)_showSearchEngineAlertIfNeeded;
- (id)_sortedBrowserControllers;
- (bool)_startResizeTestWithName:(id)arg1;
- (void)_suspendOrResumeWallpaperAnimationIfNeeded;
- (void)_switchToBookmarksCollectionForTestNamed:(id)arg1;
- (id)_syntheticHTMLString;
- (id)_tabCompletionProvider;
- (void)_tabGroupFocusConfigurationChanged;
- (void)_typeTextInForm:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_updateCloudFeatureAvailability;
- (void)_updateKeyboardCorrectionLearningAllowed;
- (void)_webBookmarksDidReload;
- (id)abGroupManager;
- (void)application:(id)arg1 didDiscardSceneSessions:(id)arg2;
- (bool)application:(id)arg1 didFinishLaunchingWithOptions:(id)arg2;
- (void)application:(id)arg1 userDidAcceptCloudKitShareWithMetadata:(id)arg2;
- (void)applicationWillSuspend;
- (void)applicationWillTerminate;
- (void)auditTabCount;
- (id)automationController;
- (id)bookmarkCollection;
- (id)browserControllers;
- (id)browserWindowController;
- (void)buildMenuWithBuilder:(id)arg1;
- (bool)canAddNewTabForPrivateBrowsing:(bool)arg1;
- (void)checkExtendedLaunchPageLoad:(id)arg1 forTabDocument:(id)arg2;
- (void)clearCachedTabCompletionData;
- (id)createRecommendationMediatorOrReuseExistingOneIfPossible;
- (long long)currentKeyboardModifierFlags;
- (id)currentScene;
- (void)databaseLockAcquisitor:(id)arg1 acquiredLock:(bool)arg2;
- (void)didReceiveMemoryWarning;
- (bool)didStartBookmarksTest;
- (void)dispatchNavigationIntent:(id)arg1;
- (void)downloadDidFail:(id)arg1;
- (void)downloadDidFinish:(id)arg1;
- (void)downloadDidReceiveResponse:(id)arg1;
- (void)downloadDidStart:(id)arg1;
- (void)downloadShouldContinueAfterReceivingResponse:(id)arg1 decisionHandler:(id /* block */)arg2;
- (id)ephemeralTabGroupManager;
- (id)existingForYouRecommendationMediator;
- (void)extensionBaseURIMapChangedForExtensionsController:(id)arg1;
- (void)extensionsController:(id)arg1 closeOpenExtensionTabsWithBaseURI:(id)arg2;
- (void)failedPurpleTestWithError:(id)arg1;
- (void)finishedBookmarksTest;
- (void)finishedCanvasTestWithURL:(id)arg1 forTabDocument:(id)arg2;
- (void)finishedPurpleTest:(id)arg1;
- (id)focusedTabGroupUUIDString;
- (id)forYouRecentParsecResultsManager;
- (void)handleKeyUIEvent:(id)arg1;
- (void)handleNavigationIntent:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasPointerDevice;
- (id)highlightManager;
- (bool)isCloudHistoryEnabled;
- (bool)isNoteTakingControllerSupportedInPrivateBrowsing:(id)arg1;
- (bool)isRunningCanvasTest;
- (bool)isRunningPPT;
- (bool)isRunningShowBookmarksTest;
- (bool)isTabActiveWithUUID:(id)arg1;
- (id)legacyTLSHostManager;
- (void)loadBlankPageforKeyboardTests;
- (void)loadTabsForTesting:(unsigned long long)arg1 presentTabView:(bool)arg2;
- (void)loadTabsForTesting:(unsigned long long)arg1 presentTabView:(bool)arg2 completion:(id /* block */)arg3;
- (unsigned long long)maximumTabCount;
- (void)mousePointerDevicesDidConnect:(id)arg1;
- (void)mousePointerDevicesDidDisconnect:(id)arg1;
- (bool)needsFocusedTabGroupUpdate;
- (void)noteTakingController:(id)arg1 addHighlightForUserActivity:(id)arg2 completion:(id /* block */)arg3;
- (void)notifyAddedLinkPreviewMetadata:(id)arg1 toUserActivity:(id)arg2 webView:(id)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)overrideBrowserStateForTestNamed:(id)arg1 browserController:(id)arg2;
- (void)pageLoadTestRunnerFinished:(id)arg1;
- (id)phishingClassifier;
- (bool)prefersSingleWindow;
- (bool)prepareBookmarksTest;
- (void)prepareTabViewBringUpTest;
- (void)prepareTabViewCloseTest;
- (void)prepareTabViewOpenTest;
- (void)prepareTabViewRotationTest;
- (void)prepareTabViewScrollTest;
- (void)prepareTabViewSelectTest;
- (id)primaryBrowserController;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(id)arg1 userInfo:(id)arg2;
- (id)proxy;
- (id)readingListLeadImageCache;
- (void)runBookmarksViewTest;
- (void)runGeneratePasswordTest;
- (void)runLargeFormFocusTest;
- (void)runLargeFormTypingTest;
- (bool)runMemoryOrIOTestWithType:(unsigned long long)arg1;
- (void)runTabOverviewTest;
- (void)runTabSnapshotCacheStressTest;
- (bool)runTest:(id)arg1 options:(id)arg2;
- (void)saveChangesToCloudHistoryStore;
- (id)savedStateManager;
- (id)sceneForTabGroupWithUUIDString:(id)arg1;
- (id)sceneForTabWithUUID:(id)arg1;
- (id)searchParametersWithCFEnabled:(bool)arg1;
- (id)selectedTabInfoForBrowserTabCompletionProvider:(id)arg1;
- (void)setExistingForYouRecommendationMediator:(id)arg1;
- (void)setNeedsFocusedTabGroupUpdate:(bool)arg1;
- (id)settingsSyncEngine;
- (bool)sfWebExtensionsController:(id)arg1 canSendMessageFromWebView:(id)arg2;
- (void)sfWebExtensionsController:(id)arg1 captureVisibleTab:(id)arg2 format:(id)arg3 quality:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)sfWebExtensionsController:(id)arg1 createNewTabInWindow:(id)arg2 tabIndex:(id)arg3 url:(id)arg4 makeActive:(bool)arg5 completionHandler:(id /* block */)arg6;
- (id)sfWebExtensionsController:(id)arg1 duplicateTab:(id)arg2;
- (id)sfWebExtensionsController:(id)arg1 navigationIntentUUIDForWindow:(id)arg2;
- (void)sfWebExtensionsController:(id)arg1 relateParentTab:(id)arg2 toTab:(id)arg3;
- (id)sfWebExtensionsController:(id)arg1 reusableTabWithID:(double)arg2;
- (void)sfWebExtensionsController:(id)arg1 showPopupForExtension:(id)arg2 inWindow:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)sfWebExtensionsController:(id)arg1 tabForWebView:(id)arg2;
- (id)sfWebExtensionsController:(id)arg1 tabWithID:(double)arg2;
- (id)sfWebExtensionsController:(id)arg1 windowForWebView:(id)arg2 extension:(id)arg3;
- (id)sfWebExtensionsController:(id)arg1 windowWithID:(double)arg2;
- (id)sfWebExtensionsControllerAllWindows:(id)arg1;
- (void)sfWebExtensionsControllerCompileContentBlocker:(id)arg1 identifier:(id)arg2 rules:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)sfWebExtensionsControllerContentBlockerListDidChange:(id)arg1;
- (void)sfWebExtensionsControllerDidChangeExtensionForPermissionBanner:(id)arg1;
- (id)sfWebExtensionsControllerLastFocusedWindow:(id)arg1;
- (bool)shouldRestoreStateForPPT;
- (void)startBookmarksTest;
- (bool)startCanvasTest:(id)arg1;
- (void)startCommandLineTest;
- (bool)startHistoryLoadTest;
- (bool)startHistoryTest;
- (void)startKeyboardBringupTest;
- (void)startKeyboardRotationTest;
- (void)startKeyboardSplitAndMergeTest;
- (void)startSearchPerformanceDetailedTestWithCF:(bool)arg1;
- (void)startSearchPerformanceTest;
- (void)startSearchPerformanceTestWithTestStrings:(id)arg1;
- (void)startSearchPerformanceTestWithTestStrings:(id)arg1 perQuery:(bool)arg2 withCF:(bool)arg3;
- (void)startSearchPerformanceUnifiedFieldKeyTimeTest;
- (bool)startSidebarTest;
- (bool)startTabBarTest;
- (void)startTabViewBringUpTest;
- (void)startTabViewCloseTest;
- (void)startTabViewOpenTest;
- (void)startTabViewRotationTest;
- (void)startTabViewScrollTest;
- (void)startTabViewSelectTest;
- (void)startedPurpleTest;
- (id)systemNoteTakingController;
- (id)tabCollection;
- (id)tabCollectionConfiguration;
- (id)tabEntitiesForAutomation;
- (void)tabEntitiesMatchingQuery:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)tabEntityWithUUID:(id)arg1;
- (id)tabGroupManager;
- (id)tabInfosForBrowserTabCompletionProvider:(id)arg1;
- (void)tabSnapshotCacheStressTestRunnerDidFinish:(id)arg1;
- (id)unifiedBarAnalyticsProvider;
- (void)updateTabCount;
- (void)userDefaultsDidChange:(id)arg1;
- (bool)usesDefaultBrowsingModeInAllWindows;
- (bool)usesLoweredSearchBar;
- (bool)usesPrivateBrowsingModeInAnyWindow;

@end
