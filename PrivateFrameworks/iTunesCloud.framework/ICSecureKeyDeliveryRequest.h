/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
 */

@interface ICSecureKeyDeliveryRequest : NSObject <NSCopying> {
    bool  _ITunesStoreRequest;
    NSNumber * _adamID;
    id /* block */  _asyncServerPlaybackContextDataCreationHandler;
    NSURL * _certificateURL;
    NSString * _contentURI;
    bool  _isOfflineDownload;
    NSURL * _keyServerURL;
    long long  _leaseActionType;
    NSString * _playbackToken;
    long long  _qualityOfService;
    long long  _rentalID;
    ICRequestContext * _requestContext;
    long long  _requestProtocolType;
    id /* block */  _serverPlaybackContextDataCreationHandler;
    bool  _shouldIncludeDeviceGUID;
    bool  _skippedRentalCheckout;
}

@property (getter=isITunesStoreRequest, nonatomic) bool ITunesStoreRequest;
@property (nonatomic, copy) NSNumber *adamID;
@property (nonatomic, copy) id /* block */ asyncServerPlaybackContextDataCreationHandler;
@property (nonatomic, copy) NSURL *certificateURL;
@property (nonatomic, copy) NSString *contentURI;
@property (nonatomic) bool isOfflineDownload;
@property (nonatomic, copy) NSURL *keyServerURL;
@property (nonatomic) long long leaseActionType;
@property (nonatomic, copy) NSString *playbackToken;
@property (nonatomic) long long qualityOfService;
@property (nonatomic) long long rentalID;
@property (nonatomic, copy) ICRequestContext *requestContext;
@property (nonatomic) long long requestProtocolType;
@property (nonatomic, copy) id /* block */ serverPlaybackContextDataCreationHandler;
@property (nonatomic) bool shouldIncludeDeviceGUID;
@property (nonatomic) bool skippedRentalCheckout;

- (void).cxx_destruct;
- (id)adamID;
- (id /* block */)asyncServerPlaybackContextDataCreationHandler;
- (id)certificateURL;
- (void)configureUsingAssetResourceLoadingRequest:(id)arg1;
- (void)configureUsingContentKeyRequest:(id)arg1;
- (id)contentURI;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)init;
- (bool)isITunesStoreRequest;
- (bool)isOfflineDownload;
- (id)keyServerURL;
- (long long)leaseActionType;
- (void)performWithResponseHandler:(id /* block */)arg1;
- (id)playbackToken;
- (long long)qualityOfService;
- (long long)rentalID;
- (id)requestContext;
- (long long)requestProtocolType;
- (id /* block */)serverPlaybackContextDataCreationHandler;
- (void)setAdamID:(id)arg1;
- (void)setAsyncServerPlaybackContextDataCreationHandler:(id /* block */)arg1;
- (void)setCertificateURL:(id)arg1;
- (void)setContentURI:(id)arg1;
- (void)setITunesStoreRequest:(bool)arg1;
- (void)setIsOfflineDownload:(bool)arg1;
- (void)setKeyServerURL:(id)arg1;
- (void)setLeaseActionType:(long long)arg1;
- (void)setPlaybackToken:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setRentalID:(long long)arg1;
- (void)setRequestContext:(id)arg1;
- (void)setRequestProtocolType:(long long)arg1;
- (void)setServerPlaybackContextDataCreationHandler:(id /* block */)arg1;
- (void)setShouldIncludeDeviceGUID:(bool)arg1;
- (void)setSkippedRentalCheckout:(bool)arg1;
- (bool)shouldIncludeDeviceGUID;
- (bool)skippedRentalCheckout;

@end
