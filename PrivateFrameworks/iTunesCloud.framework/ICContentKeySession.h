/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
 */

@interface ICContentKeySession : NSObject <AVContentKeySessionDelegate> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    NSNumber * _adamID;
    bool  _automaticKeyRenewalPaused;
    bool  _bypassCache;
    AVContentKeySession * _contentKeySession;
    <ICContentKeySessionDelegateProtocol> * _delegate;
    bool  _forBackgroundKeyFetching;
    NSURL * _keyCertificateURL;
    NSMutableDictionary * _keyRenewalDates;
    NSObject<OS_dispatch_source> * _keyRenewalTimer;
    NSMutableDictionary * _keyRequestsPendingRenewal;
    long long  _keyServerProtocolType;
    NSURL * _keyServerURL;
    <ICContentKeyStoreProtocol> * _keyStore;
    NSMutableSet * _pendingKeyIdentifiers;
    NSMutableSet * _pendingRenewalKeyIdentifiers;
    NSString * _playbackToken;
    NSURL * _prefetchKeyCertificateURL;
    NSSet * _prefetchKeyIdentifiers;
    NSURL * _prefetchKeyServerURL;
    ICFileContentKeyStore * _prefetchedContentKeyStore;
    NSMutableArray * _renewalCompletionBlocks;
    ICStoreRequestContext * _requestContext;
    bool  _requestOfflineKeys;
    NSObject<OS_dispatch_semaphore> * _waitForKeysSemaphore;
}

@property (nonatomic, copy) NSNumber *adamID;
@property (nonatomic) bool bypassCache;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool forBackgroundKeyFetching;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSURL *keyCertificateURL;
@property (nonatomic) long long keyServerProtocolType;
@property (nonatomic, copy) NSURL *keyServerURL;
@property (nonatomic, copy) NSString *playbackToken;
@property (nonatomic, readonly) ICStoreRequestContext *requestContext;
@property (nonatomic) bool requestOfflineKeys;
@property (readonly) Class superclass;

+ (id)enhancedAudioSharedContentKeyPath;

- (void).cxx_destruct;
- (void)_finishProcessingKeyWithIdentifier:(id)arg1;
- (void)_performKeyDeliveryRequestForContentKeyRequest:(id)arg1 persistResponse:(bool)arg2 isRenewal:(bool)arg3;
- (void)_processKeyWithIdentifier:(id)arg1;
- (void)_renewExpiredKeys;
- (void)_scheduleKeyRefreshTimer;
- (id)adamID;
- (void)addAsset:(id)arg1;
- (void)addAsset:(id)arg1 shouldPreloadKeys:(bool)arg2 waitForKeyIdentifiers:(bool)arg3;
- (bool)bypassCache;
- (void)contentKeySession:(id)arg1 contentKeyRequest:(id)arg2 didFailWithError:(id)arg3;
- (void)contentKeySession:(id)arg1 contentKeyRequestDidSucceed:(id)arg2;
- (void)contentKeySession:(id)arg1 didProvideContentKeyRequest:(id)arg2;
- (void)contentKeySession:(id)arg1 didProvidePersistableContentKeyRequest:(id)arg2;
- (void)contentKeySession:(id)arg1 didProvideRenewingContentKeyRequest:(id)arg2;
- (void)dealloc;
- (id)description;
- (bool)forBackgroundKeyFetching;
- (id)init;
- (id)initWithRequestContext:(id)arg1;
- (id)initWithRequestContext:(id)arg1 keyStore:(id)arg2;
- (id)initWithRequestContext:(id)arg1 keyStore:(id)arg2 delegate:(id)arg3;
- (id)keyCertificateURL;
- (long long)keyServerProtocolType;
- (id)keyServerURL;
- (void)pauseAutomaticKeyRenewal;
- (id)playbackToken;
- (void)processKeyWithIdentifier:(id)arg1;
- (void)removeAsset:(id)arg1;
- (id)requestContext;
- (bool)requestOfflineKeys;
- (void)resumeAutomaticKeyRenewal;
- (void)setAdamID:(id)arg1;
- (void)setBypassCache:(bool)arg1;
- (void)setForBackgroundKeyFetching:(bool)arg1;
- (void)setKeyCertificateURL:(id)arg1;
- (void)setKeyServerProtocolType:(long long)arg1;
- (void)setKeyServerURL:(id)arg1;
- (void)setPlaybackToken:(id)arg1;
- (void)setRequestOfflineKeys:(bool)arg1;
- (void)waitForAllKeysToProcess;
- (void)waitForAllKeysToProcessWithTimeout:(double)arg1;
- (void)waitForKeyRenewalsWithCompletionHandler:(id /* block */)arg1;

@end
