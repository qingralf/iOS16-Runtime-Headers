/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRepairCore.framework/CoreRepairCore
 */

@interface CRFDRSeal : NSObject <CRFDR> {
    NSString * FDRCAURL;
    NSString * FDRDSURL;
    NSString * FDRPersistentDataPath;
    NSString * FDRSealingURL;
    NSString * KBBSerialNumber;
    NSString * KGBSerialNumber;
    NSString * SOCKSHost;
    NSNumber * SOCKSPort;
    NSData * apTicketData;
    NSDictionary * claimDict;
    NSMutableArray * currentClasses;
    NSMutableArray * currentInstances;
    NSString * currentMLBSerialNumber;
    NSDictionary * currentProperties;
    NSString * currentSerialNumber;
    NSURL * dataDirectoryURL;
    <setupModuleChallengeCallBack> * delegate;
    NSNumber * displayMaxDuration;
    bool  doSeal;
    bool  enableProxy;
    bool  enableStagedSeal;
    NSArray * expectedPatchDataClasses;
    NSArray * expectedPatchDataInstances;
    NSArray * expectedPatchDicts;
    CRFDRBaseDeviceHandler * handler;
    NSMutableArray * makeClasses;
    NSMutableArray * makeInstances;
    NSDictionary * makeProperties;
    NSDictionary * manifestDataClassesAndInstances;
    NSMutableArray * mergedDataClasses;
    NSMutableArray * mergedDataInstances;
    NSDictionary * metadataDict;
    NSArray * minimalSealedClasses;
    NSArray * minimalSealedInstances;
    NSArray * minimalSealingInstances;
    NSMutableDictionary * networkUsage;
    NSSet * overridePropertySet;
    NSSet * partSPC;
    NSArray * patchDataClasses;
    NSArray * patchDataInstances;
    NSArray * patchDicts;
    NSMutableDictionary * postSealingManifest;
    NSMutableDictionary * preSealingManifest;
    NSArray * removedProperties;
    NSMutableDictionary * repairStats;
    int  sealCount;
    NSString * sealedDataInstance;
    NSString * trustObjectURL;
    NSDictionary * updateClassDict;
    NSDictionary * updateProperties;
}

@property (nonatomic, retain) NSData *apTicketData;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <setupModuleChallengeCallBack> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CRFDRBaseDeviceHandler *handler;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (bool)currentProcessHasEntitlement:(id)arg1;

- (void).cxx_destruct;
- (long long)CRFDRDataRepairRecover:(struct __AMFDR { }*)arg1 fdrRemote:(struct __AMFDR { }*)arg2 fdrError:(id*)arg3;
- (long long)CRFDRLocalPopulate:(struct __AMFDR { }*)arg1 fdrRemote:(struct __AMFDR { }*)arg2 sealedData:(struct __AMFDRSealedData {}**)arg3 fdrError:(id*)arg4;
- (long long)CRFDRVerifyLocal:(struct __AMFDR { }*)arg1 fdrRemote:(struct __AMFDR { }*)arg2 sealedData:(struct __AMFDRSealedData {}**)arg3 mergedDataClasses:(id)arg4 mergedDataInstances:(id)arg5 currentManifestProperties:(id)arg6 fdrError:(id*)arg7 syncEAN:(bool)arg8;
- (long long)CRFDRVerifyProperties:(struct __AMFDR { }*)arg1 currentManifestProperties:(id)arg2 fdrError:(id*)arg3;
- (id)_baseFDROptionsWithDataStore:(id)arg1;
- (bool)_commitMakedata:(id)arg1 fdrlocal:(struct __AMFDR { }*)arg2 fdrError:(id*)arg3;
- (long long)_commitSealedData:(struct __AMFDR { }*)arg1 fdrRemote:(struct __AMFDR { }*)arg2 sealedData:(struct __AMFDRSealedData { }*)arg3 returnError:(id*)arg4;
- (id)_copyFDROptionsForPatch:(struct __AMFDR { }*)arg1;
- (long long)_fetchRemoteTrustObject:(struct __AMFDR { }*)arg1 apTrustObjectDigest:(id)arg2 remoteTrustObject:(id*)arg3 fdrError:(id*)arg4;
- (id)_getCRFDRMetaDataDictionary;
- (void)_logSealingRequest:(struct __AMFDRSealedData { }*)arg1;
- (id)_personalizeTrustObjectWithDigest:(id)arg1 withError:(id*)arg2;
- (id)_setLocalAndRemotePermission:(struct __AMFDR { }*)arg1 fdrRemote:(struct __AMFDR { }*)arg2;
- (bool)_urlsOverrideIsAllowed;
- (id)apTicketData;
- (id)delegate;
- (id)extractNetworkUsage;
- (bool)getMergedClasses:(id*)arg1 mergedInstances:(id*)arg2 sealedInstance:(id*)arg3;
- (id)handler;
- (id)init;
- (id)initForRegisterChangeWithParameters:(id)arg1;
- (id)initWithParameters:(id)arg1;
- (long long)patchWithOptions:(id)arg1 dataClasses:(id)arg2 dataInstances:(id)arg3 dicts:(id)arg4 error:(id*)arg5 local:(bool)arg6;
- (long long)performHTTPChallengeClaim:(struct __AMFDR { }*)arg1 fdrLocal:(struct __AMFDR { }*)arg2 fdrError:(id*)arg3 claimClassDict:(id)arg4 registerOnly:(bool)arg5;
- (long long)performMakeAndRecover:(struct __AMFDR { }*)arg1 fdrLocal:(struct __AMFDR { }*)arg2 fdrError:(id*)arg3;
- (long long)performPartialRepairSealing:(struct __AMFDR { }*)arg1 fdrLocal:(struct __AMFDR { }*)arg2 fdrError:(id*)arg3;
- (long long)prefetchPermissionsForSealingWith:(struct __AMFDR { }*)arg1 fdrLocal:(struct __AMFDR { }*)arg2 returnError:(id*)arg3;
- (long long)prefetchPermissionsWith:(struct __AMFDR { }*)arg1 claimClassDict:(id)arg2 returnError:(id*)arg3;
- (long long)registerChangeForComponent:(id)arg1 fdrError:(id*)arg2;
- (long long)seal:(id*)arg1 oldSealingManifest:(id*)arg2 newSealingManifest:(id*)arg3 stats:(id*)arg4;
- (long long)sealWithDataClass:(id)arg1 fdrError:(id*)arg2 registerOnly:(bool)arg3;
- (void)setApTicketData:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHandler:(id)arg1;
- (long long)setLocalAndRemoteTrustObject:(struct __AMFDR { }*)arg1 fdrLocal:(struct __AMFDR { }*)arg2 remoteTrustObjectDigest:(id)arg3 fdrError:(id*)arg4;

@end
