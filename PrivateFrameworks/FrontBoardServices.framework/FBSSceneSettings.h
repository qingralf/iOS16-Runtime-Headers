/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
 */

@interface FBSSceneSettings : NSObject <BLSBacklightSceneSettings, BSDebugDescriptionProviding, NSCopying, NSMutableCopying, PBPosterSceneSettings, PREditingSceneSettings, PRRenderingSceneSettings, PRSceneSettings, PRUISwitcherSceneSettings> {
    BOOL  _activityMode;
    FBSDisplayConfiguration * _displayConfiguration;
    bool  _foreground;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    NSSet * _ignoreOcclusionReasons;
    long long  _interfaceOrientation;
    long long  _interruptionPolicy;
    long long  _isOccluded;
    BOOL  _jetsamMode;
    double  _level;
    bool  _occluded;
    BSSettings * _otherSettings;
    bool  _prefersProcessTaskSuspensionWhileSceneForeground;
    BSSettings * _transientLocalSettings;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } SBUISA_containerViewFrame;
@property (nonatomic, readonly) long long SBUISA_layoutMode;
@property (nonatomic, readonly) unsigned long long SBUISA_minimalViewLayoutAxis;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } SBUISA_obstructedAreaLayoutFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } SBUISA_resolvedLeadingViewFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } SBUISA_resolvedMinimalViewFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } SBUISA_resolvedTrailingViewFrame;
@property (getter=isBackgrounded, nonatomic, readonly) bool backgrounded;
@property (getter=bls_isAlwaysOnEnabledForEnvironment, nonatomic, readonly) bool bls_alwaysOnEnabledForEnvironment;
@property (getter=bls_isBlanked, nonatomic, readonly) bool bls_blanked;
@property (getter=bls_isDelegateActive, nonatomic, readonly) bool bls_delegateActive;
@property (getter=bls_isLiveUpdating, nonatomic, readonly) bool bls_liveUpdating;
@property (nonatomic, readonly) NSDate *bls_presentationDate;
@property (nonatomic, readonly) unsigned long long bls_renderSeed;
@property (getter=bls_hasUnrestrictedFramerateUpdates, nonatomic, readonly) bool bls_unrestrictedFramerateUpdates;
@property (nonatomic, readonly) BLSBacklightSceneVisualState *bls_visualState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) FBSDisplayConfiguration *displayConfiguration;
@property (nonatomic, readonly, copy) FBSDisplayIdentity *displayIdentity;
@property (getter=isForeground, nonatomic, readonly) bool foreground;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long interfaceOrientation;
@property (nonatomic, readonly) long long interruptionPolicy;
@property (nonatomic, readonly) double level;
@property (nonatomic, readonly) long long pb_activeVariant;
@property (nonatomic, readonly) bool pb_animationSuspended;
@property (nonatomic, readonly) unsigned long long pb_significantEventsCounter;
@property (getter=pr_isAlternateDateEnabled, nonatomic, readonly) bool pr_alternateDateEnabled;
@property (nonatomic, readonly) BSColor *pr_caseColor;
@property (getter=pr_isComplicationRowConfigured, nonatomic, readonly) bool pr_complicationRowConfigured;
@property (getter=pr_areComplicationsDisallowed, nonatomic, readonly) bool pr_complicationsDisallowed;
@property (nonatomic, readonly) long long pr_content;
@property (getter=pr_areControlsHidden, nonatomic, readonly) bool pr_controlsHidden;
@property (getter=pr_isCoveredByModalPresentation, nonatomic, readonly) bool pr_coveredByModalPresentation;
@property (getter=pr_isDepthEffectDisallowed, nonatomic, readonly) bool pr_depthEffectDisallowed;
@property (nonatomic, readonly) long long pr_editingAcceptButtonType;
@property (nonatomic, readonly) long long pr_editingContext;
@property (nonatomic, readonly) long long pr_editingVariant;
@property (getter=pr_isFloatingLayerSnapshot, nonatomic, readonly) bool pr_floatingLayerSnapshot;
@property (nonatomic, readonly) long long pr_focusedComplicationElement;
@property (getter=pr_isInlineComplicationConfigured, nonatomic, readonly) bool pr_inlineComplicationConfigured;
@property (nonatomic, readonly) bool pr_isInvalidated;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } pr_leadingTopButtonFrame;
@property (nonatomic, readonly) long long pr_mode;
@property (getter=pr_isParallaxDisallowed, nonatomic, readonly) bool pr_parallaxDisallowed;
@property (getter=pr_isParallaxEffectivelyEnabled, nonatomic, readonly) bool pr_parallaxEffectivelyEnabled;
@property (getter=pr_isParallaxEnabled, nonatomic, readonly) bool pr_parallaxEnabled;
@property (nonatomic, readonly) PRPosterConfigurableOptions *pr_posterConfigurableOptions;
@property (nonatomic, readonly) PRPosterConfiguredProperties *pr_posterConfiguredProperties;
@property (nonatomic, readonly) PRSServerPosterPath *pr_posterContents;
@property (nonatomic, readonly, copy) NSString *pr_previewIdentifier;
@property (nonatomic, readonly, copy) NSString *pr_provider;
@property (nonatomic, readonly, copy) NSString *pr_role;
@property (nonatomic, readonly) bool pr_showsComplications;
@property (nonatomic, readonly) bool pr_showsHeaderElements;
@property (nonatomic, readonly) unsigned long long pr_significantEventsCounter;
@property (getter=pr_isSnapshot, nonatomic, readonly) bool pr_snapshot;
@property (nonatomic, readonly, copy) NSString *pr_snapshotLogIdentifier;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } pr_trailingTopButtonFrame;
@property (nonatomic, readonly) double pr_unlockProgress;
@property (nonatomic, readonly) long long pr_userInterfaceStyle;
@property (nonatomic, readonly) bool pr_usesEditingLayout;
@property (nonatomic, readonly) bool pr_wakeSourceIsSwipeToUnlock;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } prui_leadingTopButtonFrame;
@property (getter=prui_isLockPosterComplicationRowHidden, nonatomic, readonly) bool prui_lockPosterComplicationRowHidden;
@property (getter=prui_isLockPosterFloatingLayerInlined, nonatomic, readonly) bool prui_lockPosterFloatingLayerInlined;
@property (nonatomic, readonly) unsigned int prui_lockPosterLiveContentLayerContextID;
@property (nonatomic, readonly) unsigned long long prui_lockPosterLiveContentLayerRenderID;
@property (nonatomic, readonly) unsigned int prui_lockPosterLiveFloatingLayerContextID;
@property (nonatomic, readonly) unsigned long long prui_lockPosterLiveFloatingLayerRenderID;
@property (nonatomic, readonly) unsigned int prui_lockPosterOverlayLayerContextID;
@property (nonatomic, readonly) unsigned long long prui_lockPosterOverlayLayerRenderID;
@property (nonatomic, readonly, copy) BSUIVibrancyConfiguration *prui_lockVibrancyConfiguration;
@property (nonatomic, readonly) unsigned long long prui_preferredSwitcherLayoutMode;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } prui_trailingTopButtonFrame;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices

+ (bool)_isMutable;
+ (id)settings;

- (void).cxx_destruct;
- (id)_descriptionBuilderWithMultilinePrefix:(id)arg1 debug:(bool)arg2;
- (BOOL)activityMode;
- (bool)appendDescriptionToBuilder:(id)arg1 forFlag:(long long)arg2 object:(id)arg3 ofSetting:(unsigned long long)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)debugDescription;
- (id)debugDescriptionWithMultilinePrefix:(id)arg1;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)displayConfiguration;
- (id)displayIdentity;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (unsigned long long)hash;
- (id)ignoreOcclusionReasons;
- (id)init;
- (id)initWithSettings:(id)arg1;
- (long long)interfaceOrientation;
- (long long)interruptionPolicy;
- (bool)isBackgrounded;
- (bool)isEqual:(id)arg1;
- (bool)isForeground;
- (bool)isIgnoringOcclusions;
- (bool)isOccluded;
- (BOOL)jetsamMode;
- (id)keyDescriptionForSetting:(unsigned long long)arg1;
- (double)level;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)occlusions;
- (id)otherSettings;
- (bool)prefersProcessTaskSuspensionWhileSceneForeground;
- (void)setPrefersProcessTaskSuspensionWhileSceneForeground:(bool)arg1;
- (bool)settings:(id)arg1 appendDescriptionToBuilder:(id)arg2 forFlag:(long long)arg3 object:(id)arg4 ofSetting:(unsigned long long)arg5;
- (id)settings:(id)arg1 keyDescriptionForSetting:(unsigned long long)arg2;
- (id)settings:(id)arg1 valueDescriptionForFlag:(long long)arg2 object:(id)arg3 ofSetting:(unsigned long long)arg4;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (id)transientLocalSettings;
- (id)valueDescriptionForFlag:(long long)arg1 object:(id)arg2 ofSetting:(unsigned long long)arg3;

// Image: /System/Library/Frameworks/ExtensionKit.framework/ExtensionKit

- (id)ex_role;

// Image: /System/Library/PrivateFrameworks/BacklightServices.framework/BacklightServices

- (bool)bls_hasUnrestrictedFramerateUpdates;
- (bool)bls_isAlwaysOnEnabledForEnvironment;
- (bool)bls_isBlanked;
- (bool)bls_isDelegateActive;
- (bool)bls_isLiveUpdating;
- (id)bls_presentationDate;
- (unsigned long long)bls_renderSeed;
- (id)bls_visualState;

// Image: /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard

- (id)fb_fallbackSpecification;

// Image: /System/Library/PrivateFrameworks/PaperBoardUI.framework/PaperBoardUI

- (long long)pb_activeVariant;
- (bool)pb_animationSuspended;
- (unsigned long long)pb_significantEventsCounter;

// Image: /System/Library/PrivateFrameworks/PosterBoardUI.framework/PosterBoardUI

- (bool)prui_isLockPosterComplicationRowHidden;
- (bool)prui_isLockPosterFloatingLayerInlined;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })prui_leadingTopButtonFrame;
- (unsigned int)prui_lockPosterLiveContentLayerContextID;
- (unsigned long long)prui_lockPosterLiveContentLayerRenderID;
- (unsigned int)prui_lockPosterLiveFloatingLayerContextID;
- (unsigned long long)prui_lockPosterLiveFloatingLayerRenderID;
- (unsigned int)prui_lockPosterOverlayLayerContextID;
- (unsigned long long)prui_lockPosterOverlayLayerRenderID;
- (id)prui_lockVibrancyConfiguration;
- (unsigned long long)prui_preferredSwitcherLayoutMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })prui_trailingTopButtonFrame;

// Image: /System/Library/PrivateFrameworks/PosterKit.framework/PosterKit

- (long long)pr_adjustedLuminance;
- (bool)pr_areComplicationsDisallowed;
- (bool)pr_areControlsHidden;
- (id)pr_caseColor;
- (long long)pr_content;
- (long long)pr_editingAcceptButtonType;
- (long long)pr_editingContext;
- (long long)pr_editingVariant;
- (long long)pr_focusedComplicationElement;
- (bool)pr_isAlternateDateEnabled;
- (bool)pr_isComplicationRowConfigured;
- (bool)pr_isCoveredByModalPresentation;
- (bool)pr_isDepthEffectDisallowed;
- (bool)pr_isFloatingLayerSnapshot;
- (bool)pr_isInlineComplicationConfigured;
- (bool)pr_isInvalidated;
- (bool)pr_isParallaxDisallowed;
- (bool)pr_isParallaxEffectivelyEnabled;
- (bool)pr_isParallaxEnabled;
- (bool)pr_isSnapshot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pr_leadingTopButtonFrame;
- (long long)pr_mode;
- (id)pr_posterConfigurableOptions;
- (id)pr_posterConfiguredProperties;
- (id)pr_posterContents;
- (id)pr_previewIdentifier;
- (id)pr_provider;
- (id)pr_role;
- (bool)pr_showsComplications;
- (bool)pr_showsHeaderElements;
- (unsigned long long)pr_significantEventsCounter;
- (id)pr_snapshotLogIdentifier;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pr_trailingTopButtonFrame;
- (double)pr_unlockProgress;
- (long long)pr_userInterfaceStyle;
- (bool)pr_usesEditingLayout;
- (bool)pr_wakeSourceIsSwipeToUnlock;

// Image: /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })SBUISA_containerViewFrame;
- (long long)SBUISA_layoutMode;
- (unsigned long long)SBUISA_minimalViewLayoutAxis;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })SBUISA_obstructedAreaLayoutFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })SBUISA_resolvedLeadingViewFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })SBUISA_resolvedMinimalViewFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })SBUISA_resolvedTrailingViewFrame;
- (id)SBUI_systemApertureDescription;
- (id)SBUI_systemApertureDescriptionOfDiffFromSettings:(id)arg1;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (bool)isUISubclass;

@end
