/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoImaging.framework/PhotoImaging
 */

@interface _PIParallaxLayoutJob : NURenderJob {
    bool  _clockOverlapAcceptable;
    float  _confidenceMapScore;
    float  _confidencePureBackground;
    float  _confidencePureForeground;
    float  _cropScore;
    float  _faceLocalConfidence;
    bool  _facePositionAcceptable;
    float  _faceSize;
    float  _groundedScore;
    PFParallaxLayout * _layout;
    <PFParallaxLayoutConfiguration> * _layoutConfiguration;
    <PFParallaxAssetRegions> * _layoutRegions;
    float  _layoutScore;
    float  _localConfidenceScore;
    float  _mattePureBackground;
    float  _mattePureForeground;
    bool  _metadataClockOverlapAcceptable;
    float  _nFaces;
    float  _parallaxScore;
    float  _resolutionRatio;
    unsigned long long  _segmentationClassification;
    CIImage * _segmentationConfidenceMapImage;
    CIImage * _segmentationMatteImage;
    float  _segmentationScore;
}

@property (nonatomic) bool clockOverlapAcceptable;
@property (nonatomic) float confidenceMapScore;
@property (nonatomic) float confidencePureBackground;
@property (nonatomic) float confidencePureForeground;
@property (nonatomic) float cropScore;
@property (nonatomic) float faceLocalConfidence;
@property (nonatomic) bool facePositionAcceptable;
@property (nonatomic) float faceSize;
@property (nonatomic) float groundedScore;
@property (nonatomic, retain) PFParallaxLayout *layout;
@property (nonatomic, retain) <PFParallaxLayoutConfiguration> *layoutConfiguration;
@property (nonatomic, retain) <PFParallaxAssetRegions> *layoutRegions;
@property (nonatomic, readonly) PIParallaxLayoutRequest *layoutRequest;
@property (nonatomic) float layoutScore;
@property (nonatomic) float localConfidenceScore;
@property (nonatomic) float mattePureBackground;
@property (nonatomic) float mattePureForeground;
@property (nonatomic) bool metadataClockOverlapAcceptable;
@property (nonatomic) float nFaces;
@property (nonatomic) float parallaxScore;
@property (nonatomic) float resolutionRatio;
@property (nonatomic) unsigned long long segmentationClassification;
@property (nonatomic, retain) CIImage *segmentationConfidenceMapImage;
@property (nonatomic, retain) CIImage *segmentationMatteImage;
@property (nonatomic) float segmentationScore;

- (void).cxx_destruct;
- (bool)clockOverlapAcceptable;
- (bool)complete:(out id*)arg1;
- (float)confidenceMapScore;
- (float)confidencePureBackground;
- (float)confidencePureForeground;
- (float)cropScore;
- (float)faceLocalConfidence;
- (bool)facePositionAcceptable;
- (float)faceSize;
- (float)groundedScore;
- (id)initWithParallaxLayoutRequest:(id)arg1;
- (id)initWithRequest:(id)arg1;
- (id)layout;
- (id)layoutConfiguration;
- (id)layoutRegions;
- (id)layoutRequest;
- (float)layoutScore;
- (float)localConfidenceScore;
- (float)mattePureBackground;
- (float)mattePureForeground;
- (bool)metadataClockOverlapAcceptable;
- (float)nFaces;
- (float)parallaxScore;
- (bool)prepare:(out id*)arg1;
- (bool)render:(out id*)arg1;
- (float)resolutionRatio;
- (id)result;
- (id)scalePolicy;
- (unsigned long long)segmentationClassification;
- (id)segmentationConfidenceMapImage;
- (id)segmentationMatteImage;
- (float)segmentationScore;
- (void)setClockOverlapAcceptable:(bool)arg1;
- (void)setConfidenceMapScore:(float)arg1;
- (void)setConfidencePureBackground:(float)arg1;
- (void)setConfidencePureForeground:(float)arg1;
- (void)setCropScore:(float)arg1;
- (void)setFaceLocalConfidence:(float)arg1;
- (void)setFacePositionAcceptable:(bool)arg1;
- (void)setFaceSize:(float)arg1;
- (void)setGroundedScore:(float)arg1;
- (void)setLayout:(id)arg1;
- (void)setLayoutConfiguration:(id)arg1;
- (void)setLayoutRegions:(id)arg1;
- (void)setLayoutScore:(float)arg1;
- (void)setLocalConfidenceScore:(float)arg1;
- (void)setMattePureBackground:(float)arg1;
- (void)setMattePureForeground:(float)arg1;
- (void)setMetadataClockOverlapAcceptable:(bool)arg1;
- (void)setNFaces:(float)arg1;
- (void)setParallaxScore:(float)arg1;
- (void)setResolutionRatio:(float)arg1;
- (void)setSegmentationClassification:(unsigned long long)arg1;
- (void)setSegmentationConfidenceMapImage:(id)arg1;
- (void)setSegmentationMatteImage:(id)arg1;
- (void)setSegmentationScore:(float)arg1;
- (bool)wantsCompleteStage;
- (bool)wantsOutputGeometry;
- (bool)wantsOutputImage;
- (bool)wantsRenderStage;

@end
