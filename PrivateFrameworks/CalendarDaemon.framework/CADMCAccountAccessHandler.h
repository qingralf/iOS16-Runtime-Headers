/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CalendarDaemon.framework/CalendarDaemon
 */

@interface CADMCAccountAccessHandler : CADAccountAccessHandler {
    unsigned long long  _accountManagement;
    <CADACAccountsProvider> * _accountsProvider;
    NSMutableDictionary * _allowedAccountIdentifiersByAction;
    NSString * _bundleIdentifier;
    NSArray * _cachedAccounts;
    NSArray * _localAccountRestrictionsByAction;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    <CADManagedConfigurationHandler> * _managedConfigHandler;
    <CADPermissionValidator> * _permissionValidator;
}

@property (nonatomic, readonly) unsigned long long accountManagement;
@property (nonatomic, readonly) <CADACAccountsProvider> *accountsProvider;
@property (nonatomic, readonly) NSString *bundleIdentifier;
@property (nonatomic, readonly) <CADManagedConfigurationHandler> *managedConfigHandler;
@property (nonatomic, readonly) <CADPermissionValidator> *permissionValidator;

- (void).cxx_destruct;
- (bool)_areLocalStoresRestrictedForAction:(unsigned long long)arg1;
- (id)_cachedAccounts;
- (id)_filteredAccountsForAction:(unsigned long long)arg1 withUnfilteredAccounts:(id)arg2;
- (bool)_isAccount:(id)arg1 restrictedForAction:(unsigned long long)arg2;
- (bool)_isDisabledForAction:(unsigned long long)arg1;
- (id)_loadAllowedAccountIdentifiersForAction:(unsigned long long)arg1;
- (bool)_mayShowLocalAccountsForAction:(unsigned long long)arg1;
- (unsigned long long)accountManagement;
- (id)accountsProvider;
- (id)bundleIdentifier;
- (void)gatherRestrictedCalendarRowIDs:(id)arg1 forAction:(unsigned long long)arg2 inDatabase:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; struct __CFDictionary {} *x6; struct __CFDictionary {} *x7; struct os_unfair_lock_s { unsigned int x_8_1_1; } x8; unsigned int x9; unsigned int x10; struct __CFArray {} *x11; struct __CFString {} *x12; struct __CFArray {} *x13; int x14; int x15; struct __CFString {} *x16; struct __CFURL {} *x17; struct __CFString {} *x18; struct __CFString {} *x19; unsigned long long x20; int x21; int x22; int x23; id /* block */ x24; struct _opaque_pthread_mutex_t { long long x_25_1_1; BOOL x_25_1_2[56]; } x25; bool x26; struct __CFArray {} *x27; struct __CFArray {} *x28; struct __CFArray {} *x29; struct __CFArray {} *x30; id x31; bool x32; bool x33; struct __CFSet {} *x34; id x35; id x36; id x37; int x38; id x39; id x40; id x41; char *x42; unsigned int x43; unsigned int x44; bool x45; bool x46; bool x47; bool x48; bool x49; }*)arg3;
- (id)initWithDatabaseDataProvider:(id)arg1 accountsProvider:(id)arg2 permissionValidator:(id)arg3 managedConfigHandler:(id)arg4 accountManagement:(unsigned long long)arg5 bundleIdentifier:(id)arg6;
- (bool)isActionAllowed:(unsigned long long)arg1 forStore:(const void*)arg2 inDatabase:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; struct __CFDictionary {} *x6; struct __CFDictionary {} *x7; struct os_unfair_lock_s { unsigned int x_8_1_1; } x8; unsigned int x9; unsigned int x10; struct __CFArray {} *x11; struct __CFString {} *x12; struct __CFArray {} *x13; int x14; int x15; struct __CFString {} *x16; struct __CFURL {} *x17; struct __CFString {} *x18; struct __CFString {} *x19; unsigned long long x20; int x21; int x22; int x23; id /* block */ x24; struct _opaque_pthread_mutex_t { long long x_25_1_1; BOOL x_25_1_2[56]; } x25; bool x26; struct __CFArray {} *x27; struct __CFArray {} *x28; struct __CFArray {} *x29; struct __CFArray {} *x30; id x31; bool x32; bool x33; struct __CFSet {} *x34; id x35; id x36; id x37; int x38; id x39; id x40; id x41; char *x42; unsigned int x43; unsigned int x44; bool x45; bool x46; bool x47; bool x48; bool x49; }*)arg3;
- (id)managedConfigHandler;
- (id)permissionValidator;
- (void)reset;

@end
