/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIPageControl : UIControl <DebugHierarchyObject_Fallback> {
    UIVisualEffect * __platterEffect;
    long long  _backgroundStyle;
    long long  _currentPage;
    UIColor * _currentPageIndicatorTintColor;
    struct { 
        unsigned int verticalPadding : 1; 
        unsigned int horizontalPadding : 1; 
        unsigned int indicatorSpacing : 1; 
    }  _custom;
    long long  _direction;
    double  _horizontalPadding;
    double  _indicatorSpacing;
    long long  _numberOfPages;
    struct { 
        unsigned int hideForSinglePage : 1; 
        unsigned int defersCurrentPageDisplay : 1; 
        unsigned int allowScrubbing : 1; 
        unsigned int allowTapping : 1; 
        unsigned int flickToEndGestureEnabled : 1; 
    }  _pageControlFlags;
    UIColor * _pageIndicatorTintColor;
    unsigned long long  _preferredNumberOfVisibleIndicators;
    long long  _previousPage;
    double  _verticalPadding;
    _UIPageControlVisualProvider * _visualProvider;
}

@property (setter=_setAllowsDiscreteInteraction:, nonatomic) bool _allowsDiscreteInteraction;
@property (setter=_setCustomHorizontalPadding:, nonatomic) double _customHorizontalPadding;
@property (setter=_setCustomIndicatorSpacing:, nonatomic) double _customIndicatorSpacing;
@property (setter=_setCustomVerticalPadding:, nonatomic) double _customVerticalPadding;
@property (setter=_setFlickToEndGestureEnabled:, nonatomic) bool _flickToEndGestureEnabled;
@property (setter=_setIndicatorOpacity:, nonatomic) double _indicatorOpacity;
@property (setter=_setPlatterEffect:, nonatomic, retain) UIVisualEffect *_platterEffect;
@property (nonatomic) bool allowsContinuousInteraction;
@property (nonatomic) long long backgroundStyle;
@property (nonatomic) long long currentPage;
@property (nonatomic, retain) UIColor *currentPageIndicatorTintColor;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool defersCurrentPageDisplay;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long direction;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidesForSinglePage;
@property (nonatomic, readonly) long long interactionState;
@property (nonatomic) long long numberOfPages;
@property (nonatomic, retain) UIColor *pageIndicatorTintColor;
@property (nonatomic, retain) UIImage *preferredCurrentPageIndicatorImage;
@property (nonatomic, retain) UIImage *preferredIndicatorImage;
@property (getter=_preferredNumberOfVisibleIndicators, setter=_setPreferredNumberOfVisibleIndicators:, nonatomic) unsigned long long preferredNumberOfVisibleIndicators;
@property (nonatomic) long long previousPage;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_visualProviderForPageControl:(id)arg1;
+ (bool)doesOverrideMethod:(SEL)arg1 inBaseClass:(Class)arg2;

- (void).cxx_destruct;
- (id)__scalarStatisticsForUserValueChangedEvent;
- (bool)_allowsDiscreteInteraction;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (unsigned long long)_controlEventsForActionTriggered;
- (double)_customHorizontalPadding;
- (double)_customIndicatorSpacing;
- (double)_customVerticalPadding;
- (long long)_displayedPage;
- (bool)_flickToEndGestureEnabled;
- (bool)_implementsCustomCurrentPageImagesOverride;
- (bool)_implementsCustomPageImagesOverride;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_indicatorFrameForPage:(long long)arg1;
- (double)_indicatorOpacity;
- (void)_invalidateIndicators;
- (bool)_isVertical;
- (id)_platterEffect;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_setAllowsDiscreteInteraction:(bool)arg1;
- (void)_setCurrentPage:(long long)arg1;
- (void)_setCustomHorizontalPadding:(double)arg1;
- (void)_setCustomIndicatorSpacing:(double)arg1;
- (void)_setCustomVerticalPadding:(double)arg1;
- (void)_setFlickToEndGestureEnabled:(bool)arg1;
- (void)_setIndicatorOpacity:(double)arg1;
- (void)_setPlatterEffect:(id)arg1;
- (void)_setPreferredNumberOfVisibleIndicators:(unsigned long long)arg1;
- (void)_setVertical:(bool)arg1;
- (void)_traitCollectionDidChangeOnSubtreeInternal:(const struct _UITraitCollectionChangeDescription { id x1; id x2; bool x3; struct _UITraitCollectionTraitChanges { bool x_4_1_1; bool x_4_1_2; bool x_4_1_3; bool x_4_1_4; bool x_4_1_5; bool x_4_1_6; bool x_4_1_7; bool x_4_1_8; bool x_4_1_9; bool x_4_1_10; } x4; }*)arg1;
- (void)_updateCurrentPage:(long long)arg1 updateDisplayImmediately:(bool)arg2;
- (void)_updateCurrentPageDisplayWithForceUpdate:(bool)arg1;
- (void)dealloc;

// Image: /Developer/Library/PrivateFrameworks/DTDDISupport.framework/libViewDebuggerSupport.dylib

+ (id)fallback_debugHierarchyPropertyDescriptions;
+ (id)fallback_debugHierarchyValueForPropertyWithName:(id)arg1 onObject:(id)arg2 outOptions:(id*)arg3 outError:(id*)arg4;

// Image: /System/Library/AccessibilityBundles/ChatKitFramework.axbundle/ChatKitFramework

- (id)accessibilityValue;

// Image: /System/Library/AccessibilityBundles/StoreKitUI.axbundle/StoreKitUI

+ (Class)safeCategoryBaseClass;

- (void)accessibilityDecrement;
- (void)accessibilityIncrement;

// Image: /System/Library/AccessibilityBundles/UIKit.axbundle/UIKit

- (unsigned long long)_accessibilityAutomationType;
- (void)_accessibilityCurrentPageDidChange;
- (id)_accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (unsigned int)_accessibilityMediaAnalysisOption;
- (long long)_accessibilityPageCount;
- (long long)_accessibilityPageIndex;
- (bool)_accessibilityRetainsFocusOnScreenChange;
- (bool)_accessibilitySupportsActivateAction;
- (bool)accessibilityActivate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityPath;
- (unsigned long long)accessibilityTraits;
- (id)accessibilityUserInputLabels;
- (bool)canBecomeFocused;
- (bool)isAccessibilityElement;
- (void)setCurrentPage:(long long)arg1;

// Image: /usr/lib/libMainThreadChecker.dylib

- (bool)allowsContinuousInteraction;
- (long long)backgroundStyle;
- (long long)currentPage;
- (id)currentPageIndicatorImageForPage:(long long)arg1;
- (id)currentPageIndicatorTintColor;
- (bool)defersCurrentPageDisplay;
- (long long)direction;
- (void)encodeWithCoder:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hidesForSinglePage;
- (id)indicatorImageForPage:(long long)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)interactionState;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (void)layoutSubviews;
- (long long)numberOfPages;
- (id)pageIndicatorTintColor;
- (id)preferredCurrentPageIndicatorImage;
- (id)preferredIndicatorImage;
- (long long)previousPage;
- (void)setAllowsContinuousInteraction:(bool)arg1;
- (void)setBackgroundStyle:(long long)arg1;
- (void)setCurrentPageIndicatorImage:(id)arg1 forPage:(long long)arg2;
- (void)setCurrentPageIndicatorTintColor:(id)arg1;
- (void)setDefersCurrentPageDisplay:(bool)arg1;
- (void)setDirection:(long long)arg1;
- (void)setHidesForSinglePage:(bool)arg1;
- (void)setIndicatorImage:(id)arg1 forPage:(long long)arg2;
- (void)setNumberOfPages:(long long)arg1;
- (void)setPageIndicatorTintColor:(id)arg1;
- (void)setPreferredCurrentPageIndicatorImage:(id)arg1;
- (void)setPreferredIndicatorImage:(id)arg1;
- (void)setPreviousPage:(long long)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (bool)shouldTrack;
- (struct CGSize { double x1; double x2; })sizeForNumberOfPages:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)updateCurrentPageDisplay;

@end
