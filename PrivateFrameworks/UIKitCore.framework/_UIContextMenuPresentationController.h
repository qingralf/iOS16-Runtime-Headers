/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface _UIContextMenuPresentationController : UIPresentationController <UIGestureRecognizerDelegate, _UIContextMenuPanControllerDelegate, _UIContextMenuViewDelegate> {
    _UIContextMenuActionScrubbingHandoffGestureRecognizer * _actionScrubbingHandoffGestureRecognizer;
    UIVisualEffectView * _backgroundEffectView;
    UIViewFloatAnimatableProperty * _backgroundViewAnimationProgress;
    _UIMorphingPlatterView * _contentPlatterView;
    _UIContextMenuLayoutArbiterOutput * _currentLayout;
    _UIContextMenuStyle * _currentStyle;
    UITapGestureRecognizer * _dismissalTapGestureRecognizer;
    _UIFulfilledContextMenuConfiguration * _displayedConfiguration;
    _UIFlocker * _flocker;
    bool  _isAnimatingPresentation;
    bool  _isOccludingControls;
    _UIContextMenuLayoutArbiter * _layoutArbiter;
    _UIContextMenuView * _menuView;
    UITapGestureRecognizer * _platterActionTapGestureRecognizer;
    UIView * _platterContainerView;
    struct CGSize { 
        double width; 
        double height; 
    }  _platterContentSize;
    bool  _platterContentSizeDidChange;
    _UIContextMenuPanController * _platterPanController;
    UIView * _platterTransitionView;
    UITargetedPreview * _sourcePreview;
}

@property (nonatomic, retain) _UIContextMenuActionScrubbingHandoffGestureRecognizer *actionScrubbingHandoffGestureRecognizer;
@property (nonatomic, readonly) UIVisualEffectView *backgroundEffectView;
@property (nonatomic, readonly) UIViewFloatAnimatableProperty *backgroundViewAnimationProgress;
@property (nonatomic, readonly) _UIMorphingPlatterView *contentPlatterView;
@property (nonatomic, readonly) _UIContextMenuLayoutArbiterOutput *currentLayout;
@property (nonatomic, copy) _UIContextMenuStyle *currentStyle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_UIContextMenuPresentationControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UITapGestureRecognizer *dismissalTapGestureRecognizer;
@property (nonatomic, retain) _UIFulfilledContextMenuConfiguration *displayedConfiguration;
@property (nonatomic, readonly) _UIFlocker *flocker;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAnimatingPresentation;
@property (nonatomic, readonly) bool isOccludingControls;
@property (nonatomic, retain) _UIContextMenuLayoutArbiter *layoutArbiter;
@property (nonatomic, readonly) _UIContextMenuView *menuView;
@property (nonatomic) bool passthroughInteractionTouchEatingDisabledForSearchSuggestions;
@property (nonatomic, copy) NSArray *passthroughViews;
@property (nonatomic, retain) UITapGestureRecognizer *platterActionTapGestureRecognizer;
@property (nonatomic, readonly) UIView *platterContainerView;
@property (nonatomic) struct CGSize { double x1; double x2; } platterContentSize;
@property (nonatomic) bool platterContentSizeDidChange;
@property (nonatomic, retain) _UIContextMenuPanController *platterPanController;
@property (nonatomic, readonly) UIView *platterTransitionView;
@property (nonatomic, retain) UITargetedPreview *sourcePreview;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_actionsOnlyViewControllerForSourcePreview:(id)arg1;

- (void).cxx_destruct;
- (void)_adjustViewForKeyboardVisibility:(bool)arg1 keyboardInfo:(id)arg2;
- (void)_applicationWillResignActive:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_baseContentInsetsWithLeftMargin:(double*)arg1 rightMargin:(double*)arg2;
- (void)_collapseMenu;
- (void)_collapseMenuView:(id)arg1 withInitialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 offset:(struct CGPoint { double x1; double x2; })arg3 attachment:(unsigned long long)arg4;
- (void)_enableOcclusion:(bool)arg1;
- (void)_handleActionHandoffGesture:(id)arg1;
- (void)_handleDismissalTapGesture:(id)arg1;
- (void)_handlePlatterActionTapGesture:(id)arg1;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (bool)_needsToAvoidKeyboard;
- (void)_preDismissalTasks;
- (unsigned long long)_preferredSubmenuHierarchyStyle;
- (bool)_shouldDisableInteractionDuringTransitions;
- (bool)_shouldKeepCurrentFirstResponder;
- (bool)_shouldOccludeDuringPresentation;
- (bool)_shouldPreserveFirstResponder;
- (bool)_shouldRestoreFirstResponder;
- (void)_testing_dismissByTappingOutside;
- (void)_testing_tapAnAction;
- (id)_traitCollectionForChildEnvironment:(id)arg1;
- (void)_updateActionsViewReversesOrderForAttachment:(unsigned long long)arg1;
- (void)_updateLayoutAndAttachment:(bool)arg1;
- (void)_updatePlatterAndActionViewLayoutForce:(bool)arg1 updateAttachment:(bool)arg2;
- (void)_updatePlatterAndActionViewLayoutForce:(bool)arg1 updateAttachment:(bool)arg2 adjustDetent:(bool)arg3;
- (void)_updatePlatterContainerViewTraitCollection;
- (void)_updatePlatterContentSizeWithPreferredContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_updatePresentedViewFrame;
- (bool)_wantsAutomaticFirstResponderWhenPresentingRemoteViewController;
- (id)actionScrubbingHandoffGestureRecognizer;
- (id)backgroundEffectView;
- (id)backgroundViewAnimationProgress;
- (id)contentPlatterView;
- (void)contextMenuView:(id)arg1 didSelectElement:(id)arg2;
- (id)contextMenuView:(id)arg1 willDisplayMenu:(id)arg2;
- (id)currentLayout;
- (id)currentStyle;
- (void)dealloc;
- (void)didSelectCancelActionInContextMenuView:(id)arg1;
- (id)dismissalTapGestureRecognizer;
- (void)dismissalTransitionWillBegin;
- (void)displayMenu:(id)arg1 updateType:(unsigned long long)arg2;
- (id)displayedConfiguration;
- (void)enumeratePlatterViewsWithBlock:(id /* block */)arg1;
- (id)flocker;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOfPresentedViewInContainerView;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)initWithPresentingViewController:(id)arg1 configuration:(id)arg2 sourcePreview:(id)arg3 style:(id)arg4;
- (bool)isAnimatingPresentation;
- (bool)isOccludingControls;
- (id)layoutArbiter;
- (id)menuView;
- (bool)passthroughInteractionTouchEatingDisabledForSearchSuggestions;
- (id)passthroughViews;
- (id)platterActionTapGestureRecognizer;
- (struct CGSize { double x1; double x2; })platterContentSize;
- (bool)platterContentSizeDidChange;
- (id)platterPanController;
- (void)platterPanControllerDidSwipeDown:(id)arg1;
- (void)platterPanControllerDidTearOff:(id)arg1;
- (void)platterPanInteractionBegan:(id)arg1 allowSwipeToDismiss:(bool*)arg2;
- (void)platterPanInteractionEnded:(id)arg1;
- (id)platterTransitionView;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id)arg1;
- (id)preferredFocusEnvironments;
- (long long)presentationStyle;
- (void)presentationTransitionWillBegin;
- (void)replaceVisibleMenu:(id)arg1 withMenu:(id)arg2;
- (void)setActionScrubbingHandoffGestureRecognizer:(id)arg1;
- (void)setCurrentStyle:(id)arg1;
- (void)setDismissalTapGestureRecognizer:(id)arg1;
- (void)setDisplayedConfiguration:(id)arg1;
- (void)setIsAnimatingPresentation:(bool)arg1;
- (void)setLayoutArbiter:(id)arg1;
- (void)setPassthroughInteractionTouchEatingDisabledForSearchSuggestions:(bool)arg1;
- (void)setPassthroughViews:(id)arg1;
- (void)setPlatterActionTapGestureRecognizer:(id)arg1;
- (void)setPlatterContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPlatterContentSizeDidChange:(bool)arg1;
- (void)setPlatterPanController:(id)arg1;
- (void)setSourcePreview:(id)arg1;
- (id)sourcePreview;
- (void)systemLayoutFittingSizeDidChangeForChildContentContainer:(id)arg1;
- (void)tearOffForDraggingWithDragContainerView:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewTraitCollectionDidChange;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

// Image: /System/Library/AccessibilityBundles/UIKit.axbundle/UIKit

+ (Class)safeCategoryBaseClass;

- (void)_accessibilityLoadAccessibilityInformation;
- (void)_createMenuViewIfNecessaryForMenu:(id)arg1;
- (void)dismissalTransitionDidEnd:(bool)arg1;
- (id)platterContainerView;
- (void)presentationTransitionDidEnd:(bool)arg1;

@end
