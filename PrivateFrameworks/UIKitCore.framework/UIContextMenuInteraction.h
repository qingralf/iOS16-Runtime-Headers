/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIContextMenuInteraction : NSObject <UIDeferredMenuElementDelegate, UIInteraction, _UIClickPresentationInteractionDelegateInternal, _UIContextMenuPresentationAnimationDelegate, _UIContextMenuPresentationControllerDelegate, _UIVisualStyleStylable, _UIWindowSceneActivator_Internal> {
    bool  __passthroughInteractionTouchEatingDisabledForSearchSuggestions;
    NSArray * __passthroughViews;
    bool  __useSenderAsResponderSender;
    NSMutableDictionary * _configurationsByIdentifier;
    <UIContextMenuInteractionDelegate> * _delegate;
    struct { 
        bool highlightPreviewForItemWithIdentifier; 
        bool dismissalPreviewForItemWithIdentifier; 
        bool willPerformPreviewAction; 
        bool willDisplay; 
        bool willEndForConfiguration; 
        bool styleForMenu; 
        bool accessoriesForMenu; 
        bool failedToBeginForSecondaryClickAtLocation; 
        bool shouldByDelayedByGestureRecognizer; 
        bool asyncConfigurationForMenuAtLocation; 
        bool overrideSuggestedActions; 
        bool shouldPresent; 
        bool shouldAllowDragAfterDismiss; 
        bool shouldAllowSwipeToDismiss; 
        bool interactionEffectForTargetedPreview; 
        bool shouldAttemptToPresentConfiguration; 
        bool previewForHighlighting; 
        bool previewForDismissing; 
        bool _dci_secondaryHighlightPreview; 
        bool _dci_secondaryDismissalPreview; 
        bool willCommit; 
        bool willPresent; 
        bool didEnd; 
    }  _delegateImplements;
    _UIContextMenuPresentation * _outgoingPresentation;
    _UIContextMenuAnimator * _pendingCommitAnimator;
    UIContextMenuConfiguration * _pendingConfiguration;
    _UIClickPresentationInteraction * _presentationInteraction;
    NSMutableDictionary * _presentationsByIdentifier;
    UIView * _view;
    _UIWindowSceneActivationAnimator * _windowSceneActivationAnimator;
}

@property (nonatomic, readonly) UIGestureRecognizer *_gestureRecognizerForBeginningDragRelationships;
@property (nonatomic, readonly) bool _hasActivePresentationInteraction;
@property (nonatomic, readonly) bool _hasVisibleMenu;
@property (nonatomic, readonly) unsigned long long _inputPrecision;
@property (setter=_setPassthroughInteractionTouchEatingDisabledForSearchSuggestions:, nonatomic) bool _passthroughInteractionTouchEatingDisabledForSearchSuggestions;
@property (setter=_setPassthroughViews:, nonatomic, copy) NSArray *_passthroughViews;
@property (nonatomic) bool _useSenderAsResponderSender;
@property (nonatomic) bool allowSimultaneousRecognition;
@property (nonatomic, retain) NSMutableDictionary *configurationsByIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <UIContextMenuInteractionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIGestureRecognizer *gestureRecognizerForFailureRelationships;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long menuAppearance;
@property (nonatomic, retain) _UIContextMenuPresentation *outgoingPresentation;
@property (nonatomic, retain) _UIContextMenuAnimator *pendingCommitAnimator;
@property (nonatomic, retain) UIContextMenuConfiguration *pendingConfiguration;
@property (nonatomic, readonly) _UIClickPresentationInteraction *presentationInteraction;
@property (nonatomic, retain) NSMutableDictionary *presentationsByIdentifier;
@property (getter=_reachedForceThreshold, nonatomic, readonly) bool reachedForceThreshold;
@property (nonatomic, readonly) <_SFPopoverSourceInfo> *safari_popoverSourceInfo;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *view;
@property (nonatomic, retain) _UIWindowSceneActivationAnimator *windowSceneActivationAnimator;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (void)_setDefaultDriverClasses:(id)arg1 forIdiom:(long long)arg2;
+ (id)visualStyleRegistryIdentity;

- (void).cxx_destruct;
- (unsigned long long)_actualLayoutForPreferredLayout:(unsigned long long)arg1 withConfiguration:(id)arg2;
- (void)_clickPresentationInteraction:(id)arg1 dragSessionDidEndForItems:(id)arg2;
- (id)_clickPresentationInteraction:(id)arg1 interactionEffectForTargetedPreview:(id)arg2;
- (void)_clickPresentationInteraction:(id)arg1 item:(id)arg2 willAnimateDragCancelWithAnimator:(id)arg3;
- (id)_clickPresentationInteraction:(id)arg1 liveDragPreviewForPresentation:(id)arg2 dragItem:(id)arg3;
- (id)_clickPresentationInteraction:(id)arg1 previewForCancellingDragItem:(id)arg2;
- (bool)_clickPresentationInteraction:(id)arg1 shouldBeDelayedByGestureRecognizer:(id)arg2;
- (void)_clickPresentationInteraction:(id)arg1 shouldBegin:(id /* block */)arg2;
- (void)_clickPresentationInteraction:(id)arg1 shouldPresentWithCompletion:(id /* block */)arg2;
- (void)_clickPresentationInteractionEnded:(id)arg1 forPresentation:(id)arg2 reason:(unsigned long long)arg3;
- (bool)_clickPresentationInteractionShouldAllowDragAfterDismiss:(id)arg1;
- (bool)_clickPresentationInteractionShouldAllowRapidRestart:(id)arg1;
- (void)_contextMenuPresentationController:(id)arg1 beginDragWithTouch:(id)arg2;
- (void)_contextMenuPresentationController:(id)arg1 didSelectMenuLeaf:(id)arg2;
- (id)_contextMenuPresentationController:(id)arg1 willDisplayMenu:(id)arg2;
- (void)_contextMenuPresentationControllerDidBeginPanInteraction:(id)arg1 allowSwipeToDismiss:(bool*)arg2;
- (void)_contextMenuPresentationControllerDidEndPanInteraction:(id)arg1;
- (void)_contextMenuPresentationControllerDidTapPreview:(id)arg1;
- (void)_contextMenuPresentationControllerWantsToBeDismissed:(id)arg1 withReason:(unsigned long long)arg2 alongsideActions:(id /* block */)arg3 completion:(id /* block */)arg4;
- (unsigned long long)_currentActivationMode;
- (id)_delegate_configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)_delegate_contextMenuInteractionWillDisplayForConfiguration:(id)arg1;
- (id)_delegate_contextMenuInteractionWillEndForConfiguration:(id)arg1 presentation:(id)arg2;
- (bool)_delegate_failedToBeginForSecondaryClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)_delegate_getAccessoryViewsForConfiguration:(id)arg1;
- (id)_delegate_previewForDismissingForConfiguration:(id)arg1 clientReturnedPreview:(bool*)arg2;
- (id)_delegate_previewForHighlightingForConfiguration:(id)arg1;
- (void)_delegate_tappedPreviewForConfiguration:(id)arg1 withAnimator:(id)arg2;
- (void)_dragMorphDidCompleteForConfiguration:(id)arg1;
- (id)_fulfilledConfigurationForConfiguration:(id)arg1 appearance:(long long)arg2 atLocation:(struct CGPoint { double x1; double x2; })arg3;
- (id)_gestureRecognizerForBeginningDragRelationships;
- (bool)_hasActivePresentationInteraction;
- (bool)_hasVisibleMenu;
- (unsigned long long)_inputPrecision;
- (void)_interactionShouldBeginAtPlatformPoint:(struct CGPoint { double x1; double x2; })arg1 completion:(id /* block */)arg2;
- (id)_liveDragPreviewForConfiguration:(id)arg1 dragItem:(id)arg2;
- (id)_menuPreparedForDisplayWithMenu:(id)arg1 firstResponder:(id)arg2;
- (bool)_passthroughInteractionTouchEatingDisabledForSearchSuggestions;
- (id)_passthroughViews;
- (void)_performCleanupForConfigurationWithIdentifier:(id)arg1;
- (void)_prepareSceneActivationConfiguration:(id)arg1;
- (void)_presentMenuAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_presentMenuAtPlatformPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_proxySender;
- (bool)_reachedForceThreshold;
- (void)_requestSceneActivationWithConfiguration:(id)arg1 animated:(bool)arg2 sender:(id)arg3 errorHandler:(id /* block */)arg4;
- (void)_retargetDismissingMenuWithIdentifier:(id)arg1 toPreview:(id)arg2 force:(bool)arg3;
- (id)_secondaryPreviewsForClickPresentationInteraction:(id)arg1;
- (void)_setPassthroughInteractionTouchEatingDisabledForSearchSuggestions:(bool)arg1;
- (void)_setPassthroughViews:(id)arg1;
- (bool)_shouldKeepInputViewVisibleForStyle:(id)arg1;
- (id)_suggestedMenuForConfiguration:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 inCoordinateSpace:(id)arg3;
- (id)_targetedPreviewForWindowSceneActivationWithConfiguration:(id)arg1 menuPresentation:(id)arg2 isFromMenu:(bool*)arg3;
- (struct { bool x1; bool x2; bool x3; bool x4; })_testing_metdataForMenuElements:(id)arg1;
- (bool)_useSenderAsResponderSender;
- (void)_viewTraitCollectionDidChange:(id)arg1;
- (void)_willBeginWithConfiguration:(id)arg1;
- (unsigned long long)activationStyleForClickPresentationInteraction:(id)arg1;
- (bool)allowSimultaneousRecognition;
- (id)animator:(id)arg1 previewForSecondaryItem:(id)arg2 dismissingWithStyle:(unsigned long long)arg3;
- (id)clickPresentationInteraction:(id)arg1 presentationForPresentingViewController:(id)arg2;
- (id)clickPresentationInteraction:(id)arg1 previewForHighlightingAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)configurationsByIdentifier;
- (void)dealloc;
- (void)deferredMenuElementWasFulfilled:(id)arg1;
- (id)delegate;
- (void)didMoveToView:(id)arg1;
- (void)dismissMenu;
- (id)gestureRecognizerForExclusionRelationships;
- (id)gestureRecognizerForFailureRelationships;
- (id)initWithDelegate:(id)arg1;
- (struct CGPoint { double x1; double x2; })locationInView:(id)arg1;
- (long long)menuAppearance;
- (id)outgoingPresentation;
- (id)pendingCommitAnimator;
- (id)pendingConfiguration;
- (id)presentationInteraction;
- (id)presentationsByIdentifier;
- (void)setAllowSimultaneousRecognition:(bool)arg1;
- (void)setConfigurationsByIdentifier:(id)arg1;
- (void)setDrivers:(id)arg1;
- (void)setOutgoingPresentation:(id)arg1;
- (void)setPendingCommitAnimator:(id)arg1;
- (void)setPendingConfiguration:(id)arg1;
- (void)setPresentationsByIdentifier:(id)arg1;
- (void)setWindowSceneActivationAnimator:(id)arg1;
- (void)set_useSenderAsResponderSender:(bool)arg1;
- (id)targetedPreviewForAnimator:(id)arg1 dismissingWithStyle:(unsigned long long)arg2 clientReturnedPreview:(bool*)arg3;
- (void)updateVisibleMenuWithBlock:(id /* block */)arg1;
- (id)view;
- (void)willMoveToView:(id)arg1;
- (id)windowSceneActivationAnimator;

// Image: /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari

- (id)safari_popoverSourceInfo;

@end
