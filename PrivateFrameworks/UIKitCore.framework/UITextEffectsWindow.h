/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UITextEffectsWindow : UIAutoRotatingWindow <_UICanvasBasedObject> {
    UIWindowScene * __intendedWindowScene;
    unsigned long long  _activeEffectsCount;
    unsigned long long  _activeRemoteViewCount;
    NSLayoutConstraint * _bottomConstraint;
    double  _defaultWindowLevel;
    UIEditingOverlayViewController * _editingOverlayViewController;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _hostedSafeInsets;
    struct CGSize { 
        double width; 
        double height; 
    }  _hostedSceneSize;
    struct CGPoint { 
        double x; 
        double y; 
    }  _hostedWindowOffset;
    bool  _inDealloc;
    bool  _isForViewService;
    bool  _isFullscreen;
    bool  _manualHostingOverride;
    NSDictionary * _perCanvasOptions;
    unsigned long long  _windowLevelCount;
    double  _windowLevelStack;
}

@property (readonly) UIWindowScene *_intendedCanvas;
@property (readonly) NSDictionary *_options;
@property (readonly) unsigned int contextID;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double defaultWindowLevel;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIEditingOverlayViewController *editingOverlayViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } hostedFrame;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } hostedSafeInsets;
@property (nonatomic) struct CGSize { double x1; double x2; } hostedSceneSize;
@property (nonatomic) struct CGPoint { double x1; double x2; } hostedWindowOffset;
@property (nonatomic, readonly) bool isForViewService;
@property (nonatomic, readonly) bool isFullscreen;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } keyboardScreenReferenceSize;
@property (nonatomic, readonly) double keyboardWidthForCurrentDevice;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_canvasForScreen:(id)arg1;
+ (bool)_isSecure;
+ (id)_sharedTextEffectsWindowforWindowScene:(id)arg1 allowHosted:(bool)arg2 forViewService:(bool)arg3 matchesStatusBarOrientationOnAccess:(bool)arg4 shouldCreateIfNecessary:(bool)arg5;
+ (bool)_shouldSoftAssertOnSetScreen;
+ (id)activeTextEffectsWindowForCanvas:(id)arg1;
+ (id)activeTextEffectsWindowForScreen:(id)arg1;
+ (id)activeTextEffectsWindowForWindowScene:(id)arg1;
+ (id)activeTextEffectsWindowForWindowScene:(id)arg1 forViewService:(bool)arg2;
+ (void)lowerTextEffectsWindowsForHideNotificationCenter;
+ (void)raiseTextEffectsWindowsForShowNotificationCenter;
+ (void)releaseSharedInstances;
+ (id)sharedTextEffectsWindow;
+ (id)sharedTextEffectsWindowAboveStatusBar;
+ (id)sharedTextEffectsWindowForCanvas:(id)arg1;
+ (id)sharedTextEffectsWindowForScreen:(id)arg1;
+ (id)sharedTextEffectsWindowForWindowScene:(id)arg1;
+ (id)sharedTextEffectsWindowForWindowScene:(id)arg1 forViewService:(bool)arg2;

- (void).cxx_destruct;
- (bool)_canActAsKeyWindowForScreen:(id)arg1;
- (bool)_canAffectStatusBarAppearance;
- (void)_commonInitWithOptions:(id)arg1;
- (void)_commonTextEffectsInit;
- (void)_configureContextOptions:(id)arg1;
- (void)_createSystemGestureGateGestureRecognizerIfNeeded;
- (void)_didRemoveSubview:(id)arg1;
- (void)_didSnapshot;
- (bool)_extendsScreenSceneLifetime;
- (struct CGPoint { double x1; double x2; })_forHostedProcessConvertPoint:(struct CGPoint { double x1; double x2; })arg1 forWindow:(id)arg2 wasFromWindow:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_forHostedProcessConvertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forWindow:(id)arg2 wasFromWindow:(bool)arg3;
- (id)_initBasicWithCanvas:(id)arg1 options:(id)arg2;
- (id)_initWithCanvas:(id)arg1 options:(id)arg2;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 attached:(bool)arg2;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 debugName:(id)arg2 windowScene:(id)arg3;
- (id)_inputWindowController;
- (id)_intendedCanvas;
- (bool)_isFullscreen;
- (bool)_isRemoteKeyboardWindow;
- (bool)_isTextEffectsWindow;
- (void)_matchDeviceOrientation;
- (bool)_matchingOptions:(id)arg1;
- (id)_options;
- (void)_restoreWindowLevel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sceneBounds;
- (void)_sceneBoundsDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sceneReferenceBounds;
- (void)_setWindowLevel:(double)arg1;
- (bool)_shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (bool)_shouldInstallRootPresentationController;
- (bool)_shouldResizeWithScene;
- (bool)_shouldTextEffectsWindowBeHostedForView:(id)arg1;
- (void)_sortSubviewsOfView:(id)arg1;
- (void)_updateRootViewConstraintsForInterfaceOrientationAndStatusBarHeight;
- (void)_updateTransformLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_usableSceneBounds;
- (void)_willSnapshot;
- (void)dealloc;

// Image: /System/Library/AccessibilityBundles/ChatKitFramework.axbundle/ChatKitFramework

+ (Class)safeCategoryBaseClass;

- (bool)_accessibilityWindowVisible;

// Image: /System/Library/AccessibilityBundles/UIKit.axbundle/UIKit

- (bool)_accessibilityCanBeConsideredAsMainWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_axConvertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toWindow:(id)arg2;
- (bool)_axHasModalView;
- (bool)accessibilityViewIsModal;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /usr/lib/libMainThreadChecker.dylib

- (id)aboveStatusBarWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })actualSceneBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })actualSceneBoundsForLandscape:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })actualSceneFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })actualSceneFrameForOrientation:(long long)arg1;
- (long long)actualSceneOrientation;
- (void)addBottomPadding:(double)arg1;
- (void)becomeKeyWindow;
- (void)bringSubviewToFront:(id)arg1;
- (unsigned int)contextID;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromView:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromWindow:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toView:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toWindow:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromWindow:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toWindow:(id)arg2;
- (double)defaultWindowLevel;
- (void)delayHideWindow;
- (void)didAddSubview:(id)arg1;
- (id)editingOverlayViewController;
- (bool)enableRemoteHosting;
- (void)handleStatusBarChangeFromHeight:(double)arg1 toHeight:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hostedFrame;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })hostedSafeInsets;
- (struct CGSize { double x1; double x2; })hostedSceneSize;
- (struct CGPoint { double x1; double x2; })hostedWindowOffset;
- (long long)interfaceOrientation;
- (bool)isForViewService;
- (bool)isFullscreen;
- (bool)isInternalWindow;
- (struct CGSize { double x1; double x2; })keyboardScreenReferenceSize;
- (double)keyboardWidthForCurrentDevice;
- (void)resetTransform;
- (void)sendSubviewToBack:(id)arg1;
- (void)setDefaultWindowLevel:(double)arg1;
- (void)setEnableRemoteHosting:(bool)arg1;
- (void)setHostedSafeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setHostedSceneSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHostedWindowOffset:(struct CGPoint { double x1; double x2; })arg1;
- (double)slideOverWindowVerticalOffset;
- (void)sortSubviews;
- (void)updateEditingOverlayContainer;
- (void)updateForOrientation:(long long)arg1;
- (void)updateForOrientation:(long long)arg1 forceResetTransform:(bool)arg2;
- (void)updateSubviewOrdering;

@end
