/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ContainerManagerCommon.framework/ContainerManagerCommon
 */

@interface MCMCommandOperationDelete : MCMCommand <MCMParametersOperationDelete, MCMParametersWithConcreteContainersArray> {
    NSArray * _concreteContainerIdentities;
    NSArray * _containerIdentities;
    MCMXPCMessageOperationDelete * _message;
    id /* block */  _onError;
    NSMutableDictionary * _referenceCounts;
    bool  _removeAllCodeSignInfo;
    bool  _runFromManifests;
    bool  _traverseLinks;
    bool  _waitForDiskSpaceReclaim;
}

@property (nonatomic, readonly) NSArray *concreteContainerIdentities;
@property (nonatomic, readonly) NSArray *containerIdentities;
@property (nonatomic, readonly) MCMXPCMessageOperationDelete *message;
@property (nonatomic, copy) id /* block */ onError;
@property (nonatomic, readonly) NSMutableDictionary *referenceCounts;
@property (nonatomic, readonly) bool removeAllCodeSignInfo;
@property (nonatomic, readonly) bool runFromManifests;
@property (nonatomic, readonly) bool traverseLinks;
@property (nonatomic, readonly) bool waitForDiskSpaceReclaim;

+ (id)_materializeContainerIdentityFromManifestAtURL:(id)arg1 userIdentityCache:(id)arg2 error:(id*)arg3;
+ (id)_materializeContainerIdentityFromManifestPlist:(id)arg1 userIdentityCache:(id)arg2 error:(id*)arg3;
+ (id)_materializeContainerIdentityFromManifestPlistV1:(id)arg1 userIdentityCache:(id)arg2 error:(id*)arg3;
+ (unsigned long long)command;
+ (id)commandForOperationDeleteFromManifestsRemoveAllCodeSignInfo:(bool)arg1 context:(id)arg2 resultPromise:(id)arg3 onError:(id /* block */)arg4;
+ (id)commandForOperationDeleteWithContainerIdentities:(id)arg1 removeAllCodeSignInfo:(bool)arg2 context:(id)arg3 resultPromise:(id)arg4 onError:(id /* block */)arg5;
+ (Class)incomingMessageClass;

- (void).cxx_destruct;
- (id)_containerIdentitiesToDeleteTransitivelyFromMetadata:(id)arg1;
- (id)_containersToDeleteRecursivelyStartingWithContainerIdentities:(id)arg1 error:(id*)arg2;
- (id)_deleteItems:(id)arg1 directDelete:(bool)arg2 error:(id*)arg3;
- (id)_groupContainersToDeleteWhenReconcilingRemovalOfContainer:(id)arg1;
- (unsigned long long)_preflightReferenceCountAfterRemovingRefererenceToIdentifier:(id)arg1 containerClass:(unsigned long long)arg2;
- (id)_preflightReferenceCountsForContainerClass:(unsigned long long)arg1;
- (bool)_removeDeleteManifestIfExistsForContainerIdentity:(id)arg1 error:(id*)arg2;
- (void)_removeLinksTargetingItems:(id)arg1;
- (id)_replyFromRelayToDaemonWithContainerIdentities:(id)arg1;
- (void)_setManifestURLsForItems:(id)arg1;
- (id)_stableFileNameForDataOperationPlistWithContainerIdentity:(id)arg1;
- (id)_urlForDeleteManifestWithContainerIdentity:(id)arg1;
- (bool)_writeDeleteManifestForItem:(id)arg1 error:(id*)arg2;
- (bool)_writeDeleteManifestsForItems:(id)arg1 error:(id*)arg2;
- (id)concreteContainerIdentities;
- (id)containerIdentities;
- (void)execute;
- (id)initWithContainerIdentities:(id)arg1 traverseLinks:(bool)arg2 waitForDiskSpaceReclaim:(bool)arg3 removeAllCodeSignInfo:(bool)arg4 runFromManifests:(bool)arg5 context:(id)arg6 resultPromise:(id)arg7 onError:(id /* block */)arg8;
- (id)initWithMessage:(id)arg1 context:(id)arg2 reply:(id)arg3;
- (id)message;
- (id /* block */)onError;
- (bool)preflightClientAllowed;
- (id)referenceCounts;
- (bool)removeAllCodeSignInfo;
- (bool)runFromManifests;
- (void)setOnError:(id /* block */)arg1;
- (bool)traverseLinks;
- (bool)waitForDiskSpaceReclaim;

@end
