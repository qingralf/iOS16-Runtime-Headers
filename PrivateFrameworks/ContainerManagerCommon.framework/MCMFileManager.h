/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ContainerManagerCommon.framework/ContainerManagerCommon
 */

@interface MCMFileManager : NSObject {
    int (* _mkstemp_dprotected_np;
}

+ (id)defaultManager;

- (struct _acl { }*)_CopySystemContainerACLWithNumACEs:(int)arg1 isDir:(bool)arg2 inheritOnly:(bool)arg3 withError:(id*)arg4;
- (struct _acl { }*)_CopyTopLevelSystemContainerACLWithError:(id*)arg1;
- (bool)_CreateSystemUserACEInACL:(struct _acl {}**)arg1 withPermissions:(int)arg2 andFlags:(int)arg3 withError:(id*)arg4;
- (bool)_copyItemAtURL:(id)arg1 toURL:(id)arg2 failIfSrcMissing:(bool)arg3 error:(id*)arg4;
- (bool)_enumeratePOSIX1eACLEntriesAtURL:(id)arg1 error:(id*)arg2 usingBlock:(id /* block */)arg3;
- (bool)_moveItemAtURL:(id)arg1 toURL:(id)arg2 failIfSrcMissing:(bool)arg3 error:(id*)arg4;
- (id)_realPathForURL:(id)arg1 allowNonExistentPathComponents:(bool)arg2;
- (id)_realPathWhatExistsInPath:(id)arg1;
- (bool)_traverseDirectory:(id)arg1 error:(id*)arg2 withBlock:(id /* block */)arg3;
- (bool)_validateSymlink:(id)arg1 withStartingDepth:(unsigned int)arg2 andEndingDepth:(unsigned int*)arg3;
- (bool)checkFileSystemAtURL:(id)arg1 isCaseSensitive:(bool*)arg2 canAtomicSwap:(bool*)arg3 error:(id*)arg4;
- (bool)checkFileSystemAtURL:(id)arg1 supportsPerFileKeys:(bool*)arg2 error:(id*)arg3;
- (bool)compareVolumeForURL:(id)arg1 versusURL:(id)arg2 isSameVolume:(bool*)arg3 error:(id*)arg4;
- (id)copyDescriptionOfURL:(id)arg1;
- (bool)copyItemAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (bool)copyItemIfExistsAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (bool)createDirectoryAtURL:(id)arg1 withIntermediateDirectories:(bool)arg2 mode:(unsigned short)arg3 class:(int)arg4 error:(id*)arg5;
- (bool)createDirectoryAtURL:(id)arg1 withIntermediateDirectories:(bool)arg2 mode:(unsigned short)arg3 error:(id*)arg4;
- (bool)createDirectoryAtURL:(id)arg1 withIntermediateDirectories:(bool)arg2 mode:(unsigned short)arg3 owner:(id)arg4 class:(int)arg5 error:(id*)arg6;
- (bool)createDirectoryAtURL:(id)arg1 withIntermediateDirectories:(bool)arg2 mode:(unsigned short)arg3 owner:(id)arg4 class:(int)arg5 fsNode:(id*)arg6 error:(id*)arg7;
- (bool)createDirectoryAtURL:(id)arg1 withIntermediateDirectories:(bool)arg2 mode:(unsigned short)arg3 owner:(id)arg4 error:(id*)arg5;
- (id)createTemporaryDirectoryInDirectoryURL:(id)arg1 error:(id*)arg2;
- (id)createTemporaryDirectoryInDirectoryURL:(id)arg1 withNamePrefix:(id)arg2 error:(id*)arg3;
- (bool)dataProtectionClassOfItemAtURL:(id)arg1 class:(int*)arg2 error:(id*)arg3;
- (unsigned long long)dataWritingOptionsForFileAtURL:(id)arg1;
- (unsigned long long)diskUsageForURL:(id)arg1;
- (unsigned long long)fastDiskUsageForURL:(id)arg1;
- (bool)fixUserPermissionsAtURL:(id)arg1 limitToTopLevelURL:(id)arg2 error:(id*)arg3;
- (id)fsNodeOfURL:(id)arg1 followSymlinks:(bool)arg2 error:(id*)arg3;
- (id)fsSanitizedStringFromString:(id)arg1;
- (id)init;
- (bool)itemAtURL:(id)arg1 exists:(bool*)arg2 error:(id*)arg3;
- (bool)itemAtURL:(id)arg1 exists:(bool*)arg2 isDirectory:(bool*)arg3 error:(id*)arg4;
- (bool)itemAtURL:(id)arg1 followSymlinks:(bool)arg2 exists:(bool*)arg3 isDirectory:(bool*)arg4 error:(id*)arg5;
- (bool)itemAtURL:(id)arg1 followSymlinks:(bool)arg2 exists:(bool*)arg3 isDirectory:(bool*)arg4 fsNode:(id*)arg5 error:(id*)arg6;
- (bool)itemDoesNotExistAtURL:(id)arg1;
- (bool)itemExistsAtURL:(id)arg1;
- (bool)itemExistsAtURL:(id)arg1 isDirectory:(bool*)arg2;
- (bool)moveItemAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (bool)moveItemIfExistsAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (void)printDirectoryStructureAtURL:(id)arg1;
- (id)readDataFromURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)readDataFromURL:(id)arg1 options:(unsigned long long)arg2 fsNode:(id*)arg3 error:(id*)arg4;
- (id)realPathForURL:(id)arg1 ifChildOfURL:(id)arg2;
- (id)realPathForURL:(id)arg1 isDirectory:(bool)arg2 error:(id*)arg3;
- (bool)removeExclusionFromBackupFromURL:(id)arg1 error:(id*)arg2;
- (bool)removeItemAtURL:(id)arg1 error:(id*)arg2;
- (bool)setDataProtectionClassOfItemAtURL:(id)arg1 toClass:(int)arg2 ifPredicate:(id /* block */)arg3 error:(id*)arg4;
- (bool)setTopLevelSystemContainerACLAtURL:(id)arg1 error:(id*)arg2;
- (bool)standardizeACLsAtURL:(id)arg1 isSystemContainer:(bool)arg2 error:(id*)arg3;
- (bool)standardizeACLsForSystemContainerAtURL:(id)arg1 error:(id*)arg2;
- (bool)standardizeAllSystemContainerACLsAtURL:(id)arg1 error:(id*)arg2;
- (bool)standardizeOwnershipAtURL:(id)arg1 toPOSIXUser:(id)arg2 error:(id*)arg3;
- (bool)stripACLFromURL:(id)arg1 error:(id*)arg2;
- (bool)symbolicallyLinkURL:(id)arg1 toSymlinkTarget:(id)arg2 error:(id*)arg3;
- (id)targetOfSymbolicLinkAtURL:(id)arg1 error:(id*)arg2;
- (id)urlsForItemsInDirectoryAtURL:(id)arg1 error:(id*)arg2;
- (bool)writeData:(id)arg1 toURL:(id)arg2 options:(unsigned long long)arg3 mode:(unsigned short)arg4 error:(id*)arg5;

@end
