/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices
 */

@interface AMSMetrics : NSObject <AMSBagConsumer> {
    <AMSBagProtocol> * _bag;
    NSObject<OS_dispatch_queue> * _completionQueue;
    NSString * _containerId;
    <AMSMetricsFlushStrategy> * _currentFlushStrategy;
    AMSMetricsDatabaseDataSource * _databaseSource;
    long long  _destination;
    AMSEngagement * _engagement;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _engagementLock;
    id /* block */  _flushIntervalBlock;
    NSDate * _flushIntervalStartTime;
    bool  _flushOnForeground;
    NSObject<OS_dispatch_queue> * _flushQueue;
    bool  _flushTimerEnabled;
    bool  _flushingDisabled;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _flushingDisabledLock;
    long long  _maxBatchSize;
    long long  _maxRequestCount;
    bool  _monitorsLifecycleEvents;
}

@property (nonatomic, retain) <AMSBagProtocol> *bag;
@property (nonatomic, retain) <AMSMetricsBagContract> *bagContract;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *completionQueue;
@property (nonatomic, readonly) NSString *containerId;
@property (nonatomic, retain) <AMSMetricsFlushStrategy> *currentFlushStrategy;
@property (nonatomic, retain) AMSMetricsDatabaseDataSource *databaseSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long destination;
@property (nonatomic, retain) AMSEngagement *engagement;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } engagementLock;
@property (nonatomic, readonly) long long eventCount;
@property (nonatomic, copy) id /* block */ flushIntervalBlock;
@property (nonatomic, retain) NSDate *flushIntervalStartTime;
@property (nonatomic) bool flushOnForeground;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *flushQueue;
@property (nonatomic) bool flushTimerEnabled;
@property (nonatomic) bool flushingDisabled;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } flushingDisabledLock;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long maxBatchSize;
@property (nonatomic) long long maxRequestCount;
@property (nonatomic) bool monitorsLifecycleEvents;
@property (readonly) Class superclass;

+ (bool)appAnalyticsAllowed;
+ (id)bagKeySet;
+ (id)bagSubProfile;
+ (id)bagSubProfileVersion;
+ (id)createBagForSubProfile;
+ (bool)diagnosticsSubmissionAllowed;
+ (bool)disableBackgroundMetrics;
+ (bool)flushDelayEnabled;
+ (bool)flushTimerEnabled;
+ (id)internalInstanceUsingBag:(id)arg1;
+ (bool)recordAppAnalyticsForEvent:(id)arg1 bugType:(id)arg2;
+ (id)serverTimeFromDate:(id)arg1;
+ (id)serverTimeFromTimeInterval:(double)arg1;
+ (void)setDisableBackgroundMetrics:(bool)arg1;
+ (void)setFlushDelayEnabled:(bool)arg1;
+ (void)setFlushTimerEnabled:(bool)arg1;
+ (id)sharedTimerQueue;
+ (double)timeIntervalFromServerTime:(id)arg1;

- (void).cxx_destruct;
- (void)_applicationWillEnterForeground;
- (void)_beginFlushIntervalWithStyle:(long long)arg1 events:(id)arg2;
- (id)_determineFlushStrategyWithDataSource:(id)arg1 topic:(id)arg2;
- (id)_enqueueFigaroEvents:(id)arg1;
- (id)_flushDataSource:(id)arg1 topic:(id)arg2;
- (double)_flushIntervalForEvents:(id)arg1;
- (void)_flushIntervalInvalidate;
- (void)_flushTimerEnabledChanged;
- (void)_handleFlushIntervalWithStyle:(long long)arg1;
- (bool)_scheduledFlushAllowedForStyle:(long long)arg1;
- (id)bag;
- (id)bagContract;
- (void)cancel;
- (id)completionQueue;
- (id)containerId;
- (id)currentFlushStrategy;
- (id)databaseSource;
- (void)dealloc;
- (long long)destination;
- (void)dropEvents;
- (id)engagement;
- (struct os_unfair_lock_s { unsigned int x1; })engagementLock;
- (id)enqueueAsyncEvents:(id)arg1;
- (void)enqueueEvent:(id)arg1;
- (void)enqueueEvents:(id)arg1;
- (long long)eventCount;
- (id)flush;
- (id)flushEvents:(id)arg1;
- (id /* block */)flushIntervalBlock;
- (id)flushIntervalStartTime;
- (bool)flushOnForeground;
- (id)flushQueue;
- (bool)flushTimerEnabled;
- (id)flushTopic:(id)arg1;
- (bool)flushingDisabled;
- (struct os_unfair_lock_s { unsigned int x1; })flushingDisabledLock;
- (id)initWithContainerID:(id)arg1 bag:(id)arg2;
- (id)initWithContainerId:(id)arg1 bagContract:(id)arg2;
- (long long)maxBatchSize;
- (long long)maxRequestCount;
- (bool)monitorsLifecycleEvents;
- (void)setBag:(id)arg1;
- (void)setBagContract:(id)arg1;
- (void)setCompletionQueue:(id)arg1;
- (void)setCurrentFlushStrategy:(id)arg1;
- (void)setDatabaseSource:(id)arg1;
- (void)setDestination:(long long)arg1;
- (void)setEngagement:(id)arg1;
- (void)setEngagementLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setFlushIntervalBlock:(id /* block */)arg1;
- (void)setFlushIntervalStartTime:(id)arg1;
- (void)setFlushOnForeground:(bool)arg1;
- (void)setFlushQueue:(id)arg1;
- (void)setFlushTimerEnabled:(bool)arg1;
- (void)setFlushingDisabled:(bool)arg1;
- (void)setFlushingDisabledLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setMaxBatchSize:(long long)arg1;
- (void)setMaxRequestCount:(long long)arg1;
- (void)setMonitorsLifecycleEvents:(bool)arg1;

@end
