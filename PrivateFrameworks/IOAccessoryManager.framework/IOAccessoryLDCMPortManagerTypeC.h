/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IOAccessoryManager.framework/IOAccessoryManager
 */

@interface IOAccessoryLDCMPortManagerTypeC : NSObject {
    void * _FBSOpenApplicationOptionKeyPromptUnlockDevice;
    int  _analyticsDebugEvent;
    NSCondition * _condition;
    NSLock * _defaultsRWLock;
    bool  _didReportDisabledAnalytic;
    unsigned long long  _dryPollingIntervalNs;
    unsigned int  _drySinceWetCount;
    bool  _enableTTRCooldown;
    bool  _enableTapToRadarPopup;
    bool  _fakeWetMeasurements;
    NSObject<OS_dispatch_queue> * _halogenTypeCDispatchQueue;
    NSObject<OS_dispatch_queue> * _halogenTypeCTTRDispatchQueue;
    bool  _isInternalBuild;
    bool  _isMeasurementActive;
    bool  _isPowerAssertionHeld;
    bool  _isReceptacleEmpty;
    bool  _isTapToRadarPending;
    bool  _isWet;
    int  _lastMeasurementResult;
    int  _lastMeasurementStatus;
    unsigned long long  _lastTTRTimeStamp;
    unsigned long long  _lastUserNotificationTimeStamp;
    NSMutableDictionary * _ldcmErrorCountDict;
    bool  _measureSBU;
    bool  _measurementsEnabled;
    bool  _mitigationsEnabled;
    bool  _mitigationsOverrideEnabled;
    bool  _newAccArrived;
    bool  _refMeasurementFailed;
    unsigned int  _referenceMeasurementFailureCount;
    unsigned int  _referenceMeasurementPassCount;
    bool  _sbuBootArgSet;
    bool  _selfTestFailed;
    unsigned int  _selfTestFailureCount;
    unsigned int  _selfTestPassCount;
    bool  _skipMitigationsBootArgSet;
    bool  _skipTTRBootArgSet;
    unsigned int  _sleepAssertionID;
    struct mach_timebase_info { 
        unsigned int numer; 
        unsigned int denom; 
    }  _timeBase;
    NSObject<OS_dispatch_source> * _timer;
    NSObject<OS_dispatch_source> * _timerReferenceMeasurement;
    NSObject<OS_dispatch_source> * _timerSelfTest;
    HalogenTypeC * _typeC;
    bool  _userNotified;
    bool  _wasTapToRadarShown;
    struct { 
        double intialResistance; 
        double intialCapacitance; 
        double intialImpedance; 
        double initialWetWallTime; 
    }  _wetMeasurementInfo;
    unsigned long long  _wetPollingIntervalNs;
    bool  _wetTooLongRecorded;
}

@property (nonatomic) void*FBSOpenApplicationOptionKeyPromptUnlockDevice;
@property (nonatomic) int analyticsDebugEvent;
@property (nonatomic) NSCondition *condition;
@property NSLock *defaultsRWLock;
@property (nonatomic) bool didReportDisabledAnalytic;
@property (nonatomic) unsigned long long dryPollingIntervalNs;
@property (nonatomic) unsigned int drySinceWetCount;
@property (nonatomic) bool enableTTRCooldown;
@property (nonatomic) bool enableTapToRadarPopup;
@property (nonatomic) bool fakeWetMeasurements;
@property (nonatomic) NSObject<OS_dispatch_queue> *halogenTypeCDispatchQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> *halogenTypeCTTRDispatchQueue;
@property (nonatomic) bool isInternalBuild;
@property (nonatomic) bool isMeasurementActive;
@property (nonatomic) bool isPowerAssertionHeld;
@property (nonatomic) bool isReceptacleEmpty;
@property (nonatomic) bool isTapToRadarPending;
@property (nonatomic) bool isWet;
@property (nonatomic) int lastMeasurementResult;
@property (nonatomic) int lastMeasurementStatus;
@property (nonatomic) unsigned long long lastTTRTimeStamp;
@property (nonatomic) unsigned long long lastUserNotificationTimeStamp;
@property (nonatomic) NSMutableDictionary *ldcmErrorCountDict;
@property (nonatomic) bool measureSBU;
@property (nonatomic) bool measurementsEnabled;
@property (nonatomic) bool mitigationsEnabled;
@property (nonatomic) bool mitigationsOverrideEnabled;
@property (nonatomic) bool newAccArrived;
@property (nonatomic) bool refMeasurementFailed;
@property (nonatomic) unsigned int referenceMeasurementFailureCount;
@property (nonatomic) unsigned int referenceMeasurementPassCount;
@property (nonatomic) bool sbuBootArgSet;
@property (nonatomic) bool selfTestFailed;
@property (nonatomic) unsigned int selfTestFailureCount;
@property (nonatomic) unsigned int selfTestPassCount;
@property (nonatomic) bool skipMitigationsBootArgSet;
@property (nonatomic) bool skipTTRBootArgSet;
@property (nonatomic) unsigned int sleepAssertionID;
@property (nonatomic) struct mach_timebase_info { unsigned int x1; unsigned int x2; } timeBase;
@property (nonatomic) NSObject<OS_dispatch_source> *timer;
@property (nonatomic) NSObject<OS_dispatch_source> *timerReferenceMeasurement;
@property (nonatomic) NSObject<OS_dispatch_source> *timerSelfTest;
@property (nonatomic) HalogenTypeC *typeC;
@property (nonatomic) bool userNotified;
@property (nonatomic) bool wasTapToRadarShown;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } wetMeasurementInfo;
@property (nonatomic) unsigned long long wetPollingIntervalNs;
@property (nonatomic) bool wetTooLongRecorded;

- (void*)FBSOpenApplicationOptionKeyPromptUnlockDevice;
- (bool)_checkIsReceptacleEmpty;
- (void)_controlLDCMMeasurements;
- (id)_fetchFilesToUpload:(id)arg1;
- (void)_fileRadarHalogenTypeC:(id)arg1 TTRCategory:(int)arg2;
- (void)_generateAlternateMeasurementAnalytics:(bool)arg1 measurementInfo:(struct { int x1; int x2; int x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; double x20; double x21; double x22; double x23; double x24; }*)arg2 intervalSinceLastPass:(double)arg3;
- (void)_generateAnalytics:(bool)arg1 dryToWetTransition:(bool)arg2 measurementInfo:(struct { int x1; int x2; int x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; double x20; double x21; double x22; double x23; double x24; }*)arg3;
- (void)_generateFailureAnalytics:(int)arg1 recordLDCMDisabled:(bool)arg2 analyticsError:(int)arg3;
- (void)_generateLDCMCSVData;
- (void)_giveUserRadarPrompt:(int)arg1;
- (int)_halogenErrorToAnalyticError:(unsigned char)arg1;
- (bool)_holdPowerAssertionTypeC:(bool)arg1;
- (void)_loadFrontBoard;
- (void)_manageLDCMSettings;
- (int)_measurementErrorToAnalyticError:(unsigned char)arg1;
- (void)_processLDCMAnalyticsDefauts;
- (void)_processLDCMDefauts:(bool)arg1;
- (void)_processMitigationsOverride;
- (void)_readLDCMBootArgs;
- (bool)_recordLDCMError:(int)arg1;
- (void)_registerForLDCMNotifications;
- (void)_resetLDCMErrorDict;
- (bool)_setInitialTTRTimestamp;
- (bool)_setInitialUserNotificationTimestamp;
- (bool)_setMitigations:(bool)arg1;
- (void)_showMitigationAlert;
- (bool)_throttleTTR;
- (bool)_throttleUserNotification;
- (void)_writeAndNotifyDefaults:(id)arg1 value:(id)arg2 domain:(id)arg3 notify:(bool)arg4 notification:(id)arg5;
- (int)analyticsDebugEvent;
- (id)condition;
- (void)dealloc;
- (id)defaultsRWLock;
- (bool)didReportDisabledAnalytic;
- (unsigned long long)dryPollingIntervalNs;
- (unsigned int)drySinceWetCount;
- (bool)enableTTRCooldown;
- (bool)enableTapToRadarPopup;
- (bool)fakeWetMeasurements;
- (id)halogenTypeCDispatchQueue;
- (id)halogenTypeCTTRDispatchQueue;
- (void)handleAttachEvent;
- (void)handleDetachEvent;
- (id)initWithParams:(unsigned long long)arg1 dryPollingIntervalNs:(unsigned long long)arg2;
- (bool)isInternalBuild;
- (bool)isMeasurementActive;
- (bool)isPowerAssertionHeld;
- (bool)isReceptacleEmpty;
- (bool)isTapToRadarPending;
- (bool)isWet;
- (int)lastMeasurementResult;
- (int)lastMeasurementStatus;
- (unsigned long long)lastTTRTimeStamp;
- (unsigned long long)lastUserNotificationTimeStamp;
- (id)ldcmErrorCountDict;
- (bool)measureSBU;
- (bool)measurementsEnabled;
- (bool)mitigationsEnabled;
- (bool)mitigationsOverrideEnabled;
- (bool)newAccArrived;
- (void)performTypeCMeasurement;
- (void)performTypeCReferenceMeasurement;
- (void)performTypeCSelfTest;
- (bool)refMeasurementFailed;
- (unsigned int)referenceMeasurementFailureCount;
- (unsigned int)referenceMeasurementPassCount;
- (bool)sbuBootArgSet;
- (bool)selfTestFailed;
- (unsigned int)selfTestFailureCount;
- (unsigned int)selfTestPassCount;
- (void)setAnalyticsDebugEvent:(int)arg1;
- (void)setCondition:(id)arg1;
- (void)setDefaultsRWLock:(id)arg1;
- (void)setDidReportDisabledAnalytic:(bool)arg1;
- (void)setDryPollingIntervalNs:(unsigned long long)arg1;
- (void)setDrySinceWetCount:(unsigned int)arg1;
- (void)setEnableTTRCooldown:(bool)arg1;
- (void)setEnableTapToRadarPopup:(bool)arg1;
- (void)setFBSOpenApplicationOptionKeyPromptUnlockDevice:(void*)arg1;
- (void)setFakeWetMeasurements:(bool)arg1;
- (void)setHalogenTypeCDispatchQueue:(id)arg1;
- (void)setHalogenTypeCTTRDispatchQueue:(id)arg1;
- (void)setIsInternalBuild:(bool)arg1;
- (void)setIsMeasurementActive:(bool)arg1;
- (void)setIsPowerAssertionHeld:(bool)arg1;
- (void)setIsReceptacleEmpty:(bool)arg1;
- (void)setIsTapToRadarPending:(bool)arg1;
- (void)setIsWet:(bool)arg1;
- (void)setLastMeasurementResult:(int)arg1;
- (void)setLastMeasurementStatus:(int)arg1;
- (void)setLastTTRTimeStamp:(unsigned long long)arg1;
- (void)setLastUserNotificationTimeStamp:(unsigned long long)arg1;
- (void)setLdcmErrorCountDict:(id)arg1;
- (void)setMeasureSBU:(bool)arg1;
- (void)setMeasurementsEnabled:(bool)arg1;
- (void)setMitigationsEnabled:(bool)arg1;
- (void)setMitigationsOverrideEnabled:(bool)arg1;
- (void)setNewAccArrived:(bool)arg1;
- (void)setRefMeasurementFailed:(bool)arg1;
- (void)setReferenceMeasurementFailureCount:(unsigned int)arg1;
- (void)setReferenceMeasurementPassCount:(unsigned int)arg1;
- (void)setSbuBootArgSet:(bool)arg1;
- (void)setSelfTestFailed:(bool)arg1;
- (void)setSelfTestFailureCount:(unsigned int)arg1;
- (void)setSelfTestPassCount:(unsigned int)arg1;
- (void)setSkipMitigationsBootArgSet:(bool)arg1;
- (void)setSkipTTRBootArgSet:(bool)arg1;
- (void)setSleepAssertionID:(unsigned int)arg1;
- (void)setTimeBase:(struct mach_timebase_info { unsigned int x1; unsigned int x2; })arg1;
- (void)setTimer:(id)arg1;
- (void)setTimerReferenceMeasurement:(id)arg1;
- (void)setTimerSelfTest:(id)arg1;
- (void)setTypeC:(id)arg1;
- (void)setUserNotified:(bool)arg1;
- (void)setWasTapToRadarShown:(bool)arg1;
- (void)setWetMeasurementInfo:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setWetPollingIntervalNs:(unsigned long long)arg1;
- (void)setWetTooLongRecorded:(bool)arg1;
- (bool)skipMitigationsBootArgSet;
- (bool)skipTTRBootArgSet;
- (unsigned int)sleepAssertionID;
- (struct mach_timebase_info { unsigned int x1; unsigned int x2; })timeBase;
- (id)timer;
- (id)timerReferenceMeasurement;
- (id)timerSelfTest;
- (id)typeC;
- (bool)userNotified;
- (bool)wasTapToRadarShown;
- (struct { double x1; double x2; double x3; double x4; })wetMeasurementInfo;
- (unsigned long long)wetPollingIntervalNs;
- (bool)wetTooLongRecorded;

@end
