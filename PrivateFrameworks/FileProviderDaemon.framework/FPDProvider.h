/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FileProviderDaemon.framework/FileProviderDaemon
 */

@interface FPDProvider : NSObject {
    NSSet * _blockedProcessNames;
    FPDProviderDescriptor * _descriptor;
    NSObject<OS_dispatch_queue> * _domainQueue;
    NSMutableDictionary * _domainsByID;
    NSURL * _domainsPlistURL;
    bool  _invalidated;
    FPDExtensionManager * _manager;
    NSObject<OS_dispatch_queue> * _presentersQueue;
    NSURL * _providerPlistURL;
    NSObject<OS_dispatch_queue> * _queue;
    NSArray * _requestedExtendedAttributes;
    FPDServer * _server;
    NSURL * _supportURL;
}

@property (nonatomic, readonly) FPDExtension *asAppExtensionBackedProvider;
@property (nonatomic, copy) NSSet *blockedProcessNames;
@property (nonatomic, readonly) NSString *bundleVersion;
@property (nonatomic, readonly) FPDProviderDescriptor *descriptor;
@property (nonatomic, readonly) NSMutableDictionary *domainsByID;
@property (nonatomic, readonly) NSURL *domainsPlistURL;
@property (nonatomic, readonly) NSArray *extensionStorageURLs;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic, readonly) bool invalidated;
@property (nonatomic, readonly) bool isAppExtensionReachable;
@property (nonatomic, readonly) FPDExtensionManager *manager;
@property (nonatomic, readonly) NSDictionary *nsDomainsByID;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *presentersQueue;
@property (nonatomic, readonly) NSArray *providedItemsURLs;
@property (nonatomic, readonly) NSURL *providerPlistURL;
@property (nonatomic, readonly) NSString *purposeIdentifier;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, readonly) NSDictionary *relevantDomainsByID;
@property (nonatomic, retain) NSArray *requestedExtendedAttributes;
@property (nonatomic, readonly) FPDServer *server;
@property (nonatomic, readonly) bool shouldHideDomainDisplayName;
@property (nonatomic, readonly) NSURL *supportURL;
@property (nonatomic, readonly) bool supportsEnumeration;
@property (nonatomic, readonly) bool supportsFPFS;
@property (nonatomic, readonly) bool testingProvider;

+ (void)_garbageCollectFoldersWithNoRelatedDomain:(id)arg1 supportDir:(id)arg2;
+ (id)defaultNSDomainForDescriptor:(id)arg1;
+ (void)dumpXattrsForContentsOfDirectoryAtURL:(id)arg1 dumper:(id)arg2;
+ (void)dumpXattrsForItemAtURL:(id)arg1 to:(id)arg2;
+ (id)fpfsDomainXattrForURL:(id)arg1;
+ (id)getXattr:(const char *)arg1 at:(const char *)arg2;
+ (id)onDiskProvidersForServer:(id)arg1;
+ (id)parseDomainProperties:(id)arg1 descriptor:(id)arg2 replicatedByDefault:(bool)arg3;

- (void).cxx_destruct;
- (void)_createSymlinkForDomain:(id)arg1;
- (id)_recreateDefaultDomainIfNeeded;
- (void)_startOrClearDomain:(id)arg1 completion:(id /* block */)arg2;
- (bool)_supportsFPFS;
- (void)_writeDomainProperties;
- (void)_writeDomainPropertiesIfChangedFrom:(id)arg1;
- (void)addDomain:(id)arg1 byImportingDirectoryAtURL:(id)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)addDomain:(id)arg1 byImportingDirectoryAtURL:(id)arg2 unableToStartup:(bool)arg3 reloadDomain:(bool)arg4 request:(id)arg5 completionHandler:(id /* block */)arg6;
- (id)asAppExtensionBackedProvider;
- (id)blockedProcessNames;
- (id)bundleVersion;
- (id)defaultNSDomain;
- (id)description;
- (id)descriptor;
- (id)domainForIdentifier:(id)arg1;
- (id)domainForRealPathURL:(id)arg1;
- (id)domainForURL:(id)arg1;
- (id)domainsByID;
- (id)domainsPlistURL;
- (void)dumpStateTo:(id)arg1 providerFilter:(id)arg2 limitNumberOfItems:(bool)arg3;
- (void)dumpValue:(id)arg1 forKey:(id)arg2 to:(id)arg3;
- (void)dumpXattrsForDomains:(id)arg1 dumper:(id)arg2;
- (void)enableAllDomainsIfNoUserElection;
- (id)extensionStorageURLs;
- (id)identifier;
- (void)importDomainsFromDiskAndUpdatePList:(bool)arg1;
- (id)initWithDescriptor:(id)arg1 server:(id)arg2;
- (void)invalidateWithReason:(id)arg1;
- (bool)invalidated;
- (bool)isAppExtensionReachable;
- (bool)isEqual:(id)arg1;
- (id)manager;
- (id)newDomainFromNSDomain:(id)arg1;
- (id)nsDomainsByID;
- (id)presentersQueue;
- (id)providedItemsURLs;
- (id)providerDomainForDomain:(id)arg1;
- (id)providerPlistURL;
- (id)purposeIdentifier;
- (id)queue;
- (id)relevantDomainsByID;
- (void)reloadDomain:(id)arg1 unableToStartup:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)removeAllDomainsForRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removeDomain:(id)arg1 mode:(unsigned long long)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)requestedExtendedAttributes;
- (id)server;
- (void)setBlockedProcessNames:(id)arg1;
- (void)setDomainUserInfo:(id)arg1 forDomainIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setEjectable:(bool)arg1 forDomainIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setEnabled:(bool)arg1 forDomainIdentifier:(id)arg2 request:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)setRequestedExtendedAttributes:(id)arg1;
- (bool)shouldHideDomainDisplayName;
- (void)startWithCompletion:(id /* block */)arg1;
- (id)supportURL;
- (bool)supportsEnumeration;
- (bool)supportsFPFS;
- (bool)testingProvider;
- (void)writeDomainProperties;

@end
