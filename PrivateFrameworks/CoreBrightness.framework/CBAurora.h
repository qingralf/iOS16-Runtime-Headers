/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness
 */

@interface CBAurora : NSObject {
    bool  _aodIsOn;
    float  _apceSamplingRate;
    NSObject<OS_dispatch_source> * _apceTimer;
    bool  _autoBrightnessIsEnabled;
    float  _cltmCap;
    struct { 
        float cltmCap; 
        float upoCap; 
        float activationThreshold; 
        float entryDelta; 
    }  _cpms;
    float  _currentEDRHeadroom;
    float  _currentEDRHeadroomRequest;
    float  _currentEnergyConsumption;
    float  _currentNits;
    float  _currentScaler;
    struct __Display { } * _display;
    bool  _displayIsOn;
    CBDisplayModuleiOS * _displayModule;
    bool  _edrHeadroomRestorePending;
    struct { 
        bool firstEvaluation; 
        bool auroraStateSatisfied; 
        bool displayStateSatisfied; 
        bool luxSatisfied; 
        bool autoBrightnessSatisfied; 
        bool lowPowerModeSatisfied; 
        bool gracePeriodSatisfied; 
        bool aodStateSatisfied; 
        bool cltmSatisfied; 
        bool upoSatisfied; 
    }  _entryConditions;
    CBFrameStats * _frameStats;
    struct { 
        bool active; 
        float start; 
        float length; 
    }  _gracePeriod;
    bool  _isEnabled;
    bool  _isMonitoring;
    float  _lastFrameInfoReceivedTimestamp;
    float  _lastRampTargetScaler;
    NSObject<OS_os_log> * _log;
    bool  _lowPowerModeIsEnabled;
    float  _lux;
    float  _luxActivationThreshold;
    float  _luxExitThreshold;
    float  _luxSaturationThreshold;
    float  _maximumEnergyConsumption;
    float  _maximumScaler;
    float  _minimumReactionNitsDelta;
    float  _minimumScaler;
    float  _nitsMaximum;
    float  _nitsMinimum;
    NSObject<OS_dispatch_queue> * _queue;
    float  _rampDownTapPointAPCEMaximum;
    float  _rampDownTapPointAPCEMinimum;
    bool  _rampInProgress;
    float  _rampTimeSecondsPerStop;
    float  _rampUpTapPointAPCEMaximum;
    float  _rampUpTapPointAPCEMinimum;
    struct { 
        float targetMargin; 
        bool rampInProgress; 
        float targetScaler; 
    }  _rtplc;
    float  _upoCap;
}

@property (setter=setAODIsOn:, nonatomic) bool aodIsOn;
@property (nonatomic) bool autoBrightnessIsEnabled;
@property (setter=setCLTMCap:, nonatomic) float cltmCap;
@property float currentEDRHeadroom;
@property (nonatomic) float currentEDRHeadroomRequest;
@property float currentNits;
@property (readonly) float currentPreAuroraNits;
@property (nonatomic) float currentScaler;
@property (nonatomic) bool displayIsOn;
@property (readonly) bool isActive;
@property (readonly) bool isBoostingBrightness;
@property (nonatomic) bool isEnabled;
@property (nonatomic) bool lowPowerModeIsEnabled;
@property (nonatomic) float lux;
@property bool rampInProgress;
@property (setter=setUPOCap:, nonatomic) float upoCap;

- (bool)aodIsOn;
- (bool)autoBrightnessIsEnabled;
- (float)calculateCurrentLuxTargetScaler;
- (float)calculateCurrentRampDownTargetForAPCE:(float)arg1;
- (float)calculateCurrentRampUpTargetForAPCE:(float)arg1;
- (float)calculateEnergyConsumptionCap;
- (float)calculateLuxTargetScaler:(float)arg1;
- (float)calculateNumberOfStopsForCurrentScaler:(float)arg1 andRequestedScaler:(float)arg2;
- (float)calculateRampDownTargetForNits:(float)arg1 andAPCE:(float)arg2;
- (float)calculateRampTargetForNits:(float)arg1 andAPCE:(float)arg2 withTapPointAPCEMinimum:(float)arg3 andTapPointAPCEMaximum:(float)arg4;
- (float)calculateRampTargetScalerForNits:(float)arg1;
- (float)calculateRampTimeForCurrentScaler:(float)arg1 andRequestedScaler:(float)arg2;
- (float)calculateRampUpTargetForNits:(float)arg1 andAPCE:(float)arg2;
- (float)clampScaler:(float)arg1;
- (float)cltmCap;
- (float)convertScalerToNits:(float)arg1;
- (float)currentEDRHeadroom;
- (float)currentEDRHeadroomRequest;
- (float)currentNits;
- (float)currentPreAuroraNits;
- (float)currentScaler;
- (void)dealloc;
- (bool)displayIsOn;
- (bool)energyConsumptionExceeded;
- (void)enter;
- (bool)entryConditionsSatisfied;
- (void)evaluateEntryConditions;
- (void)exit;
- (id)initWithQueue:(id)arg1 andDisplay:(struct __Display { }*)arg2 andDisplayModule:(id)arg3;
- (void)initializeMembers;
- (bool)isActive;
- (bool)isBoostingBrightness;
- (bool)isEnabled;
- (bool)lowPowerModeIsEnabled;
- (float)lux;
- (void)processAPCESample;
- (bool)rampInProgress;
- (void)rampTo:(float)arg1;
- (void)restoreEDRHeadroom;
- (void)sendEDRHeadroomRequest:(float)arg1;
- (void)setAODIsOn:(bool)arg1;
- (void)setAutoBrightnessIsEnabled:(bool)arg1;
- (void)setCLTMCap:(float)arg1;
- (void)setCPMSActivationThreshold:(float)arg1;
- (void)setCurrentEDRHeadroom:(float)arg1;
- (void)setCurrentEDRHeadroomRequest:(float)arg1;
- (void)setCurrentNits:(float)arg1;
- (void)setCurrentScaler:(float)arg1;
- (void)setDisplayIsOn:(bool)arg1;
- (void)setIsEnabled:(bool)arg1;
- (void)setLowPowerModeIsEnabled:(bool)arg1;
- (void)setLux:(float)arg1;
- (void)setPropertyForKey:(id)arg1 withValue:(id)arg2;
- (void)setRampInProgress:(bool)arg1;
- (void)setRampTimeSecondsPerStop:(float)arg1;
- (void)setUPOCap:(float)arg1;
- (void)startMonitoring;
- (void)stopMonitoring;
- (float)upoCap;

@end
