/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVFCore.framework/AVFCore
 */

@interface AVPlayerInternal : NSObject {
    void * IAPDCallbackToken;
    bool  IOwnTheFigPlayer;
    <AVBlockScheduler> * KVOChangeSerializer;
    bool  PIPModePossible;
    NSString * STSLabel;
    long long  actionAtItemEnd;
    bool  airPlayVideoActive;
    bool  allowsExternalPlayback;
    bool  allowsLegibleFallbackForAllAudibleMediaSelections;
    bool  allowsOutOfBandTextTrackRendering;
    bool  allowsPixelBufferPoolSharing;
    NSString * ancillaryPerformanceInformationForDisplay;
    bool  appliesMediaSelectionCriteriaAutomatically;
    NSString * audioOutputDeviceUniqueID;
    AVAudioSession * audioSession;
    AVAudioSessionMediaPlayerOnly * audioSessionMediaPlayerOnly;
    long long  audiovisualBackgroundPlaybackPolicy;
    bool  autoSwitchStreamVariants;
    NSHashTable * avPlayerLayers;
    NSString * backgroundPIPAuthorizationToken;
    AVPlayerMediaSelectionCriteria * cachedFigLegibleFallbackMediaSelectionCriteriaProperty;
    NSDictionary * cachedFigMediaSelectionCriteriaProperty;
    NSString * captionPipelineStrategy;
    NSString * captionRenderingStrategy;
    NSString * clientName;
    long long  clientPriority;
    bool  clientRequestedPlaybackCoordinator;
    bool  closedCaptionDisplayEnabled;
    NSMutableArray * closedCaptionLayers;
    NSObject<OS_dispatch_queue> * configurationQueue;
    AVPlayerItem * currentItem;
    bool  currentItemNonForcedSubtitlesEnabled;
    id  currentItemPreferredPixelBufferAttributesNotificationToken;
    struct CGSize { 
        double width; 
        double height; 
    }  currentItemPresentationSize;
    NSObject<OS_dispatch_queue> * currentItemPropertyUpdateQueue;
    id  currentItemSuppressesVideoLayersNotificationToken;
    float  defaultRate;
    id  didEnterBackgroundNotificationToken;
    id  didFinishSuspensionNotificationToken;
    struct CGSize { 
        double width; 
        double height; 
    }  dimensionsOfReservedVideoMemory;
    bool  disallowsAMRAudio;
    bool  disallowsAutoPauseOnRouteRemovalIfNoAudio;
    bool  disallowsHardwareAcceleratedVideoDecoder;
    bool  disallowsVideoLayerDisplayCompositing;
    NSArray * displaysUsedForPlayback;
    bool  dynamicallyChoosesInitialVariant;
    bool  ensuresActiveAudioSessionWhenStartingPlayback;
    NSError * error;
    NSArray * expectedAssetTypes;
    bool  externalPlaybackActive;
    NSString * externalPlaybackVideoGravity;
    long long  externalProtectionStatus;
    NSObject<OS_dispatch_queue> * figConfigurationQueue;
    struct OpaqueFigPlaybackItem { } * figPlaybackItemToIdentifyNextCurrentItem;
    struct OpaqueFigPlayer { } * figPlayer;
    struct OpaqueCMClock { } * figSourceClock;
    bool  fullyInitializedAndNotDeallocating;
    bool  hadAssociatedOnscreenPlayerLayerWhenSuspended;
    NSMutableArray * handlersToCallWhenReadyToPlay;
    bool  hostApplicationInForeground;
    struct OpaqueFigPlayerInterstitialCoordinator { } * interstitialEventCoordinator;
    AVQueuePlayer * interstitialPlayer;
    bool  isConnectedToPhysicalSecondScreen;
    bool  isDisplayingClosedCaptions;
    bool  isInterstitialPlayer;
    bool  isSilencedDueToConflictWithOtherPlayback;
    NSMutableSet * items;
    NSArray * itemsInFigPlayQueue;
    NSObject<OS_dispatch_queue> * ivarAccessQueue;
    AVPlayerItem * lastItem;
    bool  layerDestinationIsTVOut;
    id  layerForegroundingChangeToken;
    NSObject<OS_dispatch_queue> * layerInteractionQueue;
    NSObject<OS_dispatch_queue> * layersQ;
    bool  limitsBandwidthForCellularAccess;
    bool  logPerformanceData;
    <AVLoggingIdentifier> * loggingIdentifier;
    float  maxRateForAudioPlayback;
    float  minRateForAudioPlayback;
    NSString * multichannelAudioStrategy;
    bool  muted;
    NSNumber * mxSessionID;
    bool  needsToCreateFigPlayer;
    int  nextPrerollIDToGenerate;
    AVOutputContext * outputContext;
    bool  outputObscuredDueToInsufficientExternalProtection;
    long long  overlappedPlaybackID;
    AVPlayerItem * overlappedPlaybackItem;
    NSMutableDictionary * pendingFigPlayerProperties;
    int  pendingPrerollID;
    AVPixelBufferAttributeMediator * pixelBufferAttributeMediator;
    AVPlayerPlaybackCoordinator * playbackCoordinator;
    NSString * playerRole;
    unsigned long long  preferredVideoDecoderGPURegistryID;
    bool  prefersPlayingSilentlyWhenConflictingWithOtherPlayback;
    bool  preparesItemsForPlaybackAsynchronously;
    id /* block */  prerollCompletionHandler;
    struct OpaqueFigSimpleMutex { } * prerollIDMutex;
    bool  preservesAudioSessionSampleRate;
    bool  preventsAutomaticBackgroundingDuringVideoPlayback;
    bool  preventsDisplaySleepDuringVideoPlayback;
    struct __CFNumber { } * primaryAirPlayID;
    struct OpaqueCMTimebase { } * proxyTimebase;
    NSArray * queueModifications;
    int  rateChangeIdentifier;
    bool  rateDidChangeNotificationIncludesExtendedDiagnosticPayload;
    AVPlayerRateState * rateState;
    bool  rateUpdateDuringTransitionDecided;
    bool  reevaluateBackgroundPlayback;
    long long  resourceConservationLevelWhilePaused;
    bool  shouldReduceResourceUsage;
    bool  shouldWaitForVideoTarget;
    bool  silencesOtherPlaybackDuringPIP;
    NSObject<OS_dispatch_queue> * stateDispatchQueue;
    long long  status;
    NSMutableArray * subtitleLayers;
    bool  suppressesAudioRendering;
    bool  suspensionExpected;
    float  userVolume;
    bool  usesAudioOnlyModeForExternalPlayback;
    bool  usesDedicatedNotificationQueueForMediaServices;
    bool  usesExternalPlaybackWhileExternalScreenIsActive;
    NSDictionary * vibrationPattern;
    NSMutableArray * videoLayers;
    bool  videoLayersAreAttached;
    NSArray * videoTargets;
    float  volume;
    AVWeakReference * weakReference;
    id  willEnterForegroundNotificationToken;
}

- (void).cxx_destruct;

@end
