/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore
 */

@interface PXAssetsSectionLayout : PXGSplitLayout <PXChangeObserver, PXCuratedLibraryRowBasedLayout, PXGDisplayAssetSource, PXGGeneratedLayoutDelegate, PXGItemsLayoutDelegate, PXGShadowSource, PXGViewSource> {
    PXCuratedLibraryActionManager * _actionManager;
    id /* block */  _addContentActionHandler;
    bool  _allowsPositionDependentHeaderContentOpacity;
    PXAssetCollectionReference * _assetCollectionReference;
    PXPhotosGridAssetDecorationSource * _assetDecorationSource;
    NSString * _axLocalizedBaseLabel;
    PXGLayout * _bodyContainerLayout;
    PXGLayout * _bodyContentLayout;
    PXGBurstStackEffect * _burstStackEffect;
    <PXDisplayAssetFetchResult> * _cachedClampedFetchResult;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _cachedClampedItemRange;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSelectAllButtonConfigurationSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedShowAllButtonConfigurationSize;
    bool  _canStartSelecting;
    PXAssetsSectionConfigurator * _configurator;
    long long  _currentSkimmingIndex;
    PXAssetsDataSource * _dataSource;
    <PXAssetSectionLayoutDelegate> * _delegate;
    double  _distanceBetweenHeaderTopAndNextBodyTop;
    double  _distanceBetweenTitleTopAndBodyBottom;
    PXAssetReference * _dropTargetAssetReference;
    PXGLayout * _headerLayout;
    PXGLayoutGuide * _headerLayoutGuide;
    double  _intersectionSpacing;
    bool  _isLastSection;
    bool  _isSelecting;
    bool  _isSkimming;
    bool  _isUpdatingLocalSprites;
    bool  _itemCaptionsVisible;
    PXLoadingStatusManager * _loadingStatusManager;
    long long  _maxSkimmingIndex;
    long long  _numberOfPrecedingAssets;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _postUpdateFlags;
    struct PXSimpleIndexPath { 
        long long dataSourceIdentifier; 
        long long section; 
        long long item; 
        long long subitem; 
    }  _presentedSectionIndexPath;
    bool  _presentedSkimming;
    bool  _removesContentLayoutWhenEmpty;
    bool  _removesHeaderLayoutWhenEmpty;
    long long  _section;
    unsigned int  _sectionBoundariesSpriteIndex;
    PXCuratedLibrarySectionHeaderLayout * _sectionHeaderLayout;
    unsigned int  _sectionShadowSpriteIndex;
    PXCuratedLibraryActionPerformer * _selectAllActionPerformer;
    PXCuratedLibraryOverlayButtonConfiguration * _selectAllButtonConfiguration;
    bool  _selectAllButtonConfigurationIsValid;
    unsigned int  _selectAllButtonSpriteIndex;
    NSString * _selectAllButtonTitle;
    unsigned short  _selectAllButtonVersion;
    PXCuratedLibraryShowAllActionPerformer * _showAllActionPerformer;
    PXCuratedLibraryOverlayButtonConfiguration * _showAllButtonConfiguration;
    bool  _showAllButtonConfigurationIsValid;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _showAllButtonFrame;
    unsigned int  _showAllButtonSpriteIndex;
    unsigned short  _showAllButtonVersion;
    bool  _showsSkimmingInteraction;
    bool  _showsSkimmingSlideshow;
    PXIndexPathSet * _skimmingIndexPaths;
    PXAssetsSectionLayoutSpec * _spec;
    <PXTapbackStatusManager> * _tapbackStatusManager;
    long long  _targetZoomLevel;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
        bool willPerformUpdate; 
    }  _updateFlags;
    bool  _wantsDimmedSelectionStyle;
    bool  _wantsFileSizeBadge;
    bool  _wantsNumberedSelectionStyle;
    bool  _wantsShadow;
    long long  _zoomLevel;
}

@property (nonatomic, readonly) PXCuratedLibraryActionManager *actionManager;
@property (nonatomic, copy) id /* block */ addContentActionHandler;
@property (nonatomic) bool allowsPositionDependentHeaderContentOpacity;
@property (nonatomic, readonly) <PXDisplayAssetCollection> *assetCollection;
@property (nonatomic, readonly) PXAssetCollectionReference *assetCollectionReference;
@property (nonatomic, readonly) PXPhotosGridAssetDecorationSource *assetDecorationSource;
@property (nonatomic, retain) NSString *axLocalizedBaseLabel;
@property (nonatomic, retain) PXGLayout *bodyContainerLayout;
@property (nonatomic, readonly) PXGLayout *bodyContentLayout;
@property (nonatomic, readonly) <PXGItemsGeometry> *bodyItemsGeometry;
@property (nonatomic, readonly) double buildingRowContentHeight;
@property (nonatomic, readonly) double buildingRowSpacing;
@property (nonatomic, readonly) PXGBurstStackEffect *burstStackEffect;
@property (nonatomic) bool canStartSelecting;
@property (nonatomic, retain) PXAssetsSectionConfigurator *configurator;
@property (nonatomic) long long currentSkimmingIndex;
@property (nonatomic, readonly) PXAssetsDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXAssetSectionLayoutDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double distanceBetweenHeaderTopAndNextBodyTop;
@property (nonatomic) double distanceBetweenTitleTopAndBodyBottom;
@property (nonatomic, copy) NSSet *draggedAssetReferences;
@property (nonatomic, retain) PXAssetReference *dropTargetAssetReference;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PXGLayout *headerLayout;
@property (nonatomic, retain) PXGLayoutGuide *headerLayoutGuide;
@property (nonatomic) double intersectionSpacing;
@property (nonatomic, readonly) bool isCurated;
@property (nonatomic) bool isSelecting;
@property (nonatomic) bool isSkimming;
@property (nonatomic) bool itemCaptionsVisible;
@property (nonatomic, readonly) <PXDisplayAssetFetchResult> *keyAssetsFetchResult;
@property (nonatomic, readonly) long long keyItemIndex;
@property (nonatomic, readonly) PXLoadingStatusManager *loadingStatusManager;
@property (nonatomic) long long maxSkimmingIndex;
@property (nonatomic, readonly) long long numberOfAssets;
@property (nonatomic) long long numberOfPrecedingAssets;
@property (nonatomic, readonly) struct PXSimpleIndexPath { long long x1; long long x2; long long x3; long long x4; } presentedSectionIndexPath;
@property (nonatomic, readonly) bool presentedSkimming;
@property (nonatomic) bool removesContentLayoutWhenEmpty;
@property (nonatomic) bool removesHeaderLayoutWhenEmpty;
@property (nonatomic, readonly) long long section;
@property (nonatomic, readonly) struct PXSimpleIndexPath { long long x1; long long x2; long long x3; long long x4; } sectionIndexPath;
@property (nonatomic, retain) PXCuratedLibraryActionPerformer *selectAllActionPerformer;
@property (nonatomic, readonly) PXCuratedLibraryOverlayButtonConfiguration *selectAllButtonConfiguration;
@property (nonatomic, retain) NSString *selectAllButtonTitle;
@property (nonatomic, retain) PXSelectionSnapshot *selectionSnapshot;
@property (nonatomic, retain) PXCuratedLibraryShowAllActionPerformer *showAllActionPerformer;
@property (nonatomic, readonly) PXCuratedLibraryOverlayButtonConfiguration *showAllButtonConfiguration;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } showAllButtonFrame;
@property (nonatomic) bool showsSkimmingInteraction;
@property (nonatomic) bool showsSkimmingSlideshow;
@property (nonatomic, retain) PXIndexPathSet *skimmingIndexPaths;
@property (nonatomic, retain) PXAssetsSectionLayoutSpec *spec;
@property (readonly) Class superclass;
@property (nonatomic, retain) <PXTapbackStatusManager> *tapbackStatusManager;
@property (nonatomic) long long targetZoomLevel;
@property (nonatomic) bool wantsDimmedSelectionStyle;
@property (nonatomic) bool wantsFileSizeBadge;
@property (nonatomic) bool wantsNumberedSelectionStyle;
@property (nonatomic) bool wantsShadow;
@property (nonatomic) long long zoomLevel;

+ (struct CGSize { double x1; double x2; })estimatedSizeWithReferenceSize:(struct CGSize { double x1; double x2; })arg1 assetCollection:(id)arg2 numberOfAssets:(long long)arg3 isCurated:(bool)arg4 zoomLevel:(long long)arg5 spec:(id)arg6;

- (void).cxx_destruct;
- (id)_assetReferenceClosestVisuallyToAssetReference:(id)arg1;
- (void)_callAddContentActionHandler;
- (struct PXSimpleIndexPath { long long x1; long long x2; long long x3; long long x4; })_dataSourceIndexPathForObjectReference:(id)arg1 options:(unsigned long long)arg2 updatedObjectReference:(out id*)arg3;
- (id)_displayAssetForBodyItem:(long long)arg1;
- (void)_invalidateAssetsWithCoveredBottomTrailingCorner;
- (void)_invalidateConfigurator;
- (void)_invalidateContent;
- (void)_invalidateSelectAllButton;
- (void)_invalidateSelectAllButtonPosition;
- (void)_invalidateShowAllButton;
- (void)_invalidateShowAllButtonPosition;
- (id)_rowBasedBodyContentLayout;
- (bool)_shouldAnchorOnAssetCollection;
- (void)_updateAssetsWithCoveredBottomTrailingCorner;
- (void)_updateConfigurator;
- (void)_updateContent;
- (void)_updateDecorationSource;
- (void)_updateDistanceProperties;
- (void)_updateLocalSprites;
- (void)_updateSectionHeaderProperties;
- (void)_updateSelectAllButtonPosition;
- (void)_updateShowAllButtonPosition;
- (id)actionManager;
- (id /* block */)addContentActionHandler;
- (bool)allowsDanglingUpdatesAssertions;
- (bool)allowsPositionDependentHeaderContentOpacity;
- (id)assetCollection;
- (id)assetCollectionReference;
- (id)assetDecorationSource;
- (void)axGroup:(id)arg1 didChange:(unsigned long long)arg2 userInfo:(id)arg3;
- (bool)axGroup:(id)arg1 didRequestToPerformAction:(long long)arg2 userInfo:(id)arg3;
- (id)axLocalizedBaseLabel;
- (id)axLocalizedLabel;
- (id)axSpriteIndexes;
- (id)bodyContainerLayout;
- (id)bodyContentLayout;
- (id)bodyItemsGeometry;
- (double)buildingRowContentHeight;
- (double)buildingRowSpacing;
- (id)burstStackEffect;
- (bool)canStartSelecting;
- (id)configurator;
- (void)contentSizeDidChange;
- (double)cornerRadiusForShadowSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (long long)currentSkimmingIndex;
- (id)dataSource;
- (id /* block */)dateIntervalFutureForContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 type:(unsigned long long)arg2;
- (id)delegate;
- (id)description;
- (unsigned long long)desiredPlaceholderStyleInLayout:(id)arg1;
- (id)displayAssetFetchResultForSpritesInRange:(struct _PXGSpriteIndexRange { unsigned int x1; unsigned int x2; })arg1 inLayout:(id)arg2;
- (id)displayAssetRequestObserverForSpritesInRange:(struct _PXGSpriteIndexRange { unsigned int x1; unsigned int x2; })arg1 inLayout:(id)arg2;
- (double)distanceBetweenHeaderTopAndNextBodyTop;
- (double)distanceBetweenTitleTopAndBodyBottom;
- (id)draggedAssetReferences;
- (id)dropTargetAssetReference;
- (void)enumerateRowsWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateVisibleAnchoringLayoutsUsingBlock:(id /* block */)arg1;
- (void)enumerateVisibleAnchoringSpriteIndexesUsingBlock:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })generatedLayout:(id)arg1 bestCropRectForInputItemAtIndex:(unsigned int)arg2 withAspectRatio:(double)arg3;
- (id)generatedLayout:(id)arg1 inputItemAtIndex:(unsigned int)arg2;
- (id)generatedLayout:(id)arg1 objectReferenceAtIndex:(unsigned int)arg2;
- (id)headerLayout;
- (id)headerLayoutGuide;
- (id)hitTestResultForSpriteIndex:(unsigned int)arg1;
- (id)init;
- (id)initWithSection:(long long)arg1 dataSource:(id)arg2 actionManager:(id)arg3 loadingStatusManager:(id)arg4 zoomLevel:(long long)arg5 spec:(id)arg6;
- (id)initWithSection:(long long)arg1 dataSource:(id)arg2 spec:(id)arg3;
- (double)intersectionSpacing;
- (bool)isCurated;
- (bool)isSelecting;
- (bool)isSkimming;
- (bool)itemCaptionsVisible;
- (double)itemsLayout:(id)arg1 aspectRatioForItem:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })itemsLayout:(id)arg1 bestCropRectForItem:(long long)arg2 withAspectRatio:(double)arg3;
- (struct { union { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_1_1_1; float x_1_1_2[4]; } x1; })itemsLayout:(id)arg1 cornerRadiusForItem:(long long)arg2;
- (unsigned int)itemsLayout:(id)arg1 effectIdForItem:(long long)arg2;
- (struct CGSize { double x1; double x2; })itemsLayout:(id)arg1 insetForItem:(long long)arg2;
- (long long)itemsLayout:(id)arg1 itemForObjectReference:(id)arg2 options:(unsigned long long)arg3;
- (id)itemsLayout:(id)arg1 objectReferenceForItem:(long long)arg2;
- (void)itemsLayout:(id)arg1 updateTagsInSpriteInfos:(struct { int x1; int x2; float x3; long long x4; unsigned short x5; unsigned char x6; }*)arg2 forItemsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)keyAssetsFetchResult;
- (long long)keyItemIndex;
- (id)layoutForItemChanges;
- (id)loadingStatusManager;
- (id /* block */)locationNamesFutureForContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)maxSkimmingIndex;
- (struct CGSize { double x1; double x2; })minSpriteSizeForPresentationStyle:(unsigned long long)arg1;
- (long long)numberOfAssets;
- (long long)numberOfPrecedingAssets;
- (id)objectReferenceForSpriteIndex:(unsigned int)arg1;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (struct PXSimpleIndexPath { long long x1; long long x2; long long x3; long long x4; })presentedSectionIndexPath;
- (bool)presentedSkimming;
- (bool)removesContentLayoutWhenEmpty;
- (bool)removesHeaderLayoutWhenEmpty;
- (void)screenScaleDidChange;
- (long long)section;
- (struct PXSimpleIndexPath { long long x1; long long x2; long long x3; long long x4; })sectionIndexPath;
- (id)selectAllActionPerformer;
- (id)selectAllButtonConfiguration;
- (id)selectAllButtonTitle;
- (id)selectionSnapshot;
- (void)setAddContentActionHandler:(id /* block */)arg1;
- (void)setAllowsPositionDependentHeaderContentOpacity:(bool)arg1;
- (void)setAxLocalizedBaseLabel:(id)arg1;
- (void)setBodyContainerLayout:(id)arg1;
- (void)setBodyContentLayout:(id)arg1 wantsDecoration:(bool)arg2;
- (void)setCanStartSelecting:(bool)arg1;
- (void)setConfigurator:(id)arg1;
- (void)setCurrentSkimmingIndex:(long long)arg1;
- (void)setDataSource:(id)arg1 section:(long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDistanceBetweenHeaderTopAndNextBodyTop:(double)arg1;
- (void)setDistanceBetweenTitleTopAndBodyBottom:(double)arg1;
- (void)setDraggedAssetReferences:(id)arg1;
- (void)setDropTargetAssetReference:(id)arg1;
- (void)setHeaderLayout:(id)arg1;
- (void)setHeaderLayoutGuide:(id)arg1;
- (void)setIntersectionSpacing:(double)arg1;
- (void)setIsSelecting:(bool)arg1;
- (void)setIsSkimming:(bool)arg1;
- (void)setItemCaptionsVisible:(bool)arg1;
- (void)setMaxSkimmingIndex:(long long)arg1;
- (void)setNumberOfPrecedingAssets:(long long)arg1;
- (void)setRemovesContentLayoutWhenEmpty:(bool)arg1;
- (void)setRemovesHeaderLayoutWhenEmpty:(bool)arg1;
- (void)setSelectAllActionPerformer:(id)arg1;
- (void)setSelectAllButtonTitle:(id)arg1;
- (void)setSelectionSnapshot:(id)arg1;
- (void)setShowAllActionPerformer:(id)arg1;
- (void)setShowAllButtonFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setShowsSkimmingInteraction:(bool)arg1;
- (void)setShowsSkimmingSlideshow:(bool)arg1;
- (void)setSkimmingIndexPaths:(id)arg1;
- (void)setSpec:(id)arg1;
- (void)setTapbackStatusManager:(id)arg1;
- (void)setTargetZoomLevel:(long long)arg1;
- (void)setWantsDimmedSelectionStyle:(bool)arg1;
- (void)setWantsFileSizeBadge:(bool)arg1;
- (void)setWantsNumberedSelectionStyle:(bool)arg1;
- (void)setWantsShadow:(bool)arg1;
- (void)setZoomLevel:(long long)arg1;
- (id)shadowForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)showAllActionPerformer;
- (id)showAllButtonConfiguration;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })showAllButtonFrame;
- (bool)showsSkimmingInteraction;
- (bool)showsSkimmingSlideshow;
- (id)skimmingIndexPaths;
- (id)spec;
- (unsigned int)spriteIndexForObjectReference:(id)arg1 options:(unsigned long long)arg2 updatedObjectReference:(out id*)arg3;
- (long long)sublayoutIndexForObjectReference:(id)arg1 options:(unsigned long long)arg2 updatedObjectReference:(out id*)arg3;
- (unsigned long long)supportedDisplayAssetPresentationStylesInLayout:(id)arg1;
- (id)tapbackStatusManager;
- (long long)targetZoomLevel;
- (void)update;
- (Class)viewClassForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (id)viewUserDataForSpriteAtIndex:(unsigned int)arg1 inLayout:(id)arg2;
- (void)visibleRectDidChange;
- (bool)wantsDimmedSelectionStyle;
- (bool)wantsFileSizeBadge;
- (bool)wantsNumberedSelectionStyle;
- (bool)wantsShadow;
- (long long)zoomLevel;

@end
