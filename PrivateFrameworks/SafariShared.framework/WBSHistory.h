/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SafariShared.framework/SafariShared
 */

@interface WBSHistory : NSObject <WBSHistoricalHighLevelDomainsProvider, WBSHistoryStoreDelegate> {
    NSMutableDictionary * _entriesByURLString;
    NSObject<OS_dispatch_queue> * _entriesByURLStringAccessQueue;
    bool  _hasStartedLoadingHistory;
    double  _historyAgeLimit;
    <WBSHistoryStore> * _historyStore;
    WBSHistoryTagMap * _historyTagMap;
    NSCountedSet * _stringsForUserTypedDomainExpansion;
    NSObject<OS_dispatch_queue> * _waitUntilHistoryHasLoadedQueue;
}

@property (readonly) NSArray *allItems;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasAnyHistoryItems;
@property (readonly) unsigned long long hash;
@property (nonatomic) double historyAgeLimit;
@property (nonatomic, readonly) WBSHistoryTagMap *historyTagMap;
@property (nonatomic, readonly) unsigned long long numberOfHistoryItems;
@property (nonatomic, readonly) unsigned long long numberOfHistoryItemsOnHistoryQueue;
@property (readonly) Class superclass;

+ (void)clearExistingSharedHistory;
+ (id)existingSharedHistory;
+ (id)historyDatabaseURL;
+ (id)historyDatabaseWriteAheadLogURL;
+ (id)historyPropertyListURL;

- (void).cxx_destruct;
- (void)_addItem:(id)arg1 addToStringsForUserTypedDomainExpansions:(bool)arg2;
- (void)_addItemToStringsForUserTypedDomainExpansion:(id)arg1;
- (void)_addVisitedLinksForItemsIfNeeded:(id)arg1;
- (id)_createHistoryStore;
- (void)_dispatchHistoryCleared:(id)arg1;
- (void)_dispatchHistoryItemDidChange:(id)arg1 byUserInitiatedAction:(bool)arg2;
- (void)_dispatchHistoryItemWillChange:(id)arg1;
- (void)_dispatchHistoryItemsAdded:(id)arg1 byUserInitiatedAction:(bool)arg2;
- (void)_dispatchHistoryItemsLoaded:(id)arg1;
- (void)_dispatchHistoryItemsRemoved:(id)arg1;
- (void)_dispatchHistoryItemsRemovedDuringLoading:(id)arg1;
- (void)_dispatchHistoryLoaded;
- (void)_dispatchHistoryVisitAdded:(id)arg1;
- (Class)_historyItemClass;
- (bool)_isStringForUserTypedDomainExpansionInHistory:(id)arg1;
- (void)_loadHistory;
- (void)_loadHistoryAsynchronouslyIfNeeded;
- (void)_removeAllVisitedLinks;
- (void)_removeHistoryItemsInResponseToUserAction:(id)arg1;
- (id)_removeItemForURLString:(id)arg1;
- (void)_removeItemFromStringsForUserTypedDomainExpansion:(id)arg1;
- (void)_removeItemsInResponseToUserAction:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_sendNotification:(id)arg1 withItems:(id)arg2;
- (void)_setAttributes:(unsigned long long)arg1 forVisit:(id)arg2;
- (void)_startLoading;
- (void)_unload;
- (void)_waitUntilHistoryHasLoadedMainThread;
- (void)addAttributes:(unsigned long long)arg1 toVisit:(id)arg2;
- (void)addAutocompleteTrigger:(id)arg1 forURLString:(id)arg2;
- (void)addTagWithIdentifier:(id)arg1 title:(id)arg2 toItemAtURL:(id)arg3 level:(long long)arg4 completionHandler:(id /* block */)arg5;
- (id)allItems;
- (bool)canRecordRedirectFromVisit:(id)arg1 to:(id)arg2;
- (void)checkIfLocalVisitExistsInAnyOfItems:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)clearHistory;
- (void)clearHistoryVisitsAddedAfterDate:(id)arg1 beforeDate:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)clearHistoryWithCompletionHandler:(id /* block */)arg1;
- (void)close;
- (void)closeWithCompletionHandler:(id /* block */)arg1;
- (void)computeFrequentlyVisitedSites:(unsigned long long)arg1 minimalVisitCountScore:(unsigned long long)arg2 disallowList:(id)arg3 allowList:(id)arg4 options:(unsigned long long)arg5 currentTime:(double)arg6 completionHandler:(id /* block */)arg7;
- (void)enumerateItemsAsynchronouslyUsingBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)enumerateItemsUsingBlock:(id /* block */)arg1;
- (void)fetchHistoricalHighLevelDomainsWithCompletionHandler:(id /* block */)arg1;
- (void)fetchTopicsFromStartDate:(id)arg1 toEndDate:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)fetchTopicsFromStartDate:(id)arg1 toEndDate:(id)arg2 limit:(unsigned long long)arg3 minimumItemCount:(unsigned long long)arg4 sortOrder:(long long)arg5 completionHandler:(id /* block */)arg6;
- (void)getAllTombstonesWithCompletion:(id /* block */)arg1;
- (void)getAutocompleteTriggersForURLString:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getHighLevelHTTPFamilyDomainsVisitedAfterDate:(id)arg1 beforeDate:(id)arg2 onlyFromThisDevice:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)getItemCountBeforeDate:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getVisitsCreatedAfterDate:(id)arg1 beforeDate:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)hasAnyHistoryItems;
- (double)historyAgeLimit;
- (void)historyLoader:(id)arg1 didLoadItems:(id)arg2 discardedItems:(id)arg3 stringsForUserTypeDomainExpansion:(id)arg4;
- (void)historyLoaderDidFinishLoading:(id)arg1;
- (void)historyStore:(id)arg1 didAddVisits:(id)arg2;
- (void)historyStore:(id)arg1 didPrepareToDeleteWithDeletionPlan:(id)arg2;
- (void)historyStore:(id)arg1 didRemoveHighLevelDomains:(id)arg2;
- (void)historyStore:(id)arg1 didRemoveHostnames:(id)arg2;
- (void)historyStore:(id)arg1 didRemoveItems:(id)arg2;
- (void)historyStore:(id)arg1 didRemoveVisits:(id)arg2;
- (void)historyStoreDidFailDatabaseIntegrityCheck:(id)arg1;
- (bool)historyStoreShouldCheckDatabaseIntegrity:(id)arg1;
- (void)historyStoreWasCleared:(id)arg1;
- (id)historyTagMap;
- (id)init;
- (void)initializeCloudHistoryWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)itemForURL:(id)arg1;
- (id)itemForURLString:(id)arg1;
- (id)itemForURLString:(id)arg1 createIfNeeded:(bool)arg2;
- (id)itemRedirectedFrom:(id)arg1 to:(id)arg2 origin:(long long)arg3 date:(id)arg4;
- (id)itemRedirectedFrom:(id)arg1 to:(id)arg2 origin:(long long)arg3 date:(id)arg4 statusCode:(long long)arg5;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 timeOfVisit:(double)arg3 wasHTTPNonGet:(bool)arg4 wasFailure:(bool)arg5 increaseVisitCount:(bool)arg6 origin:(long long)arg7;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 timeOfVisit:(double)arg3 wasHTTPNonGet:(bool)arg4 wasFailure:(bool)arg5 increaseVisitCount:(bool)arg6 origin:(long long)arg7 attributes:(unsigned long long)arg8;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 timeOfVisit:(double)arg3 wasHTTPNonGet:(bool)arg4 wasFailure:(bool)arg5 increaseVisitCount:(bool)arg6 statusCode:(long long)arg7 origin:(long long)arg8;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 timeOfVisit:(double)arg3 wasHTTPNonGet:(bool)arg4 wasFailure:(bool)arg5 increaseVisitCount:(bool)arg6 statusCode:(long long)arg7 origin:(long long)arg8 attributes:(unsigned long long)arg9;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 wasHTTPNonGet:(bool)arg3 wasFailure:(bool)arg4 increaseVisitCount:(bool)arg5;
- (id)itemVisitedAtURLString:(id)arg1 title:(id)arg2 wasHTTPNonGet:(bool)arg3 wasFailure:(bool)arg4 increaseVisitCount:(bool)arg5 statusCode:(long long)arg6;
- (id)lastSeenDateForCloudClientVersion:(unsigned long long)arg1;
- (id)lastVisitForHighLevelDomain:(id)arg1;
- (unsigned long long)numberOfHistoryItems;
- (unsigned long long)numberOfHistoryItemsOnHistoryQueue;
- (void)performBlockAfterHistoryHasLoaded:(id /* block */)arg1;
- (void)performMaintenance;
- (void)performMaintenance:(id /* block */)arg1;
- (void)pruneTombstonesWithEndDatePriorToDate:(id)arg1;
- (void)releaseCloudHistory:(id /* block */)arg1;
- (void)removeAttributes:(unsigned long long)arg1 fromVisit:(id)arg2;
- (void)removeItemsInResponseToUserAction:(id)arg1;
- (void)replayAndAddTombstones:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)savePendingChangesBeforeTerminationWithCompletionHandler:(id /* block */)arg1;
- (void)searchForUserTypedString:(id)arg1 options:(unsigned long long)arg2 currentTime:(double)arg3 enumerationBlock:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (void)setHistoryAgeLimit:(double)arg1;
- (void)setLastSeenDate:(id)arg1 forCloudClientVersion:(unsigned long long)arg2;
- (void)setTitle:(id)arg1 ofTag:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)updateHistoryAfterSuccessfulPersistedLongLivedSaveOperationWithGeneration:(long long)arg1 completion:(id /* block */)arg2;
- (void)updateTitle:(id)arg1 forVisit:(id)arg2;
- (void)vacuumHistoryWithCompletionHandler:(id /* block */)arg1;
- (void)visitIdentifiersMatchingExistingVisits:(id)arg1 populateAssociatedVisits:(bool)arg2 completion:(id /* block */)arg3;
- (void)waitUntilHistoryHasLoaded;

@end
