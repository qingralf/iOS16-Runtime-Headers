/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TrackingAvoidance.framework/TrackingAvoidance
 */

@interface TADeviceRecordSettings : NSObject <NSSecureCoding> {
    long long  _assumedKeyRollHour;
    double  _expiryTimeInterval;
    double  _keepAliveInterval;
    double  _maxExpectedDurianWildInterval;
    double  _maxExpectedHELEWildInterval;
    double  _minimumHELEStagingInterval;
    double  _minimumStagingInterval;
    double  _purgeTimeInterval;
    double  _scanInterval;
    bool  _shouldAlertHELEImmediatelyForImmediateTypes;
    long long  _stagingBackstopHour;
    long long  _stagingHELEBackstopHour;
    bool  _surfaceHELEImmediatelyBetweenBackstopAndKeyroll;
    bool  _surfaceImmediatelyBetweenBackstopAndKeyroll;
}

@property (nonatomic, readonly) long long assumedKeyRollHour;
@property (nonatomic) double expiryTimeInterval;
@property (nonatomic, readonly) double keepAliveInterval;
@property (nonatomic, readonly) double maxExpectedDurianWildInterval;
@property (nonatomic, readonly) double maxExpectedHELEWildInterval;
@property (nonatomic, readonly) double minimumHELEStagingInterval;
@property (nonatomic, readonly) double minimumStagingInterval;
@property (nonatomic) double purgeTimeInterval;
@property (nonatomic, readonly) double scanInterval;
@property (nonatomic, readonly) bool shouldAlertHELEImmediatelyForImmediateTypes;
@property (nonatomic, readonly) long long stagingBackstopHour;
@property (nonatomic, readonly) long long stagingHELEBackstopHour;
@property (nonatomic, readonly) bool surfaceHELEImmediatelyBetweenBackstopAndKeyroll;
@property (nonatomic, readonly) bool surfaceImmediatelyBetweenBackstopAndKeyroll;

+ (bool)supportsSecureCoding;

- (long long)assumedKeyRollHour;
- (void)encodeWithCoder:(id)arg1;
- (double)expiryTimeInterval;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithExpiryTimeInterval:(double)arg1 purgeTimeInterval:(double)arg2 keepAliveInterval:(double)arg3 minimumStagingInterval:(double)arg4 stagingBackstopHour:(unsigned long long)arg5 assumedKeyRollHour:(unsigned long long)arg6 scanInterval:(double)arg7 surfaceImmediatelyBetweenBackstopAndKeyroll:(bool)arg8 maxExpectedHELEWildInterval:(double)arg9 maxExpectedDurianWildInterval:(double)arg10 shouldAlertHELEImmediatelyForImmediateTypes:(bool)arg11 minimumHELEStagingInterval:(double)arg12 stagingHELEBackstopHour:(unsigned long long)arg13 surfaceHELEImmediatelyBetweenBackstopAndKeyroll:(bool)arg14;
- (id)initWithExpiryTimeIntervalOrDefault:(id)arg1 purgeTimeIntervalOrDefault:(id)arg2 keepAliveIntervalOrDefault:(id)arg3 minimumStagingIntervalOrDefault:(id)arg4 stagingBackstopHourOrDefault:(id)arg5 assumedKeyRollHourOrDefault:(id)arg6 scanIntervalOrDefault:(id)arg7 surfaceImmediatelyBetweenBackstopAndKeyrollOrDefault:(id)arg8 maxExpectedHELEWildIntervalOrDefault:(id)arg9 maxExpectedDurianWildIntervalOrDefault:(id)arg10 shouldAlertHELEImmediatelyForImmediateTypesOrDefault:(id)arg11 minimumHELEStagingIntervalOrDefault:(id)arg12 stagingHELEBackstopHourOrDefault:(id)arg13 surfaceHELEImmediatelyBetweenBackstopAndKeyrollOrDefault:(id)arg14;
- (bool)isEqual:(id)arg1;
- (double)keepAliveInterval;
- (double)maxExpectedDurianWildInterval;
- (double)maxExpectedHELEWildInterval;
- (double)minimumHELEStagingInterval;
- (double)minimumStagingInterval;
- (double)purgeTimeInterval;
- (double)scanInterval;
- (void)setExpiryTimeInterval:(double)arg1;
- (void)setPurgeTimeInterval:(double)arg1;
- (bool)shouldAlertHELEImmediatelyForImmediateTypes;
- (long long)stagingBackstopHour;
- (long long)stagingHELEBackstopHour;
- (bool)surfaceHELEImmediatelyBetweenBackstopAndKeyroll;
- (bool)surfaceImmediatelyBetweenBackstopAndKeyroll;

@end
