/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Message.framework/Message
 */

@interface MFAccount : NSObject <ECAuthenticatableAccount, EDAccount, EFPubliclyDescribable> {
    bool  _allowsTrustPrompt;
    ECAccount * _baseAccount;
    NSString * _cachedDescription;
    NSString * _cachedPrivacySafeDescription;
    EFLocked * _currentConnections;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _descriptionLock;
    ACAccount * _persistentAccount;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _persistentAccountLock;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _privacyDescriptionLock;
    NSString * _sourceApplicationBundleIdentifier;
    NSMutableDictionary * _unsavedAccountProperties;
    NSArray * emailAddressStrings;
}

@property (readonly) ACAccount *accountForRenewingCredentials;
@property bool allowsTrustPrompt;
@property (nonatomic, readonly, copy) NSString *altDSID;
@property (nonatomic, readonly) ECAccount *baseAccount;
@property (nonatomic, readonly) bool connectionsAreConstrained;
@property (nonatomic, readonly) EFLocked *currentConnections;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSString *displayName;
@property (nonatomic, retain) NSString *domain;
@property (nonatomic, readonly, copy) NSString *ef_publicDescription;
@property (nonatomic, readonly, copy) NSArray *emailAddressStrings;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSString *hostname;
@property (readonly, copy) NSString *identifier;
@property (nonatomic, readonly) bool isActive;
@property (getter=isManaged, nonatomic, readonly) bool managed;
@property (readonly) NSString *managedTag;
@property (nonatomic, readonly, retain) NSString *oauth2Token;
@property (readonly) ACAccount *parentAccount;
@property (readonly) NSString *parentAccountIdentifier;
@property (nonatomic, copy) NSString *password;
@property (readonly) ACAccount *persistentAccount;
@property (readonly) NSString *personaIdentifier;
@property (nonatomic) unsigned int portNumber;
@property (nonatomic, retain) ECAuthenticationScheme *preferredAuthScheme;
@property (nonatomic, readonly) bool primaryiCloudAccount;
@property (readonly) NSDictionary *properties;
@property (nonatomic, copy) NSString *sourceApplicationBundleIdentifier;
@property (nonatomic, readonly, copy) NSString *statisticsKind;
@property (readonly) Class superclass;
@property (readonly) NSString *syncStoreIdentifier;
@property (nonatomic, readonly) ACAccount *systemAccount;
@property (readonly) NSString *type;
@property (readonly) NSString *uniqueID;
@property (nonatomic, copy) NSString *username;
@property (nonatomic) bool usesSSL;

+ (id)_accountClass;
+ (id)_basicPropertyForKey:(id)arg1 persistentAccount:(id)arg2;
+ (id)_newPersistentAccount;
+ (bool)_setBasicProperty:(id)arg1 forKey:(id)arg2 persistentAccount:(id)arg3;
+ (bool)accountIsManaged:(id)arg1;
+ (bool)accountIsPreventedFromSendingFromExternalProcesses:(id)arg1;
+ (bool)accountIsRestrictedFromTransfersToOtherAccounts:(id)arg1;
+ (id)accountPropertiesValueForKey:(id)arg1 value:(id)arg2;
+ (bool)accountRestrictsRecentsSyncing:(id)arg1;
+ (bool)accountSourceIsManaged:(id)arg1;
+ (id)accountTypeIdentifier;
+ (id)accountTypeString;
+ (id)accountWithPersistentAccount:(id)arg1;
+ (id)accountWithProperties:(id)arg1;
+ (id)authSchemesForAccountClass;
+ (unsigned int)defaultPortNumber;
+ (unsigned int)defaultSecurePortNumber;
+ (id)displayedAccountTypeString;
+ (id)displayedShortAccountTypeString;
+ (id)excludedAccountPropertyKeys;
+ (id)existingAccountForUniqueID:(id)arg1;
+ (id)hostname;
+ (bool)isCommonPortNumber:(unsigned int)arg1;
+ (bool)isPredefinedAccountType;
+ (bool)isSSLEditable;
+ (void*)legacyKeychainProtocol;
+ (id)newAccountWithDictionary:(id)arg1;
+ (id)predefinedValueForKey:(id)arg1;
+ (id)propertiesWhichRequireValidation;
+ (id)releaseAllConnectionsScheduler;
+ (id)saslProfileName;
+ (void)setShouldHealAccounts:(bool)arg1;
+ (bool)shouldHealAccounts;
+ (id)supportedDataclasses;
+ (bool)usesSSL;

- (void).cxx_destruct;
- (bool)_boolForAccountInfoKey:(id)arg1 defaultValue:(bool)arg2;
- (bool)_connectAndAuthenticate:(id)arg1;
- (id)_credential;
- (id)_credentialCreateIfNecessary:(bool)arg1;
- (id)_credentialCreateIfNecessary:(bool)arg1 error:(id*)arg2;
- (id)_newConnection;
- (id)_objectForAccountInfoKey:(id)arg1;
- (id)_password;
- (id)_passwordWithError:(id*)arg1;
- (id)_privacySafeDescription;
- (void)_queueAccountInfoDidChange;
- (bool)_renewCredentialsWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)_setAccountProperties:(id)arg1;
- (bool)_shouldTryDirectSSLConnectionOnPort:(unsigned int)arg1;
- (id)accountClass;
- (id)accountForRenewingCredentials;
- (void)accountInfoDidChange;
- (id)accountPropertyForKey:(id)arg1;
- (bool)allowsTrustPrompt;
- (id)altDSID;
- (id)alternateConnectionSettings;
- (void)applySettingsAsDefault:(id)arg1;
- (id)authenticatedConnection;
- (id)baseAccount;
- (bool)canAuthenticateWithCurrentCredentials;
- (bool)canGoOffline;
- (id)certUIService;
- (id)clientCertificates;
- (Class)connectionClass;
- (struct __CFString { }*)connectionServiceType;
- (bool)connectionsAreConstrained;
- (id)copyDiagnosticInformation;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)credentialAccessibility;
- (id)currentConnections;
- (id)customDescriptionForError:(id)arg1 authScheme:(id)arg2 defaultDescription:(id)arg3;
- (id)defaultConnectionSettings;
- (unsigned int)defaultPortNumber;
- (unsigned int)defaultSecurePortNumber;
- (id)description;
- (id)displayName;
- (id)domain;
- (id)ef_publicDescription;
- (id)emailAddressStrings;
- (bool)enableAccount;
- (id)enabledDataclasses;
- (bool)fetchTokensIfNecessary:(id*)arg1;
- (bool)hasPasswordCredential;
- (unsigned long long)hash;
- (id)hostname;
- (id)identifier;
- (id)inaccessiblePasswordErrorWithTitle:(id)arg1;
- (id)init;
- (id)initWithPersistentAccount:(id)arg1;
- (id)initWithProperties:(id)arg1;
- (id)insecureConnectionSettings;
- (bool)isActive;
- (bool)isEnabledForDataclass:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isManaged;
- (bool)isSyncingNotes;
- (id)loginDisabledErrorWithTitle:(id)arg1;
- (id)managedTag;
- (id)missingPasswordErrorWithTitle:(id)arg1;
- (id)nameForMailboxUid:(id)arg1;
- (id)networkAccountIdentifier;
- (id)oauth2Token;
- (id)parentAccount;
- (id)parentAccountIdentifier;
- (id)password;
- (id)persistentAccount;
- (void)persistentAccountDidChange:(id)arg1 previousAccount:(id)arg2;
- (id)personaIdentifier;
- (unsigned int)portNumber;
- (id)preferredAuthScheme;
- (bool)primaryiCloudAccount;
- (bool)promptUserForWebLoginWithURL:(id)arg1 shouldConfirm:(bool)arg2 completionHandler:(id /* block */)arg3;
- (id)properties;
- (void)releaseAllConnections;
- (void)releaseAllForcedConnections;
- (void)removeAccountPropertyForKey:(id)arg1;
- (void)removePersistentAccount;
- (void)removeValueInAccountPropertiesForKey:(id)arg1;
- (bool)renewCredentialsWithOptions:(id)arg1 completion:(id /* block */)arg2;
- (void)reportAuthenticationError:(id)arg1 authScheme:(id)arg2;
- (bool)requiresAuthentication;
- (void)savePersistentAccount;
- (id)secureConnectionSettings;
- (id)secureServiceName;
- (id)serviceName;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (void)setActive:(bool)arg1;
- (void)setAllowsTrustPrompt:(bool)arg1;
- (void)setClientCertificates:(id)arg1;
- (void)setDisplayName:(id)arg1;
- (void)setDomain:(id)arg1;
- (void)setHostname:(id)arg1;
- (void)setMissingPasswordError;
- (void)setOAuth2Token:(id)arg1 refreshToken:(id)arg2;
- (void)setPassword:(id)arg1;
- (void)setPersistentAccount:(id)arg1;
- (void)setPortNumber:(unsigned int)arg1;
- (void)setPreferredAuthScheme:(id)arg1;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (void)setTryDirectSSL:(bool)arg1;
- (void)setUsername:(id)arg1;
- (void)setUsesSSL:(bool)arg1;
- (void)setValueInAccountProperties:(id)arg1 forKey:(id)arg2;
- (bool)shouldDisplayHostnameInErrorMessages;
- (bool)shouldEnableAfterError:(id)arg1;
- (bool)shouldFetchACEDBInfoForError:(id)arg1;
- (id)sourceApplicationBundleIdentifier;
- (id)statisticsKind;
- (bool)supportsMailDrop;
- (id)syncStoreIdentifier;
- (id)systemAccount;
- (id)type;
- (id)uniqueID;
- (id)username;
- (bool)usesSSL;
- (id)valueInAccountPropertiesForKey:(id)arg1;

@end
