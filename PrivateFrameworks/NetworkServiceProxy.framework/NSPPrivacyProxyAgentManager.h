/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NetworkServiceProxy.framework/NetworkServiceProxy
 */

@interface NSPPrivacyProxyAgentManager : NSObject <NSCopying, NSPProberDelegate, NSPProxyPathDelegate, NSPProxyTokenDelegate, NSPQUICProxyPathDelegate, NSSecureCoding> {
    unsigned long long  _agentLowWaterMarkHitCount;
    unsigned long long  _badTokenCount;
    unsigned long long  _cacheLowWaterMarkHitCount;
    NSPCandidateFallbackProxyPath * _candidateFallbackProxyPath;
    NSMutableDictionary * _candidatePreferredQUICProxyPaths;
    NSPCandidateQuicProxyPath * _candidateQuicProxyPath;
    <NSPPrivacyProxyAgentManagerDelegate> * _delegate;
    NSPProber * _directPathProber;
    NSPFallbackProxyPath * _fallbackProxyPath;
    NSMutableArray * _fallbackProxyPathCustomEnumerator;
    NSArray * _fallbackProxyPathList;
    bool  _forceFallback;
    unsigned long long  _generation;
    bool  _geohashSharingEnabled;
    NSDate * _lastFallbackProxySwitchedDate;
    NSDate * _lastPathUnsatisfiedDate;
    NSDate * _lastPrimaryInterfaceChangedDate;
    NSPOutageReasonStats * _lastProxyOutageReasonStats;
    NSDate * _lastQuicProxySwitchedDate;
    NSPOutageReasonStats * _lastTokenOutageReasonStats;
    int  _linkQuality;
    unsigned long long  _missingTokenCount;
    NSDictionary * _networkCharacteristics;
    unsigned long long  _networkFallbackProxiesRotated;
    unsigned long long  _networkProxiesRotated;
    NSArray * _obliviousConfigs;
    NSString * _overrideFallbackIngressProxy;
    NSString * _overrideIngressProxy;
    NSData * _overrideIngressProxyKey;
    NSString * _overridePreferredProxy;
    NWPath * _path;
    NSMutableDictionary * _preferredQUICProxyPaths;
    NSDate * _probeEndTime;
    NSDate * _probeStartTime;
    NWInterface * _proberInterface;
    long long  _probingReason;
    unsigned long long  _proxiesRotated;
    NSArray * _proxyArray;
    bool  _proxyConnectivityCheckActive;
    NSMutableArray * _proxyPathCustomEnumerator;
    NSObject<OS_dispatch_source> * _proxyPathEnumeratorRestoreTimer;
    NSArray * _proxyPathList;
    NSPProber * _proxyPathProber;
    unsigned long long  _proxyPathRestoreIntervalSec;
    NSMutableArray * _proxyTokenInfoArray;
    NSPQuicProxyPath * _quicProxyPath;
    bool  _reportedTokenOutage;
    NSMutableArray * _savedConfiguredPreferredPaths;
    NSMutableDictionary * _savedConfiguredProxies;
    bool  _subscriber;
    NSPToggleStats * _toggleStats;
    unsigned long long  _tokenConsumedCount;
    unsigned long long  _tokenExpiredCount;
    unsigned long long  _tokenFetchFailedCount;
    unsigned long long  _tokenFetchSuccessCount;
    NSDate * _tokenIssuanceRestrictedUntilDate;
    NSObject<OS_dispatch_source> * _tokenIssuanceRestrictedUntilTimer;
    NSString * _tokenServerMaskedAddress;
    bool  _useDefaultInterface;
    bool  dnsFilteringHintEnabled;
    NSString * geohashOverride;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool dnsFilteringHintEnabled;
@property (readonly) bool forceFallback;
@property (nonatomic, retain) NSString *geohashOverride;
@property (readonly) unsigned long long hash;
@property (readonly) NSString *overrideFallbackIngressProxy;
@property (readonly) NSString *overrideIngressProxy;
@property (readonly) NSData *overrideIngressProxyKey;
@property (readonly) NSString *overridePreferredProxy;
@property (readonly) Class superclass;
@property (readonly) NSDate *tokenIssuanceRestrictedUntilDate;

+ (id)ingressTokenAgentUUID;
+ (id)multiHopFallbackProxyAgentUUID;
+ (id)multiHopProxyAgentUUID;
+ (bool)proxiesMatch:(id)arg1 proxyPathList:(id)arg2 ingressProxy:(id)arg3 egressProxy:(id)arg4 pathWeight:(unsigned long long)arg5 supportsFallback:(bool)arg6;
+ (void)removeProxyInfoFromKeychain;
+ (id)singleHopFallbackProxyAgentUUID;
+ (id)singleHopProxyAgentUUID;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)checkTokenFetchOutage;
- (id)copyDomainFiltersDictionary;
- (void)copyProxyInfo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (bool)dnsFilteringHintEnabled;
- (void)encodeWithCoder:(id)arg1;
- (bool)forceFallback;
- (void)forceFallback:(bool)arg1;
- (id)geohashOverride;
- (void)handleConfigChange;
- (void)handleLinkQualityChange:(int)arg1;
- (void)handlePathChange:(id)arg1;
- (void)handleTierChange:(bool)arg1;
- (id)ingressFallbackProxyURL;
- (id)ingressProxyURL;
- (id)initWithCoder:(id)arg1;
- (id)initWithDelegate:(id)arg1 toggleStats:(id)arg2;
- (bool)isMultiHopFallbackProxyAgentRegistered;
- (bool)isMultiHopProxyAgentRegistered;
- (bool)isSingleHopFallbackProxyAgentRegistered;
- (bool)isSingleHopProxyAgentRegistered;
- (id)lastProxyOutageReason;
- (id)lastTokenOutageReason;
- (void)mergeTokenStats:(id)arg1;
- (void)multiHopAgentRegistered:(id)arg1;
- (void)multiHopAgentUnregistered:(id)arg1;
- (id)multiHopFallbackProxyConfigHash:(id)arg1;
- (id)multiHopQUICProxyConfigHash:(id)arg1;
- (void)obliviousHopAgentRegistered:(id)arg1 hostname:(id)arg2 agentUUID:(id)arg3;
- (void)obliviousHopAgentUnregistered:(id)arg1 hostname:(id)arg2;
- (id)obliviousHopFallbackProxyAgentUUIDForHostname:(id)arg1;
- (id)obliviousHopFallbackProxyConfigHashForHostname:(id)arg1;
- (id)overrideFallbackIngressProxy;
- (id)overrideIngressProxy;
- (void)overrideIngressProxy:(id)arg1 fallbackProxy:(id)arg2 key:(id)arg3;
- (id)overrideIngressProxyKey;
- (id)overridePreferredProxy;
- (void)overridePreferredProxy:(id)arg1;
- (void)probeFailed:(id)arg1;
- (void)probeRedirected:(id)arg1;
- (void)probeServerError:(id)arg1 httpStatusCode:(long long)arg2;
- (void)probeSuccess:(id)arg1;
- (bool)proxyInfo:(id)arg1 matchesProxyIndex:(unsigned long long)arg2;
- (void)removeExpiredTokens;
- (void)reportProxyError:(int)arg1 interface:(id)arg2 proxyPath:(id)arg3;
- (void)reportProxySuccessOnInterface:(id)arg1 proxyPath:(id)arg2;
- (void)reportTokenFetchFailure:(id)arg1 statusCode:(long long)arg2;
- (void)requestAccessTokenWithCompletionHandler:(id /* block */)arg1;
- (void)resetProxyErrors;
- (void)sendRTCReportForPrivacyProxyToggleState:(bool)arg1;
- (void)sendRTCReportForServiceOutage:(id)arg1;
- (void)sendRTCReportWithFailureType:(long long)arg1 errorCode:(int)arg2 url:(id)arg3;
- (void)setDnsFilteringHintEnabled:(bool)arg1;
- (void)setGeohashOverride:(id)arg1;
- (void)setUserEventAgentProberParameters;
- (void)setUserEventAgentTokenFetchParameters;
- (void)setupWithPath:(id)arg1 subscriber:(bool)arg2 geohashSharingEnabled:(bool)arg3 geohashOverride:(id)arg4 linkQuality:(int)arg5;
- (void)singleHopAgentRegistered:(id)arg1;
- (void)singleHopAgentUnregistered:(id)arg1;
- (id)singleHopFallbackProxyConfigHash:(id)arg1;
- (id)singleHopQUICProxyConfigHash:(id)arg1;
- (void)switchProxy:(id)arg1;
- (void)tokenAdded;
- (void)tokenFetchOutage:(id)arg1;
- (void)tokenFetched;
- (void)tokenInfoInvalid:(id)arg1;
- (id)tokenIssuanceRestrictedUntilDate;
- (void)tokenLowWaterMarkReached:(id)arg1;
- (void)tokenRateLimited:(id)arg1 untilDate:(double)arg2;
- (void)updateDNSFilteringHint:(bool)arg1;
- (void)updateGeohashSharingPreference:(bool)arg1 geohashOverride:(id)arg2;
- (void)updateProxyInfo:(id)arg1 proxyPathList:(id)arg2 fallbackProxyPathList:(id)arg3 obliviousConfigs:(id)arg4;
- (void)updateUserEventAgentData;
- (void)useDefaultNetworkInterface:(bool)arg1;

@end
