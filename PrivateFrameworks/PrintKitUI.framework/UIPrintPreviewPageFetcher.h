/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PrintKitUI.framework/PrintKitUI
 */

@interface UIPrintPreviewPageFetcher : NSObject {
    NSMutableArray * _catchedInRangeIndexes;
    NSMutableDictionary * _catchedSheetImages;
    long long  _catchedSheetNumber;
    long long  _catchedTotalPageCount;
    long long  _catchedTotalSheetCount;
    double  _minPageWith;
    long long  _numNUpColumns;
    long long  _numNUpRows;
    struct CGSize { 
        double width; 
        double height; 
    }  _pageItemSize;
    NSOperationQueue * _pageRendererQueue;
    struct CGSize { 
        double width; 
        double height; 
    }  _pageSize;
    NSArray * _pageSizes;
    struct CGSize { 
        double width; 
        double height; 
    }  _paperSize;
    struct CGPDFDocument { } * _pdfDocRef;
    NSURL * _pdfURL;
    UIPrintPreviewInfo * _previewInfo;
    struct CGSize { 
        double width; 
        double height; 
    }  _previewSize;
    NSURL * _quickLookPDFURL;
    bool  _showingPageLayout;
}

@property (retain) NSMutableArray *catchedInRangeIndexes;
@property (retain) NSMutableDictionary *catchedSheetImages;
@property long long catchedSheetNumber;
@property long long catchedTotalPageCount;
@property long long catchedTotalSheetCount;
@property double minPageWith;
@property long long numNUpColumns;
@property long long numNUpRows;
@property struct CGSize { double x1; double x2; } pageItemSize;
@property struct CGSize { double x1; double x2; } pageSize;
@property (retain) NSArray *pageSizes;
@property struct CGSize { double x1; double x2; } paperSize;
@property (retain) NSURL *pdfURL;
@property (retain) UIPrintPreviewInfo *previewInfo;
@property struct CGSize { double x1; double x2; } previewSize;
@property (retain) NSURL *quickLookPDFURL;
@property bool showingPageLayout;

- (void).cxx_destruct;
- (long long)_caculateSheetNumber:(id)arg1;
- (void)_drawBorderOfType:(long long)arg1 withScaleFactor:(double)arg2 context:(struct CGContext { }*)arg3 pageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)_drawPageContextIntoImage:(long long)arg1 printInfo:(id)arg2;
- (id)_drawPageWithLayoutIntoImage:(long long)arg1 printInfo:(id)arg2;
- (bool)_mirrorHorizontal:(id)arg1;
- (bool)_pageIndexIsInRange:(long long)arg1 printInfo:(id)arg2;
- (long long)_pageOffsetForRow:(long long)arg1 column:(long long)arg2 printInfo:(id)arg3;
- (struct CGSize { double x1; double x2; })_pagesLayout:(id)arg1;
- (double)_paperAspectRatio;
- (struct CGSize { double x1; double x2; })_paperSize:(id)arg1;
- (void)_removeQuickLookPDFURL;
- (void)_resetPageNUp:(id)arg1;
- (void)_resetPagesIndexsInRange;
- (bool)_reversePageOrientation:(id)arg1;
- (id)cachedSheetImageForItemAt:(long long)arg1;
- (double)caculateFooterWidth:(double)arg1;
- (double)caculateHeaderWidth:(double)arg1;
- (id)catchedInRangeIndexes;
- (id)catchedSheetImages;
- (long long)catchedSheetNumber;
- (long long)catchedTotalPageCount;
- (long long)catchedTotalSheetCount;
- (void)dealloc;
- (void)fetchImageInBackground:(long long)arg1 completion:(id /* block */)arg2;
- (long long)fetchNumberOfItems;
- (struct CGSize { double x1; double x2; })imageSizeAtPageIndex:(long long)arg1;
- (id)init;
- (struct CGSize { double x1; double x2; })itemSizeAtPageIndex:(long long)arg1 flowlayout:(id)arg2;
- (double)minPageWith;
- (bool)needDrawPageWithLayout;
- (long long)numNUpColumns;
- (long long)numNUpRows;
- (struct CGSize { double x1; double x2; })pageItemSize;
- (struct CGSize { double x1; double x2; })pageSize;
- (struct CGSize { double x1; double x2; })pageSizeAtPageIndex:(long long)arg1 flowlayout:(id)arg2;
- (id)pageSizes;
- (struct CGSize { double x1; double x2; })paperSize;
- (id)pdfURL;
- (id)previewInfo;
- (struct CGSize { double x1; double x2; })previewSize;
- (id)quickLookPDFURL;
- (id)quicklookPageThumbnailAtIndex:(long long)arg1;
- (void)redrawQuicklookPDF:(id /* block */)arg1;
- (void)resetAllPageImages;
- (void)resetAllPages:(id /* block */)arg1;
- (void)setCatchedInRangeIndexes:(id)arg1;
- (void)setCatchedSheetImages:(id)arg1;
- (void)setCatchedSheetNumber:(long long)arg1;
- (void)setCatchedTotalPageCount:(long long)arg1;
- (void)setCatchedTotalSheetCount:(long long)arg1;
- (void)setMinPageWith:(double)arg1;
- (void)setNumNUpColumns:(long long)arg1;
- (void)setNumNUpRows:(long long)arg1;
- (void)setPageItemSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPageSizes:(id)arg1;
- (void)setPaperSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPdfURL:(id)arg1;
- (void)setPreviewInfo:(id)arg1;
- (void)setPreviewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setQuickLookPDFURL:(id)arg1;
- (void)setShowingPageLayout:(bool)arg1;
- (long long)sheetIndexToPrintForItemAt:(long long)arg1;
- (struct CGSize { double x1; double x2; })sheetSizeAtPageIndex:(long long)arg1 flowlayout:(id)arg2;
- (bool)showingPageLayout;
- (void)updatePdfURL:(id)arg1 options:(id)arg2 completion:(id /* block */)arg3;

@end
