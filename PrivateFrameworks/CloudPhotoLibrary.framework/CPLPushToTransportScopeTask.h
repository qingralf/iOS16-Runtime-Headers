/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLPushToTransportScopeTask : CPLEngineScopedTask <CPLBeforeUploadCheckItemsProvider> {
    CPLChangeBatch * _batchToCommit;
    CPLBeforeUploadCheckItems * _checkItems;
    unsigned long long  _countOfPushedChanges;
    CPLBatchExtractionStrategy * _currentStrategy;
    NSString * _currentTaskKey;
    bool  _deferredCancel;
    CPLDerivativesFilter * _derivativesFilter;
    bool  _didExtractOneBatch;
    CPLChangeBatch * _diffedBatch;
    <CPLEngineTransportFetchRecordsTask> * _fetchRecordsTask;
    bool  _hasCachedShouldCheckResourcesAhead;
    bool  _hasPushedSomeChanges;
    bool  _highPriority;
    NSMutableDictionary * _invalidTransportScopes;
    bool  _isUsingOverQuotaStrategy;
    unsigned long long  _lastReportedProgress;
    double  _latestApproximativeUploadRate;
    NSObject<OS_dispatch_queue> * _lock;
    NSMutableArray * _preparedUploadResourceTasks;
    CPLEnginePushRepository * _pushRepository;
    unsigned long long  _recordCount;
    bool  _resetStrategy;
    long long  _ruleGroup;
    CPLEngineScheduler * _scheduler;
    NSString * _scopeIdentifier;
    CPLEngineScopeStorage * _scopes;
    CPLEngineScope * _sharedScope;
    bool  _shouldCheckResourcesAhead;
    bool  _shouldSetupEstimatedSize;
    double  _startOfDerivativesGeneration;
    double  _startOfIteration;
    CPLRecordTargetMapping * _targetMapping;
    long long  _taskItem;
    NSDate * _taskStartDate;
    CPLEngineStoreTransaction * _transactionDuringItemsPreparation;
    CPLEngineTransport * _transport;
    <CPLEngineTransportGroup> * _transportGroup;
    CPLTransportScopeMapping * _transportScopeMapping;
    NSArray * _uploadResourceTasks;
    <CPLEngineTransportUploadBatchTask> * _uploadTask;
    bool  _wasBusy;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool highPriority;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_checkForRecordExistence;
- (void)_clearUploadBatch;
- (void)_deleteGeneratedResourcesAfterError:(id)arg1;
- (void)_didFinishTaskWithKey:(id)arg1 error:(bool)arg2 cancelled:(bool)arg3;
- (void)_didStartTaskWithKey:(id)arg1 recordCount:(unsigned long long)arg2;
- (bool)_discardUploadedExtractedBatch:(id)arg1 error:(id*)arg2;
- (void)_doOneIteration;
- (void)_excludeScopeFromMingling;
- (void)_extractBatchWithTransaction:(id)arg1 andStore:(id)arg2;
- (void)_generateDerivativesForNextRecord:(id)arg1 usingDerivativesCache:(id)arg2 fetchCache:(id)arg3;
- (void)_generateNeededDerivativesWithFetchCache:(id)arg1;
- (void)_includeScopeInMingling;
- (bool)_markUploadedTasksDidFinishWithError:(id)arg1 transaction:(id)arg2 error:(id*)arg3;
- (void)_popNextBatchAndContinue;
- (void)_prepareUploadBatch;
- (void)_pushTaskDidFinishWithError:(id)arg1;
- (bool)_reenqueueExtractedBatchWithRejectedRecords:(id)arg1 extractedBatch:(id)arg2 error:(id*)arg3;
- (bool)_shouldNotTrustCloudCacheAfterError:(id)arg1;
- (void)_updateQuotaStrategyAfterSuccessInTransaction:(id)arg1;
- (void)_uploadBatchWithFetchCache:(id)arg1;
- (bool)_willNeedToAccessScopeWithIdentifier:(id)arg1 primaryScope:(bool)arg2 error:(id*)arg3;
- (id)availableResourceTypesToUploadForChange:(id)arg1;
- (void)cancel;
- (void)cancel:(bool)arg1;
- (bool)checkScopeIsValidInTransaction:(id)arg1;
- (bool)highPriority;
- (id)initWithEngineLibrary:(id)arg1 session:(id)arg2 clientCacheIdentifier:(id)arg3 scope:(id)arg4 transportScope:(id)arg5;
- (bool)isCloudRecordWithScopedIdentifierShared:(id)arg1;
- (bool)isResourceDynamic:(id)arg1;
- (id)knownCloudRecordWithScopedIdentifier:(id)arg1;
- (void)launch;
- (id)scopesForTask;
- (void)setHighPriority:(bool)arg1;
- (id)taskIdentifier;
- (bool)willNeedToAccessRecordWithScopedIdentifier:(id)arg1 error:(id*)arg2;
- (id)willUploadCloudResource:(id)arg1 localResource:(id)arg2 error:(id*)arg3;

@end
