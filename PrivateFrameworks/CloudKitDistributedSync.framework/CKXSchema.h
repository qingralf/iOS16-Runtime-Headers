/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudKitDistributedSync.framework/CloudKitDistributedSync
 */

@interface CKXSchema : NSObject <NSCopying> {
    unsigned long long  _nextIdentifier;
    struct unordered_map<unsigned long long, CKXFieldProperties, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CKXFieldProperties>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, CKXFieldProperties>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CKXFieldProperties>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CKXFieldProperties>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CKXFieldProperties>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXFieldProperties>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CKXFieldProperties>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CKXFieldProperties>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  fieldTokenToFieldProperties;
    struct unordered_map<unsigned long long, std::vector<unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<unsigned long long>>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  structTokenToFieldTokens;
    struct unordered_map<unsigned long long, CKXStructProperties, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CKXStructProperties>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, CKXStructProperties>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CKXStructProperties>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CKXStructProperties>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CKXStructProperties>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CKXStructProperties>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CKXStructProperties>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CKXStructProperties>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  structTokenToStructProperties;
    struct vector<unsigned long long, std::allocator<unsigned long long>> { 
        unsigned long long *__begin_; 
        unsigned long long *__end_; 
        struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { 
            unsigned long long *__value_; 
        } __end_cap_; 
    }  structTokens;
}

@property (nonatomic) unsigned long long nextIdentifier;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)defineFieldForStruct:(unsigned long long)arg1 withEncoding:(const char *)arg2 optional:(bool)arg3;
- (unsigned long long)defineListReferenceOfType:(long long)arg1 forStruct:(unsigned long long)arg2;
- (unsigned long long)defineListReferenceToStructType:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;
- (unsigned long long)defineStruct;
- (unsigned long long)defineStructReferenceToType:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;
- (unsigned long long)defineTopLevelContainerStruct;
- (unsigned long long)defineValueListReferenceWithEncoding:(const char *)arg1 forStruct:(unsigned long long)arg2;
- (bool)fieldExists:(unsigned long long)arg1;
- (unsigned long long)fieldTokenAtIndex:(unsigned long long)arg1 forStructToken:(unsigned long long)arg2;
- (unsigned long long)fieldTokenCountForStructToken:(unsigned long long)arg1;
- (long long)fieldTypeForField:(unsigned long long)arg1;
- (id)init;
- (long long)listTypeForField:(unsigned long long)arg1;
- (long long)newIdentifier;
- (unsigned long long)nextIdentifier;
- (unsigned long long)referencedStructAtIndex:(unsigned long long)arg1 forStructToken:(unsigned long long)arg2;
- (unsigned long long)referencedStructCountForStructToken:(unsigned long long)arg1;
- (void)setNextIdentifier:(unsigned long long)arg1;
- (unsigned long long)structContainingField:(unsigned long long)arg1;
- (unsigned long long)structForListReference:(unsigned long long)arg1;
- (unsigned long long)structForStructReference:(unsigned long long)arg1;
- (bool)structIsTopLevelContainer:(unsigned long long)arg1;
- (bool)valueFieldIsOptional:(unsigned long long)arg1;
- (unsigned long long)valueSizeForField:(unsigned long long)arg1;
- (long long)valueTypeForField:(unsigned long long)arg1;

@end
