/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudKitDistributedSync.framework/CloudKitDistributedSync
 */

@interface CKXORCReader : CKXReaderBase <CKXReaderProtocol> {
    <CKXORCHelpers> * _helpers;
    unsigned long long  _loadCount;
    CKXORCReaderOptions * _options;
    struct unique_ptr<orc::Reader, std::default_delete<orc::Reader>> { 
        struct __compressed_pair<orc::Reader *, std::default_delete<orc::Reader>> { 
            struct Reader {} *__value_; 
        } __ptr_; 
    }  _reader;
    struct unordered_map<unsigned long long, NSIndexSet *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSIndexSet *>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, NSIndexSet *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSIndexSet *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSIndexSet *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, NSIndexSet *>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSIndexSet *>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSIndexSet *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSIndexSet *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _rowsForTopLevelContainerStructs;
    CKDSReadableStorage * _storage;
    struct unordered_map<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>>> { 
        struct __hash_table<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>>> { 
            struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> *>>> { 
                struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> *>>> { 
                    void **__value_; 
                    struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> *>> { 
                        struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> *>> { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *>>> { 
                struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, void *> *> { 
                    void *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _structToReaderBatchPair;
}

@property (nonatomic, readonly) <CKXORCHelpers> *helpers;
@property (nonatomic) unsigned long long loadCount;
@property (nonatomic, readonly) CKXORCReaderOptions *options;
@property (nonatomic, retain) CKDSReadableStorage *storage;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_setInputWithError:(id*)arg1;
- (void)copyData:(void*)arg1 forField:(unsigned long long)arg2 inStruct:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg3;
- (void)copyData:(void*)arg1 forList:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg2;
- (bool)createReaderIfNecessaryWithError:(id*)arg1;
- (void)createRowReaderForStruct:(unsigned long long)arg1;
- (id)helpers;
- (id)initWithSchema:(id)arg1;
- (id)initWithSchema:(id)arg1 helpers:(id)arg2 options:(id)arg3;
- (long long)lengthForList:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1;
- (void*)listColumnForReference:(unsigned long long)arg1;
- (bool)loadBatchWithRow:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;
- (unsigned long long)loadCount;
- (unsigned long long)offsetInCurrentBatchForRow:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;
- (id)options;
- (bool)referenceIsNull:(unsigned long long)arg1 inStruct:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg2;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })referencedListForReference:(unsigned long long)arg1 inStruct:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg2;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })referencedStructAtIndex:(long long)arg1 inList:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg2;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })referencedStructForReference:(unsigned long long)arg1 inStruct:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg2;
- (void*)rootColumnForStruct:(unsigned long long)arg1;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })rootStructWithType:(unsigned long long)arg1;
- (id)rowsForStructColumn:(unsigned long long)arg1;
- (void)setLoadCount:(unsigned long long)arg1;
- (bool)setReadableStorage:(id)arg1 error:(id*)arg2;
- (void)setStorage:(id)arg1;
- (bool)size:(unsigned long long*)arg1 error:(id*)arg2;
- (id)storage;
- (void*)structColumnForStruct:(unsigned long long)arg1;
- (void*)structReferenceColumnForReference:(unsigned long long)arg1;
- (void*)valueColumnForField:(unsigned long long)arg1;
- (unsigned long long)valueSizeForField:(unsigned long long)arg1;

@end
