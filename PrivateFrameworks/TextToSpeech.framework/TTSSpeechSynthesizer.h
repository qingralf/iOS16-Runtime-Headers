/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech
 */

@interface TTSSpeechSynthesizer : NSObject <TTSSpeechConnectionDelegate> {
    id /* block */  _audioBufferCallback;
    unsigned int  _audioQueueFlags;
    unsigned int  _audioSessionID;
    bool  _audioSessionIDIsValid;
    NSString * _bundleIdentifier;
    NSMutableDictionary * _channels;
    NSMutableArray * _currentRequestOwners;
    <TTSSpeechSynthesizerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateTargetQueue;
    long long  _footprint;
    bool  _ignoreSubstitutions;
    NSArray * _outputChannels;
    NSArray * _phonemeSubstitutions;
    float  _pitch;
    NSObject<OS_dispatch_queue> * _queue;
    float  _rate;
    unsigned long long  _requestClientIdentifier;
    bool  _skipLuthorRules;
    void * _speakingRequestClientContext;
    NSMutableArray * _speechRequests;
    bool  _supportsAccurateWordCallbacks;
    bool  _synthesizeSilently;
    struct { 
        unsigned int delegateStartWithRequest : 1; 
        unsigned int delegateFinishWithRequest : 1; 
        unsigned int delegateFinishWithPhonemesSpokenWithRequest : 1; 
        unsigned int delegatePauseWithRequest : 1; 
        unsigned int delegateContinueWithRequest : 1; 
        unsigned int delegateWillSpeakWithRequest : 1; 
        unsigned int delegateSynthesizedSilentlyURL : 1; 
        unsigned int willUseInput : 1; 
    }  _synthesizerFlags;
    unsigned long long  _synthesizerInstanceID;
    NSMutableDictionary * _testingLastRuleConversion;
    bool  _useMonarchStyleRate;
    bool  _useSharedSession;
    NSArray * _userSubstitutions;
    NSString * _voiceIdentifier;
    float  _volume;
}

@property (nonatomic, copy) id /* block */ audioBufferCallback;
@property (nonatomic) unsigned int audioQueueFlags;
@property (nonatomic, readonly) unsigned int audioSessionID;
@property (nonatomic, retain) NSString *bundleIdentifier;
@property (nonatomic) <TTSSpeechSynthesizerDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateTargetQueue;
@property (nonatomic) bool ignoreSubstitutions;
@property (nonatomic, retain) NSArray *outputChannels;
@property (nonatomic, copy) NSArray *phonemeSubstitutions;
@property (nonatomic) float pitch;
@property (nonatomic) float rate;
@property (nonatomic) unsigned long long requestClientIdentifier;
@property (nonatomic, readonly) NSString *resolvedVoiceIdentifier;
@property (nonatomic) bool skipLuthorRules;
@property (nonatomic) void*speakingRequestClientContext;
@property (nonatomic) bool supportsAccurateWordCallbacks;
@property (nonatomic) bool synthesizeSilently;
@property (nonatomic, copy) NSArray *userSubstitutions;
@property (nonatomic, retain) NSString *voiceIdentifier;
@property (nonatomic) float volume;

+ (void)_initializeServers;
+ (id)_speechVoiceForIdentifier:(id)arg1 language:(id)arg2 footprint:(long long)arg3;
+ (id)allAvailableVoices;
+ (id)audioFileSettingsForVoice:(id)arg1;
+ (id)availableLanguageCodes;
+ (id)availableVoices;
+ (id)availableVoicesForLanguageCode:(id)arg1 queryingMobileAssets:(bool)arg2;
+ (id)combinedProsodyMarkupForIdentifier:(id)arg1 string:(id)arg2 rate:(id)arg3 pitch:(id)arg4 volume:(id)arg5;
+ (bool)employSpeechMarkupForType:(long long)arg1 identifier:(id)arg2 withLanguage:(id)arg3;
+ (void)initialize;
+ (bool)isSystemVoice:(id)arg1;
+ (id)refreshAllAvailableVoices;
+ (id)refreshAllAvailableVoices:(bool)arg1;
+ (id)remapVoiceIdentifier:(id)arg1;
+ (void)setSpeechJobFinishedUnitTestBlock:(id /* block */)arg1;
+ (void)setSpeechJobStartedUnitTestBlock:(id /* block */)arg1;
+ (void)setTestingAvailableVoicesForLanguageCode:(id)arg1;
+ (void)setVoiceAssetsForTesting:(id)arg1;
+ (id)speechMarkupStringForType:(long long)arg1 forIdentifier:(id)arg2 string:(id)arg3;
+ (id)supportedIPAPhonemeLanguages;
+ (id)synthesizerForSynthesizerID:(unsigned long long)arg1;
+ (void)testingSetAllVoices:(id)arg1;
+ (id)unavailableVoiceIdentifiers;
+ (id)voiceAccessQueue;
+ (id)voiceAssetsForTesting;
+ (id)voiceForIdentifier:(id)arg1;

- (void).cxx_destruct;
- (bool)_continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (id)_determineSubstitution:(id)arg1 text:(id)arg2 wordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 request:(id)arg4;
- (void)_mediaServicesDied;
- (bool)_pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (id)_preprocessText:(id)arg1 languageCode:(id)arg2;
- (void)_processUserSubstitutions:(id)arg1 toText:(id)arg2 request:(id)arg3 bundleIdentifier:(id)arg4 voice:(id)arg5;
- (void)_setDelegate:(id)arg1;
- (bool)_skipSubstition:(id)arg1 language:(id)arg2 bundleIdentifier:(id)arg3 voice:(id)arg4;
- (bool)_startSpeakingString:(id)arg1 orAttributedString:(id)arg2 toURL:(id)arg3 withLanguageCode:(id)arg4 request:(id*)arg5 error:(id*)arg6;
- (bool)_stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)_substitutionLanguageMatchesSpecialCase:(id)arg1 withLanguage:(id)arg2;
- (void)applySSMLTransformation:(id)arg1 string:(id)arg2 voice:(id)arg3;
- (id /* block */)audioBufferCallback;
- (unsigned int)audioQueueFlags;
- (unsigned int)audioSessionID;
- (id)bundleIdentifier;
- (void)connection:(id)arg1 speechRequest:(id)arg2 didStopAtEnd:(bool)arg3 phonemesSpoken:(id)arg4 error:(id)arg5;
- (void)connection:(id)arg1 speechRequest:(id)arg2 didSynthesizeSilentlyToURL:(id)arg3;
- (void)connection:(id)arg1 speechRequest:(id)arg2 willSpeakMark:(long long)arg3 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)connection:(id)arg1 speechRequestDidContinue:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidPause:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidStart:(id)arg2;
- (bool)continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (bool)continueSpeakingWithError:(id*)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateTargetQueue;
- (long long)footprint;
- (bool)ignoreSubstitutions;
- (id)init;
- (bool)isSpeaking;
- (float)maximumRate;
- (float)minimumRate;
- (id)outputChannels;
- (bool)pauseSpeakingAtNextBoundary:(long long)arg1 error:(id*)arg2;
- (bool)pauseSpeakingAtNextBoundary:(long long)arg1 synchronously:(bool)arg2 error:(id*)arg3;
- (bool)pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 error:(id*)arg3;
- (bool)pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (id)phonemeSubstitutions;
- (float)pitch;
- (float)rate;
- (unsigned long long)requestClientIdentifier;
- (id)resolvedVoiceIdentifier;
- (id)resolvedVoiceIdentifierForLanguageCode:(id)arg1;
- (void)setAudioBufferCallback:(id /* block */)arg1;
- (void)setAudioQueueFlags:(unsigned int)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateTargetQueue:(id)arg1;
- (void)setFootprint:(long long)arg1;
- (void)setIgnoreSubstitutions:(bool)arg1;
- (void)setOutputChannels:(id)arg1;
- (void)setPhonemeSubstitutions:(id)arg1;
- (void)setPitch:(float)arg1;
- (void)setRate:(float)arg1;
- (void)setRequestClientIdentifier:(unsigned long long)arg1;
- (void)setSkipLuthorRules:(bool)arg1;
- (void)setSpeakingRequestClientContext:(void*)arg1;
- (void)setSupportsAccurateWordCallbacks:(bool)arg1;
- (void)setSynthesizeSilently:(bool)arg1;
- (void)setUseMonarchStyleRate:(bool)arg1;
- (void)setUserSubstitutions:(id)arg1;
- (void)setVoiceIdentifier:(id)arg1;
- (void)setVolume:(float)arg1;
- (bool)skipLuthorRules;
- (void*)speakingRequestClientContext;
- (id)speechString;
- (bool)startSpeakingString:(id)arg1 error:(id*)arg2;
- (bool)startSpeakingString:(id)arg1 request:(id*)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 request:(id*)arg4 error:(id*)arg5;
- (bool)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 request:(id*)arg3 error:(id*)arg4;
- (bool)stopSpeakingAtNextBoundary:(long long)arg1 error:(id*)arg2;
- (bool)stopSpeakingAtNextBoundary:(long long)arg1 synchronously:(bool)arg2 error:(id*)arg3;
- (bool)stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 error:(id*)arg3;
- (bool)stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)supportsAccurateWordCallbacks;
- (bool)synthesizeSilently;
- (unsigned long long)synthesizerInstanceID;
- (id)testingLastRuleConversion;
- (void)testingSetLastRuleConversion:(id)arg1 replacement:(id)arg2;
- (void)useAudioQueueFlags:(unsigned int)arg1;
- (bool)useMonarchStyleRate;
- (void)useSpecificAudioSession:(unsigned int)arg1;
- (id)userSubstitutions;
- (id)voiceIdentifier;
- (float)volume;

@end
