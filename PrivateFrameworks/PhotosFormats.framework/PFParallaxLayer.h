/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats
 */

@interface PFParallaxLayer : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    NSString * _identifier;
    struct __CVBuffer { } * _image;
    double  _zPosition;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic, readonly) struct __CVBuffer { }*image;
@property (nonatomic, readonly) bool isBackfill;
@property (nonatomic, readonly) bool isBackground;
@property (nonatomic, readonly) bool isDebug;
@property (nonatomic, readonly) bool isForeground;
@property (nonatomic, readonly) bool isInactive;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pixelSize;
@property (nonatomic, readonly) double zPosition;

+ (id)imageLayer:(struct __CVBuffer { }*)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zPosition:(double)arg3 identifier:(id)arg4;

- (void).cxx_destruct;
- (void)dealloc;
- (id)debugDescription;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)identifier;
- (struct __CVBuffer { }*)image;
- (id)initWithImage:(struct __CVBuffer { }*)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 zPosition:(double)arg3 identifier:(id)arg4;
- (bool)isBackfill;
- (bool)isBackground;
- (bool)isDebug;
- (bool)isForeground;
- (bool)isInactive;
- (struct CGSize { double x1; double x2; })pixelSize;
- (double)zPosition;

@end
