/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats
 */

@interface PFParallaxLayoutUtilities : NSObject

+ (bool)_rectIsValid:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (unsigned long long)clockIntersectionFromTopRectMatteCoverage:(double)arg1 bottomRectMatteCoverage:(double)arg2;
+ (id)computeLayoutWithHelper:(id)arg1;
+ (id)computeLayoutsWithHelper:(id)arg1;
+ (double)cropScoreThresholdForClassification:(unsigned long long)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectiveAcceptableRectForClassification:(unsigned long long)arg1 havePetFaces:(bool)arg2 sourcePreferredCropRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 sourceAcceptableCropRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 sourceFaceAreaRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectivePreferredRectForClassification:(unsigned long long)arg1 havePetFaces:(bool)arg2 sourcePreferredCropRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 sourceAcceptableCropRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 sourceFaceAreaRectNormalized:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5;
+ (bool)facePositionAcceptable:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 imageAspect:(double)arg2;
+ (struct { double x1; double x2; double x3; double x4; double x5; double x6; })facePositionLimits;
+ (double)timeOverlapCheckThresholdForTopRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
