/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUIPrivate.framework/PhotosUIPrivate
 */

@interface PUParallaxLayerStackViewModel : PXObservable <NSCopying, PUParallaxLayerStackMutableViewModel> {
    long long  _backlightLuminance;
    unsigned long long  _clockIntersection;
    NSString * _clockLayerOrder;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _containerFrame;
    PFParallaxLayerStack * _currentLayerStack;
    PFParallaxLayout * _currentLayout;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentNormalizedVisibleFrame;
    bool  _didSetContainerFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _landscapeVisibleFrame;
    PFParallaxLayout * _lastPortraitLayout;
    long long  _layoutOrder;
    struct CGPoint { 
        double x; 
        double y; 
    }  _parallaxVector;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _portraitVisibleFrame;
    <PISegmentationItem> * _segmentationItem;
    PIParallaxStyle * _style;
    PUParallaxLayerStackViewManager * _viewManager;
    double  _visibilityAmount;
}

@property (nonatomic, readonly) long long backlightLuminance;
@property (nonatomic, readonly) bool canApplyParallax;
@property (nonatomic, readonly) bool canEnableDepthEffect;
@property (nonatomic, readonly) bool clockAppearsAboveForeground;
@property (nonatomic, readonly) unsigned long long clockIntersection;
@property (nonatomic, retain) NSString *clockLayerOrder;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } containerFrame;
@property (nonatomic, readonly) PFParallaxLayerStack *currentLayerStack;
@property (nonatomic, readonly) PFParallaxLayout *currentLayout;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentNormalizedVisibleFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) bool depthEnabled;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didSetContainerFrame;
@property (nonatomic, readonly) long long environment;
@property (nonatomic, readonly) bool hasEnoughRoomForParallax;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inactiveFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } landscapeVisibleFrame;
@property (nonatomic, retain) PFParallaxLayout *lastPortraitLayout;
@property (nonatomic, readonly) long long layoutOrder;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } normalizedVisibleFrame;
@property (nonatomic, readonly) bool parallaxDisabled;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } parallaxVector;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } portraitVisibleFrame;
@property (nonatomic, retain) <PISegmentationItem> *segmentationItem;
@property (nonatomic, readonly) PIParallaxStyle *style;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PUParallaxLayerStackViewManager *viewManager;
@property (nonatomic, readonly) double visibilityAmount;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleFrame;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_layoutRectForViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_updateVisibleFrameWithContainerFrameSetFirstTime:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_viewRectForLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)backlightLuminance;
- (bool)canApplyParallax;
- (bool)canEnableDepthEffect;
- (bool)clockAppearsAboveForeground;
- (unsigned long long)clockIntersection;
- (id)clockLayerOrder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })containerFrame;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentLayerStack;
- (id)currentLayout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentNormalizedVisibleFrame;
- (id)debugDescription;
- (bool)depthEnabled;
- (bool)didSetContainerFrame;
- (long long)environment;
- (bool)hasEnoughRoomForParallax;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inactiveFrame;
- (id)init;
- (id)initWithLayerStack:(id)arg1;
- (id)initWithSegmentationItem:(id)arg1 initialStyle:(id)arg2 layerStack:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })landscapeVisibleFrame;
- (id)lastPortraitLayout;
- (long long)layoutOrder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedVisibleFrame;
- (bool)parallaxDisabled;
- (struct CGPoint { double x1; double x2; })parallaxVector;
- (void)performChanges:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })portraitVisibleFrame;
- (id)segmentationItem;
- (void)setBacklightLuminance:(long long)arg1;
- (void)setClockAreaLuminance:(double)arg1;
- (void)setClockIntersection:(unsigned long long)arg1;
- (void)setClockLayerOrder:(id)arg1;
- (void)setContainerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDepthEnabled:(bool)arg1;
- (void)setDidSetContainerFrame:(bool)arg1;
- (void)setLandscapeVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLastPortraitLayout:(id)arg1;
- (void)setLayoutOrder:(long long)arg1;
- (void)setNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setParallaxDisabled:(bool)arg1;
- (void)setParallaxVector:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPortraitVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSegmentationItem:(id)arg1;
- (void)setStyle:(id)arg1;
- (void)setVisibilityAmount:(double)arg1;
- (void)setVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)style;
- (void)updateLayerStack:(id)arg1;
- (id)viewManager;
- (double)visibilityAmount;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleFrame;

@end
