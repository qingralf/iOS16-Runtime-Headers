/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotosUIPrivate.framework/PhotosUIPrivate
 */

@interface PUUserTransformTileViewController : PUTileViewController <PUAssetViewModelChangeObserver, PUBrowsingViewModelChangeObserver, PUUserTransformViewDelegate, PXVKImageAnalysisInteractionDelegate> {
    NSString * __identifier;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __untransformedContentFrame;
    PUAssetViewModel * _assetViewModel;
    PUBrowsingViewModel * _browsingViewModel;
    <PUUserTransformTileViewControllerDelegate> * _delegate;
    struct { 
        bool respondsToDidChangeModelTileTransform; 
        bool respondsToDidChangeIsUserInteracting; 
        bool respondsToShouldReceiveTouchAtLocationFromProvider; 
        bool respondsToTextsToHighlight; 
        bool respondsToViewControllerPresentingTileView; 
        bool respondsToViewControllerPresentingViewController; 
    }  _delegateFlags;
    PUDisplayTileTransform * _displayTileTransform;
    <PXVKImageAnalysisInteraction> * _imageInteraction;
    NSTimer * _pptVKAnalysWaitingTimer;
    bool  _userInteractionEnabled;
    PUUserTransformView * _userTransformView;
    bool  _visualImageInteractionEnabled;
    long long  _vkOverlayUpdateToken;
}

@property (nonatomic, readonly) bool _allowsVKRemoveBackground;
@property (setter=_setIdentifier:, nonatomic, copy) NSString *_identifier;
@property (setter=_setUntransformedContentFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _untransformedContentFrame;
@property (nonatomic, retain) PUAssetViewModel *assetViewModel;
@property (nonatomic, retain) PUBrowsingViewModel *browsingViewModel;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PUUserTransformTileViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PUDisplayTileTransform *displayTileTransform;
@property (nonatomic, readonly) bool hasActiveTextSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <PXVKImageAnalysisInteraction> *imageInteraction;
@property (nonatomic, readonly) bool imageSubjectAnalysisAvailable;
@property (nonatomic, retain) NSTimer *pptVKAnalysWaitingTimer;
@property (readonly) Class superclass;
@property (setter=setUserInteractionEnabled:, nonatomic) bool userInteractionEnabled;
@property (setter=_setUserTransformView:, nonatomic, retain) PUUserTransformView *userTransformView;
@property (nonatomic) bool visualImageInteractionEnabled;
@property (nonatomic) long long vkOverlayUpdateToken;

- (void).cxx_destruct;
- (bool)_allowsVKRemoveBackground;
- (void)_configureVisualImageOverlay;
- (id)_createVKImageInteractionIfNeeded;
- (void)_handleAssetViewModel:(id)arg1 didChange:(id)arg2;
- (void)_handleBrowsingViewModel:(id)arg1 didChange:(id)arg2;
- (id)_identifier;
- (bool)_needsVisualImageOverlay;
- (struct CGPoint { double x1; double x2; })_pointInScrollContentViewFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_ppt_fireVKAnalysisWaitingTimer;
- (void)_ppt_resetVKAnalysisWaitingTimer;
- (void)_resetVisualImageOverlay;
- (void)_setIdentifier:(id)arg1;
- (void)_setUntransformedContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setUserTransformView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_untransformedContentFrame;
- (void)_updateUserInteractionEnabled;
- (void)_updateUserTransformPadding;
- (void)_updateUserTransformView;
- (void)_updateVisualImageOverlay;
- (id)_userInputOriginIdentifier;
- (bool)actionInfoItemExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)applyLayoutInfo:(id)arg1;
- (id)assetViewModel;
- (void)becomeReusable;
- (void)beginImageSubjectAnalysisIfNecessary;
- (id)browsingViewModel;
- (id)contentImageForImageAnalysisInteraction:(id)arg1;
- (id)contentViewForImageAnalysisInteraction:(id)arg1;
- (bool)dataDetectorExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)dealloc;
- (id)delegate;
- (void)didChangeAnimating;
- (void)didChangeVisibleRect;
- (id)displayTileTransform;
- (bool)hasActiveTextSelection;
- (void)imageAnalysisInteraction:(id)arg1 livePhotoShouldPlay:(bool)arg2;
- (bool)imageAnalysisInteraction:(id)arg1 shouldBeginAtPoint:(struct CGPoint { double x1; double x2; })arg2 forAnalysisType:(unsigned long long)arg3;
- (id)imageInteraction;
- (bool)imageSubjectAnalysisAvailable;
- (bool)imageSubjectExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithReuseIdentifier:(id)arg1;
- (bool)interactableItemExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isShowingLivePhotoForImageAnalysisInteraction:(id)arg1;
- (id)loadView;
- (id)pptVKAnalysWaitingTimer;
- (void)ppt_notifyWhenVKAnalysisIsReadyWithTimeout:(double)arg1 completionHandler:(id /* block */)arg2;
- (id)presentingViewControllerForImageAnalysisInteraction:(id)arg1;
- (void)setAssetViewModel:(id)arg1;
- (void)setBrowsingViewModel:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayTileTransform:(id)arg1;
- (void)setImageInteraction:(id)arg1;
- (void)setPptVKAnalysWaitingTimer:(id)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setVisualImageInteractionEnabled:(bool)arg1;
- (void)setVkOverlayUpdateToken:(long long)arg1;
- (bool)textExistsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)userInteractionEnabled;
- (id)userTransformView;
- (void)userTransformView:(id)arg1 didChangeIsUserInteracting:(bool)arg2;
- (void)userTransformView:(id)arg1 didChangeUserAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 isUserInteracting:(bool)arg3;
- (bool)userTransformView:(id)arg1 shouldReceiveTouchAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)viewModel:(id)arg1 didChange:(id)arg2;
- (bool)visualImageInteractionEnabled;
- (long long)vkOverlayUpdateToken;
- (bool)wantsVisibleRectChanges;

@end
