/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NotesEditor.framework/NotesEditor
 */

@interface ICAttachmentView : ICBaseAttachmentView <ICAccessibilityRotorSearchElement, ICAttachmentViewContentFrame, ICAttachmentViewInitializing, UIContextMenuInteractionDelegate, UIGestureRecognizerDelegate, UIPointerInteractionDelegate> {
    UIWindow * _actionWindow;
    UIContextMenuInteraction * _contextInteraction;
    <ICAttachmentViewDelegate> * _delegate;
    bool  _finishedInit;
    bool  _forManualRendering;
    bool  _insideSystemPaper;
    UIPanGestureRecognizer * _panGestureRecognizer;
}

@property (nonatomic, retain) UIWindow *actionWindow;
@property (nonatomic, retain) UIContextMenuInteraction *contextInteraction;
@property (nonatomic, readonly) long long dataOwnerForAttachment;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ICAttachmentViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool finishedInit;
@property (readonly) bool forManualRendering;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *icaxAttachmentViewTypeDescription;
@property (nonatomic, readonly) NSString *icaxHintString;
@property (nonatomic, readonly) bool icaxIsTextRangeSelected;
@property (nonatomic) bool insideSystemPaper;
@property (nonatomic, retain) UIPanGestureRecognizer *panGestureRecognizer;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *supportedRotorTypes;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } textRangeInNote;
@property (nonatomic, readonly) ICTextView *textView;

- (void).cxx_destruct;
- (bool)_accessibilityHasTextOperations;
- (bool)_accessibilityShouldUseViewHierarchyForFindingScrollParent;
- (bool)_accessibilitySupportsActivateAction;
- (bool)_accessibilityTextOperationAction:(id)arg1;
- (id)_accessibilityTextOperations;
- (id)_accessibilityUserTestingVisibleAncestor;
- (void)_copy;
- (id)_icaxParentTextView;
- (bool)_wantsContextMenuPreview;
- (bool)accessibilityActivate;
- (id)accessibilityContainer;
- (id)accessibilityCustomActions;
- (id)accessibilityCustomRotors;
- (id)accessibilityDragSourceDescriptors;
- (id)accessibilityDropPointDescriptors;
- (id)accessibilityHint;
- (id)accessibilityLabel;
- (id)accessibilityValue;
- (id)actionWindow;
- (bool)alertAboutUnsupportedAttachmentIfNecessary;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)contextInteraction;
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)contextMenuInteraction:(id)arg1 previewForHighlightingMenuWithConfiguration:(id)arg2;
- (void)contextMenuInteraction:(id)arg1 willDisplayMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (void)copy:(id)arg1;
- (void)copyWithCompletionBlock:(id /* block */)arg1;
- (void)cut:(id)arg1;
- (long long)dataOwnerForAttachment;
- (void)dealloc;
- (id)delegate;
- (void)delete:(id)arg1;
- (void)didTapAttachment:(id)arg1;
- (void)editAttachmentWithBlock:(id /* block */)arg1;
- (bool)finishedInit;
- (bool)forManualRendering;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForContent;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)icaxActivate;
- (id)icaxAttachmentViewTypeDescription;
- (id)icaxHintString;
- (bool)icaxIsTextRangeSelected;
- (void)icaxSelectAttachmentTextRange:(bool)arg1;
- (bool)icaxSelectAttachmentTextRangeAction;
- (id)initWithAttachment:(id)arg1 actionWindow:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 andTextAttachment:(id)arg2 forManualRendering:(bool)arg3;
- (id)initWithTextAttachment:(id)arg1 forManualRendering:(bool)arg2;
- (bool)insideSystemPaper;
- (bool)isAccessibilityElement;
- (void)openAttachment;
- (id)panGestureRecognizer;
- (id)pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3;
- (void)prepareForPrinting;
- (void)removeFromSuperview;
- (void)rename:(id)arg1;
- (void)requestEditorFirstResponder;
- (void)respondToLongPressGesture:(id)arg1;
- (void)respondToPanGesture:(id)arg1;
- (void)respondToTapGesture:(id)arg1;
- (void)setActionWindow:(id)arg1;
- (void)setAttachmentViewType:(short)arg1;
- (void)setContextInteraction:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFinishedInit:(bool)arg1;
- (void)setInsideSystemPaper:(bool)arg1;
- (void)setPanGestureRecognizer:(id)arg1;
- (void)setupConstraints;
- (void)setupEventHandling;
- (void)share:(id)arg1;
- (void)shareAttachment:(id)arg1;
- (void)shareWebLink:(id)arg1;
- (void)sharedInit:(bool)arg1;
- (bool)shouldAddMenuLongPressGesture;
- (bool)shouldAddPanGesture;
- (bool)shouldAddTapGesture;
- (void)showAttachmentsAsLargePreviews:(id)arg1;
- (void)showAttachmentsAsThumbnails:(id)arg1;
- (bool)showRecoverNoteAlertIfNecessary;
- (id)supportedRotorTypes;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRangeInNote;
- (id)textView;
- (void)updateFirstResponder;
- (void)willMoveToSuperview:(id)arg1;

@end
