/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CinematicFraming.framework/CinematicFraming
 */

@interface CinematicFramingSession : NSObject {
    struct { 
        struct { 
            /* Warning: Unrecognized filer type: '"' using 'void*' */ void*topLeft; 
        } corners; 
    }  _backProjectedDisplayViewport;
    bool  _calibrationDataRegistered;
    PerspectiveDistortionCorrectionSession * _cropSession;
    NSObject<OS_dispatch_queue> * _dataOutputDelegateQueue;
    NSString * _deviceModelName;
    CinematicDirectorSession * _directorSession;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _displayViewport;
    bool  _displayViewportTransformIsValid;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
    }  _displayViewportTransformMatrix;
    unsigned int  _exifOrientation;
    void _focusPoint;
    int  _mode;
    CinematicFramingSessionOptions * _options;
    struct { 
        int width; 
        int height; 
    }  _outputDimensions;
    struct __CVPixelBufferPool { } * _outputPixelBufferPool;
    int  _outputType;
    NSString * _portType;
    unsigned int  _roiHeatMap;
    float  _subjectOccupancyFraction;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _subjectRectangle;
}

@property (nonatomic, readonly) struct { struct { } x1; } backProjectedDisplayViewport;
@property (nonatomic) int cameraOrientation;
@property (nonatomic) bool cameraOrientationCorrectionEnabled;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } displayViewport;
@property (nonatomic, readonly) bool displayViewportTransformIsValid;
@property (nonatomic, readonly) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; } displayViewportTransformMatrix;
@property (nonatomic, readonly) unsigned int exifOrientation;
@property (nonatomic, readonly) void focusPoint;
@property (nonatomic, readonly) int mode;
@property (nonatomic, retain) CinematicFramingSessionOptions *options;
@property (nonatomic) int outputType;
@property (nonatomic, readonly) NSArray *roiHeatMapCounts;
@property (nonatomic, readonly) float subjectOccupancyFraction;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } subjectRectangle;

- (void).cxx_destruct;
- (struct opaqueCMSampleBuffer { }*)_createSampleBufferFromPixelBuffer:(struct __CVBuffer { }*)arg1 referenceSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_updateROIHeatMapCountersWithCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct { struct { } x1; })backProjectedDisplayViewport;
- (int)cameraOrientation;
- (bool)cameraOrientationCorrectionEnabled;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })displayViewport;
- (bool)displayViewportTransformIsValid;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })displayViewportTransformMatrix;
- (unsigned int)exifOrientation;
- (void)focusPoint;
- (id)init;
- (id)initWithOutputDimensions:(struct { int x1; int x2; })arg1 mode:(int)arg2 portType:(id)arg3;
- (id)initWithOutputDimensions:(struct { int x1; int x2; })arg1 mode:(int)arg2 portType:(id)arg3 deviceModelName:(id)arg4;
- (int)mode;
- (id)options;
- (int)outputType;
- (struct __CVBuffer { }*)processPixelBuffer:(struct __CVBuffer { }*)arg1 withMetadata:(id)arg2;
- (int)processPixelBuffer:(struct __CVBuffer { }*)arg1 withMetadata:(id)arg2 outputPixelBuffer:(struct __CVBuffer { }*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })processWithMetadata:(id)arg1;
- (void)reset;
- (id)roiHeatMapCounts;
- (void)setCameraOrientation:(int)arg1;
- (void)setCameraOrientationCorrectionEnabled:(bool)arg1;
- (void)setOptions:(id)arg1;
- (void)setOutputType:(int)arg1;
- (void)setZoomLevel:(float)arg1;
- (float)subjectOccupancyFraction;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })subjectRectangle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })warpBoundingBoxInFrameCoordinatesToDisplayCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (float)zoomLevel;

@end
