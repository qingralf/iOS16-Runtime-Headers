/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HearingUI.framework/HearingUI
 */

@interface HACCShortcutViewController : UIViewController <HACCContentModuleDelegate, HACCShortcutViewBackgroundDelegate, UIGestureRecognizerDelegate> {
    HACCShortcutViewBackgroundController * _backgroundController;
    struct CGPoint { 
        double x; 
        double y; 
    }  _backgroundViewDismissalOrigin;
    AXDispatchTimer * _bluetoothAvailabilityTimer;
    bool  _bluetoothAvailable;
    CCUIContentModuleContext * _contentModuleContext;
    AXRemoteHearingAidDevice * _currentHearingDevice;
    NSString * _currentOtherDeviceName;
    NSString * _currentOtherDeviceType;
    <AXHAShortcutUpdateProtocol> * _delegate;
    CCUIContentModuleDetailTransitioningDelegate * _detailTransitioningDelegate;
    double  _dismissalGestureYOffset;
    HACCContentViewController * _expandedController;
    bool  _headphoneAudioAvailable;
    bool  _listeningForHeadphoneUpdates;
    bool  _listeningForHearingAidUpdates;
    MediaControlsBluetoothListeningModeButton * _listeningModeButton;
    struct CGPoint { 
        double x; 
        double y; 
    }  _mainModuleOrigin;
    bool  _mediaIsPlaying;
    double  _moduleHeight;
    NSMutableDictionary * _moduleToViewControllerMap;
    AXDispatchTimer * _noiseControlUpdateTimer;
    CCUILabeledRoundButtonViewController * _otherDevicesButtonViewController;
    UIView * _platterView;
    UIScrollView * _scrollView;
    bool  _shouldDisplayOtherDevice;
    HACCStackView * _stackView;
}

@property (nonatomic, retain) HACCShortcutViewBackgroundController *backgroundController;
@property (nonatomic) bool bluetoothAvailable;
@property (nonatomic, retain) CCUIContentModuleContext *contentModuleContext;
@property (nonatomic, retain) AXRemoteHearingAidDevice *currentHearingDevice;
@property (nonatomic, retain) NSString *currentOtherDeviceName;
@property (nonatomic, retain) NSString *currentOtherDeviceType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AXHAShortcutUpdateProtocol> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) HACCContentViewController *expandedController;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool headphoneAudioAvailable;
@property (nonatomic) bool listeningForHeadphoneUpdates;
@property (nonatomic) bool listeningForHearingAidUpdates;
@property (nonatomic, retain) NSMutableDictionary *moduleToViewControllerMap;
@property (nonatomic, retain) CCUILabeledRoundButtonViewController *otherDevicesButtonViewController;
@property (nonatomic, retain) UIView *platterView;
@property (nonatomic, retain) UIScrollView *scrollView;
@property (nonatomic) bool shouldDisplayOtherDevice;
@property (nonatomic, retain) HACCStackView *stackView;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_canShowWhileLocked;
- (void)_logLiveListenAnalytics;
- (bool)addPartialSeparatorAboveModule:(unsigned long long)arg1;
- (bool)addSeparatorAboveModule:(unsigned long long)arg1;
- (id)backgroundController;
- (id)backgroundUpdateQueue;
- (void)bluetoothAvailabilityDidChange:(id)arg1;
- (bool)bluetoothAvailable;
- (void)contentCategoryDidChange:(id)arg1;
- (id)contentModuleContext;
- (void)controlDidActivate:(id)arg1;
- (id)currentHearingDevice;
- (id)currentOtherDeviceName;
- (id)currentOtherDeviceType;
- (id)delegate;
- (id)expandedController;
- (bool)headphoneAudioAvailable;
- (id)initWithDelegate:(id)arg1;
- (bool)isExpanded;
- (void)listenForHearingAidUpdates;
- (bool)listeningForHeadphoneUpdates;
- (bool)listeningForHearingAidUpdates;
- (id)listeningMode;
- (void)listeningModeButtonDidUpdateValue:(id)arg1;
- (void)mediaPlaybackDidChange:(id)arg1;
- (void)mediaServerDied;
- (double)moduleHeight;
- (id)moduleToViewControllerMap;
- (void)otherDeviceButtonTapped:(id)arg1;
- (id)otherDevicesButtonViewController;
- (id)platterView;
- (double)preferredContentWidth;
- (double)preferredExpandedContentHeight;
- (void)quickToggle:(unsigned long long)arg1 stateChanged:(bool)arg2;
- (void)registerNotifications;
- (id)scrollView;
- (void)setBackgroundController:(id)arg1;
- (void)setBluetoothAvailable:(bool)arg1;
- (void)setContentModuleContext:(id)arg1;
- (void)setCurrentHearingDevice:(id)arg1;
- (void)setCurrentOtherDeviceName:(id)arg1;
- (void)setCurrentOtherDeviceType:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpandedController:(id)arg1;
- (void)setHeadphoneAudioAvailable:(bool)arg1;
- (void)setListeningForHeadphoneUpdates:(bool)arg1;
- (void)setListeningForHearingAidUpdates:(bool)arg1;
- (bool)setListeningMode:(id)arg1;
- (void)setModuleToViewControllerMap:(id)arg1;
- (void)setOtherDevicesButtonViewController:(id)arg1;
- (void)setPlatterView:(id)arg1;
- (void)setScrollView:(id)arg1;
- (void)setShouldDisplayOtherDevice:(bool)arg1;
- (void)setStackView:(id)arg1;
- (bool)shouldDisplayControlForModule:(unsigned long long)arg1;
- (bool)shouldDisplayDeviceToggle;
- (bool)shouldDisplayOtherDevice;
- (bool)shouldDisplayQuickToggleFor:(unsigned long long)arg1;
- (bool)shouldShowNoiseControl;
- (id)stackView;
- (void)startListeningForHeadphoneUpdates;
- (void)stopListeningForHeadphoneUpdates;
- (void)updateAvailableControls;
- (void)updateNoiseControl:(id)arg1;
- (void)updateRoutes;
- (void)updateView;
- (void)updateViewForModule:(unsigned long long)arg1;
- (void)updateViewForProperties:(id)arg1;
- (void)viewController:(id)arg1 didExpand:(bool)arg2;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
