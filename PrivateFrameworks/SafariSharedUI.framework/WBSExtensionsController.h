/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI
 */

@interface WBSExtensionsController : NSObject {
    NSArray * _allDiscoveredExtensions;
    WBSExtensionsAnalyticsEventCoalescer * _analyticsEventCoalescer;
    NSMutableDictionary * _baseURIHostToExtensionIdentifier;
    NSMutableSet * _blockedExtensions;
    <WBSExtensionsControllerDelegate> * _delegate;
    NSTimer * _deleteStateForRemovedExtensionsTimer;
    NSMutableSet * _enabledExtensions;
    NSMutableDictionary * _extensionIdentifierToBaseURIMap;
    NSMutableDictionary * _extensionIdentifierToStateMap;
    id  _extensionMatchingContext;
    NSMutableDictionary * _extensionUniqueIdentifierToExtensionDataMap;
    NSMutableArray * _extensions;
    bool  _extensionsEnabled;
    bool  _loadEnabledExtensionsWasCalled;
    bool  _loadingDiscoveredExtensions;
    bool  _loadingEnabledExtensionsAtStartup;
    NSPointerArray * _observers;
    NSMutableSet * _replacedExtensions;
}

@property (nonatomic, readonly) WBSExtensionsAnalyticsEventCoalescer *analyticsEventCoalescer;
@property (nonatomic) <WBSExtensionsControllerDelegate> *delegate;
@property (nonatomic, readonly, copy) NSArray *enabledExtensions;
@property (nonatomic, readonly, copy) NSDictionary *extensionIdentifierToBaseURIMap;
@property (nonatomic, readonly, copy) NSMutableArray *extensions;
@property (nonatomic, readonly) bool extensionsEnabled;
@property (nonatomic, readonly) bool hasAnyEnabledExtensions;
@property (nonatomic, readonly) bool loadEnabledExtensionsWasCalled;
@property (nonatomic, readonly) bool loadingEnabledExtensionsAtStartup;

// Image: /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI

+ (id)_bundleIdentifierFromComposedIdentifier:(id)arg1;
+ (id)_composedIdentifierForStateOfExtensionWithBundleIdentifier:(id)arg1 developerIdentifier:(id)arg2;
+ (Class)_extensionDataClass;
+ (id)_extensionDefaults;
+ (id)_extensionFromComposedIdentifier:(id)arg1;
+ (id)_extensionPointIdentifier;
+ (bool)_initializeExtensionData:(id)arg1 forExtension:(id)arg2;
+ (id)_skipLoadingEnabledExtensionsAtLaunchPreferenceKey;
+ (id)_urlForExtensionSettings;
+ (id)extensionIdentifierToBaseURIMapBundleParameterKey;
+ (id)extensionURLScheme;
+ (id)extensionsCrashReporterMessageBundleParameterKey;
+ (bool)hasBlockedPromptAppearedForExtensionWithIdentifier:(id)arg1;
+ (void)removeExtensionBundleIDFromArrayOfBlocklistedExtensions:(id)arg1;

- (void).cxx_destruct;
- (void)_addExtensionToBaseURIMap:(id)arg1 withResourceURL:(id)arg2;
- (void)_beginExtensionDiscovery;
- (void)_blockExtension:(id)arg1;
- (bool)_canAccessExtensionsDataInStorage;
- (id)_computeCodeSigningDictionaryOnDiskForExtension:(id)arg1 attemptRetryOnFailure:(bool)arg2;
- (void)_connectToExtensionForValidation:(id)arg1 untrustedCodeSigningDictionary:(id)arg2 attemptRetryOnFailure:(bool)arg3;
- (void)_deferAccessToExtensionsDataInStorageDuringLoad:(bool)arg1;
- (void)_deleteStateForExtensionWithComposedIdentifier:(id)arg1;
- (void)_deleteStateForRemovedExtensions;
- (void)_deleteStateForRemovedExtensionsAfterDelay:(double)arg1;
- (void)_deleteStateForRemovedExtensionsSoon;
- (void)_deleteStateForRemovedExtensionsTimerFired:(id)arg1;
- (void)_deleteStorageForExtensionWithComposedIdentifier:(id)arg1;
- (id)_developerIdentifierForExtension:(id)arg1;
- (void)_didDiscoverExtensionCount:(int)arg1;
- (void)_disableAndBlockExtension:(id)arg1;
- (id)_displayNameForExtension:(id)arg1;
- (id)_displayShortNameForExtension:(id)arg1;
- (id)_displayVersionForExtension:(id)arg1;
- (void)_enableExtension:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_extensionShouldBeAutomaticallyEnabled:(id)arg1;
- (bool)_extensionShouldBeEnabled:(id)arg1;
- (id)_extensionStateForExtension:(id)arg1;
- (void)_extensionsWereGloballyDisabled;
- (void)_extensionsWereGloballyEnabled;
- (id)_generateBaseURIForExtension:(id)arg1;
- (bool)_isExtensionBlockedByBlocklist:(id)arg1 developerIdentifier:(id)arg2;
- (void)_loadEnabledExtension:(id)arg1;
- (void)_loadExtensions:(id)arg1;
- (void)_notifyObserversContentBlockerListDidChange;
- (void)_removeSafariExtensionDataForExtension:(id)arg1;
- (void)_replaceExtensionsObsoletedByExtension:(id)arg1 developerIdentifier:(id)arg2;
- (void)_setExtensionIdentifierToStateMap:(id)arg1 forExtensionWithComposedIdentifier:(id)arg2;
- (void)_setExtensionIdentifierToStateMap:(id)arg1 forExtensionWithComposedIdentifier:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_setExtensionState:(id)arg1 forExtension:(id)arg2;
- (void)_setExtensionState:(id)arg1 forExtension:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_showNewExtensionBannerIfNecessaryForExtensions:(id)arg1;
- (void)_unloadPreviouslyEnabledExtension:(id)arg1;
- (void)_updateExtensionNewTabPageIfNecessary;
- (void)_updateExtensionStateAfterExtensionWasAddedWithComposedIdentifier:(id)arg1;
- (void)_updateExtensionStateAfterExtensionWasRemovedWithComposedIdentifier:(id)arg1;
- (void)_updateExtensionStateIfPermissionsIncreased:(id)arg1;
- (void)_updateExtensionStateIfThisVersionOfSafariIsNotSupported:(id)arg1;
- (void)_updateExtensionsCrashReporterMessage;
- (id)_updatedExtensionStateForCurrentPermissions:(id)arg1 previousExtensionState:(id)arg2;
- (void)_validateAndLoadExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(bool)arg2 isExtensionNewlyInstalled:(bool*)arg3;
- (void)_validateContainingAppOfExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(bool)arg2;
- (id)_versionNumberForExtension:(id)arg1;
- (void)_writeExtensionsStateToStorage;
- (void)addObserver:(id)arg1;
- (id)analyticsEventCoalescer;
- (id)composedIdentifierForExtensionStateForExtension:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)disableUnsignedExtensionsIfNecessary;
- (id)enabledExtensions;
- (id)extensionDataForExtension:(id)arg1;
- (id)extensionIdentifierToBaseURIMap;
- (bool)extensionIsEnabled:(id)arg1;
- (id)extensionWithBaseURIHost:(id)arg1;
- (id)extensionWithBundleIdentifier:(id)arg1;
- (id)extensionWithComposedIdentifier:(id)arg1;
- (id)extensionWithUUID:(id)arg1;
- (id)extensions;
- (bool)extensionsEnabled;
- (void)findExtensions;
- (bool)hasAnyEnabledExtensions;
- (bool)hasAnyEnabledExtensionsInStorage;
- (id)init;
- (id)lastSeenBaseURIForExtension:(id)arg1 updatingWithCurrentBaseURI:(id)arg2;
- (void)loadEnabledExtensions;
- (bool)loadEnabledExtensionsWasCalled;
- (void)loadSuitableDiscoveredExtensions;
- (bool)loadingEnabledExtensionsAtStartup;
- (void)moveLocalStorageForExtension:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)readExtensionsStateFromStorage;
- (void)removeObserver:(id)arg1;
- (void)resetExtensionsState;
- (void)setDelegate:(id)arg1;
- (void)setExtension:(id)arg1 isEnabled:(bool)arg2;
- (void)setExtension:(id)arg1 isEnabled:(bool)arg2 dueToUserGesture:(bool)arg3 skipSavingToStorage:(bool)arg4;
- (void)setExtension:(id)arg1 isEnabled:(bool)arg2 skipSavingToStorage:(bool)arg3;
- (void)test_enableExtension:(id)arg1 withResourceURL:(id)arg2;
- (void)unloadExtensionIfNecessary:(id)arg1;
- (bool)validateAndReadResourceWithExtensionURL:(id)arg1 inExtension:(id)arg2 codeRef:(struct __SecCode { }*)arg3 outResourceData:(id*)arg4;
- (bool)validateAndReadResourceWithExtensionURL:(id)arg1 inExtension:(id)arg2 outResourceData:(id*)arg3;
- (bool)validateAndReadResourceWithExtensionURL:(id)arg1 outResourceData:(id*)arg2;
- (void)writeExtensionsStateToStorageWithCompletionHandler:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari

+ (id)webExtensionsController;

@end
