/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
 */

@interface MPCPlaybackEngine : NSObject <MPCExplicitContentAuthorizationDelegate> {
    _MPCPlaybackAccountManager * _accountManager;
    MPCAudioSpectrumAnalyzer * _audioAnalyzer;
    bool  _audioAnalyzerEnabled;
    NSString * _audioSessionCategory;
    unsigned long long  _audioSessionOptions;
    <MPCPlaybackEngineDelegate> * _delegate;
    NSString * _engineID;
    MPProtocolProxy<MPCPlaybackEngineEventObserving> * _eventObserver;
    MPCPlaybackEngineEventStream * _eventStream;
    _MPCFairPlayPerformanceController * _fairPlayPerformanceController;
    MPCPlaybackIntent * _fallbackPlaybackIntent;
    <MPCPlaybackEngineImplementation> * _implementation;
    <MPCPlaybackEngineInitializationParameters> * _initializationParameters;
    _MPCLeaseManager * _leaseManager;
    _MPCMediaRemotePublisher * _mediaRemotePublisher;
    _MPCMusicPlayerControllerServer * _musicPlayerControllerServer;
    bool  _needsUISnapshot;
    bool  _pictureInPictureSupported;
    NSString * _playerID;
    bool  _queueHandoffSupported;
    _MPCReportingController * _reportingController;
    bool  _scheduledPlaybackStatePreservation;
    _MPCPlaybackEngineSessionManager * _sessionManager;
    bool  _started;
    bool  _stateRestorationSupported;
    bool  _systemMusicApplication;
    <MPCVideoOutput> * _videoOutput;
    bool  _videoSupported;
}

@property (nonatomic, readonly) _MPCPlaybackAccountManager *accountManager;
@property (nonatomic, readonly) MPCAudioSpectrumAnalyzer *audioAnalyzer;
@property (getter=isAudioAnalyzerEnabled, nonatomic) bool audioAnalyzerEnabled;
@property (nonatomic, copy) NSString *audioSessionCategory;
@property (nonatomic) unsigned long long audioSessionOptions;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MPCPlaybackEngineDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSString *engineID;
@property (nonatomic, readonly) MPProtocolProxy<MPCPlaybackEngineEventObserving> *eventObserver;
@property (nonatomic, readonly) MPCPlaybackEngineEventStream *eventStream;
@property (nonatomic, readonly) _MPCFairPlayPerformanceController *fairPlayPerformanceController;
@property (nonatomic, retain) MPCPlaybackIntent *fallbackPlaybackIntent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <MPCPlaybackEngineImplementation> *implementation;
@property (nonatomic, readonly) <MPCPlaybackEngineInitializationParameters> *initializationParameters;
@property (nonatomic, readonly) _MPCLeaseManager *leaseManager;
@property (nonatomic, readonly) _MPCMediaRemotePublisher *mediaRemotePublisher;
@property (nonatomic, readonly) _MPCMusicPlayerControllerServer *musicPlayerControllerServer;
@property (nonatomic) bool needsUISnapshot;
@property (getter=isPictureInPictureSupported, nonatomic) bool pictureInPictureSupported;
@property (nonatomic, readonly, copy) NSString *playerID;
@property (nonatomic, readonly) MPCPlayerPath *playerPath;
@property (getter=isQueueHandoffSupported, nonatomic) bool queueHandoffSupported;
@property (nonatomic, readonly) _MPCReportingController *reportingController;
@property (getter=hasScheduledPlaybackStatePreservation, nonatomic) bool scheduledPlaybackStatePreservation;
@property (nonatomic, readonly) NSXPCListenerEndpoint *serverEndpoint;
@property (nonatomic, readonly) _MPCPlaybackEngineSessionManager *sessionManager;
@property (getter=isStarted, nonatomic, readonly) bool started;
@property (getter=isStateRestorationSupported, nonatomic) bool stateRestorationSupported;
@property (readonly) Class superclass;
@property (getter=isSystemMusicApplication, nonatomic) bool systemMusicApplication;
@property (nonatomic, readonly) <MPCVideoOutput> *videoOutput;
@property (getter=isVideoSupported, nonatomic) bool videoSupported;

+ (void)preheatPlayback;
+ (bool)requiresMainThread;

- (void).cxx_destruct;
- (void)_detectCrashLoopForSessionIdentifier:(id)arg1 block:(id /* block */)arg2;
- (void)_initializePlaybackStack;
- (void)_screenBrightnessDidChangeNotification:(id)arg1;
- (bool)_shouldIgnorePlaybackSessionError:(id)arg1;
- (void)_updateUISnapshotIfNeeded;
- (id)accountManager;
- (void)addEngineObserver:(id)arg1;
- (id)audioAnalyzer;
- (id)audioSessionCategory;
- (unsigned long long)audioSessionOptions;
- (void)becomeActive;
- (void)dealloc;
- (id)delegate;
- (id)engineID;
- (id)eventObserver;
- (id)eventStream;
- (id)fairPlayPerformanceController;
- (id)fallbackPlaybackIntent;
- (bool)hasScheduledPlaybackStatePreservation;
- (id)implementation;
- (id)initWithParameters:(id)arg1;
- (id)initWithPlayerID:(id)arg1;
- (id)initializationParameters;
- (void)invalidate;
- (bool)isAudioAnalyzerEnabled;
- (bool)isPictureInPictureSupported;
- (bool)isQueueHandoffSupported;
- (bool)isStarted;
- (bool)isStateRestorationSupported;
- (bool)isSystemMusicApplication;
- (bool)isVideoSupported;
- (id)leaseManager;
- (id)mediaRemotePublisher;
- (id)musicPlayerControllerServer;
- (bool)needsUISnapshot;
- (id)playerID;
- (id)playerPath;
- (void)removeEngineObserver:(id)arg1;
- (void)reportUserBackgroundedApplication;
- (void)reportUserSeekFromTime:(double)arg1 toTime:(double)arg2;
- (id)reportingController;
- (void)requestAuthorizationForExplicitItem:(id)arg1 reason:(long long)arg2 completion:(id /* block */)arg3;
- (void)restoreStateWithCompletion:(id /* block */)arg1;
- (void)schedulePlaybackStatePreservation;
- (id)serverEndpoint;
- (id)sessionManager;
- (void)setAudioAnalyzerEnabled:(bool)arg1;
- (void)setAudioSessionCategory:(id)arg1;
- (void)setAudioSessionOptions:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFallbackPlaybackIntent:(id)arg1;
- (void)setNeedsUISnapshot:(bool)arg1;
- (void)setPictureInPictureSupported:(bool)arg1;
- (void)setQueueHandoffSupported:(bool)arg1;
- (void)setScheduledPlaybackStatePreservation:(bool)arg1;
- (void)setStateRestorationSupported:(bool)arg1;
- (void)setSystemMusicApplication:(bool)arg1;
- (void)setVideoSupported:(bool)arg1;
- (void)start;
- (id)videoOutput;

@end
