/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextRecognition.framework/TextRecognition
 */

@interface CRTextFeature : NSObject <NSCoding, NSCopying> {
    bool  _appliedOrientationCorrection;
    float  _baselineAngle;
    struct CGPoint { 
        double x; 
        double y; 
    }  _baselineOrigin;
    long long  _bestCandidateIndex;
    struct CGPoint { 
        double x; 
        double y; 
    }  _bottomLeft;
    struct CGPoint { 
        double x; 
        double y; 
    }  _bottomRight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    NSArray * _candidateActivationProbs;
    NSArray * _candidateProbs;
    NSNumber * _confidence;
    bool  _contextSet;
    int  _featureID;
    int  _featureMapID;
    NSString * _gtStringValue;
    CRImage * _imageCut;
    bool  _isCurve;
    unsigned long long  _lineWrappingType;
    CRNormalizedPolyline * _polygon;
    NSArray * _scriptCategoryResults;
    NSArray * _scriptCount;
    NSString * _selectedLocale;
    NSString * _sequenceScriptOutputResult;
    bool  _shouldExpandToFullWidth;
    unsigned char  _sizeHint;
    NSString * _stringValue;
    NSArray * _stringValueCandidates;
    NSArray * _subFeatureCandidates;
    NSArray * _subFeatures;
    float  _textlineHeight;
    struct CGPoint { 
        double x; 
        double y; 
    }  _topLeft;
    struct CGPoint { 
        double x; 
        double y; 
    }  _topRight;
    struct CGPoint { 
        double x; 
        double y; 
    }  _toplineOrigin;
    unsigned long long  _type;
    bool  _useSequenceScriptLocale;
    NSUUID * _uuid;
    bool  _whitespaceInjected;
}

@property bool appliedOrientationCorrection;
@property float baselineAngle;
@property (readonly) struct CGPoint { double x1; double x2; } baselineOrigin;
@property long long bestCandidateIndex;
@property struct CGPoint { double x1; double x2; } bottomLeft;
@property struct CGPoint { double x1; double x2; } bottomRight;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (retain) NSArray *candidateActivationProbs;
@property (retain) NSArray *candidateProbs;
@property (retain) NSNumber *confidence;
@property bool contextSet;
@property int featureID;
@property int featureMapID;
@property (nonatomic, retain) NSString *gtStringValue;
@property (retain) CRImage *imageCut;
@property bool isCurve;
@property unsigned long long lineWrappingType;
@property (retain) CRNormalizedPolyline *polygon;
@property (retain) NSArray *scriptCategoryResults;
@property (retain) NSArray *scriptCount;
@property (retain) NSString *selectedLocale;
@property (retain) NSString *sequenceScriptOutputResult;
@property bool shouldExpandToFullWidth;
@property unsigned char sizeHint;
@property (nonatomic, retain) NSString *stringValue;
@property (retain) NSArray *stringValueCandidates;
@property (retain) NSArray *subFeatureCandidates;
@property (readonly) unsigned long long subFeatureType;
@property (retain) NSArray *subFeatures;
@property float textlineHeight;
@property struct CGPoint { double x1; double x2; } topLeft;
@property struct CGPoint { double x1; double x2; } topRight;
@property (readonly) struct CGPoint { double x1; double x2; } toplineOrigin;
@property unsigned long long type;
@property bool useSequenceScriptLocale;
@property (retain) NSUUID *uuid;
@property bool whitespaceInjected;

+ (id)lineFeatures:(id)arg1 imageWidth:(unsigned long long)arg2 imageHeight:(unsigned long long)arg3;
+ (id)overlayFeatures:(id)arg1 onImage:(id)arg2 showSubFeatures:(bool)arg3;
+ (id)overlayFeaturesPolygonVertices:(id)arg1 onImage:(id)arg2 showSubFeatures:(bool)arg3;
+ (id)overlayFeaturesQuadVertices:(id)arg1 onImage:(id)arg2 showSubFeatures:(bool)arg3;
+ (id)sortedRotateTextFeatures:(id)arg1 center:(struct CGPoint { double x1; double x2; })arg2 radians:(float)arg3 sortingWithinLine:(bool)arg4;
+ (id)sortedTextFeatures:(id)arg1;
+ (id)sortedTextFeaturesByAspectRatio:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2;

- (void).cxx_destruct;
- (void)addKohlsDigitProjection;
- (void)adjustBoundsBasedOnSubfeaturesForImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)appendTextFeature:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)appliedOrientationCorrection;
- (float)aspectRatioWithImageSize:(struct CGSize { double x1; double x2; })arg1;
- (float)baselineAngle;
- (struct CGPoint { double x1; double x2; })baselineOrigin;
- (long long)bestCandidateIndex;
- (struct CGPoint { double x1; double x2; })bottomLeft;
- (struct CGPoint { double x1; double x2; })bottomRight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (float)calculateTextBoxHeightForImageWidth:(unsigned long long)arg1 imageHeight:(unsigned long long)arg2;
- (id)candidateActivationProbs;
- (id)candidateProbs;
- (float)caseInsensitiveProbabilityCandidateIndex:(int)arg1;
- (id)confidence;
- (bool)contextSet;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)createCharacterSubFeaturesForCandidateAtIndex:(long long)arg1;
- (id)createCharacterSubFeaturesForCandidateAtIndex:(long long)arg1 topWhiteSpacePoints:(id)arg2 bottomWhiteSpacePoints:(id)arg3 falsePositiveFiltering:(bool)arg4;
- (id)createSubFeaturesFromStringsForCandidateAtIndex:(long long)arg1 topWhiteSpacePoints:(id)arg2 bottomWhiteSpacePoints:(id)arg3 hasBoundarySpacePoints:(bool)arg4 hasCharacterAndWordBoundaries:(bool)arg5;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)estimateTopAndBaseline;
- (int)featureID;
- (int)featureMapID;
- (void)flipHorizontally;
- (struct CGPoint { double x1; double x2; })getBaselineVector;
- (id)gtStringValue;
- (id)imageCut;
- (id)initWithCCFeatureRect:(id)arg1 subFeatureRects:(id)arg2 rotatePortrait:(bool)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFeatureRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inImage:(id)arg2;
- (id)initWithFeatureRect:(id)arg1 subFeatureRects:(id)arg2;
- (id)initWithFeatureRect:(id)arg1 subFeatureRects:(id)arg2 inImage:(id)arg3;
- (id)initWithSubfeatures:(id)arg1;
- (id)initWithSubfeatures:(id)arg1 stringValue:(id)arg2;
- (id)initWithTopLeft:(struct CGPoint { double x1; double x2; })arg1 topRight:(struct CGPoint { double x1; double x2; })arg2 bottomLeft:(struct CGPoint { double x1; double x2; })arg3 bottomRight:(struct CGPoint { double x1; double x2; })arg4;
- (bool)isCurve;
- (bool)isDown;
- (bool)isUp;
- (unsigned long long)lineWrappingType;
- (id)polygon;
- (void)scale:(struct CGPoint { double x1; double x2; })arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (id)scriptCategoryResults;
- (id)scriptCount;
- (id)selectedLocale;
- (id)sequenceScriptOutputResult;
- (void)setAppliedOrientationCorrection:(bool)arg1;
- (void)setBaselineAngle:(float)arg1;
- (void)setBaselineOrigin:(struct CGPoint { double x1; double x2; })arg1 toplineOrigin:(struct CGPoint { double x1; double x2; })arg2 slope:(float)arg3;
- (void)setBestCandidateIndex:(long long)arg1;
- (void)setBottomLeft:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBottomRight:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCandidateActivationProbs:(id)arg1;
- (void)setCandidateProbs:(id)arg1;
- (void)setConfidence:(id)arg1;
- (void)setContextSet:(bool)arg1;
- (void)setFeatureID:(int)arg1;
- (void)setFeatureMapID:(int)arg1;
- (void)setGtStringValue:(id)arg1;
- (void)setImageCut:(id)arg1;
- (void)setIsCurve:(bool)arg1;
- (void)setLineWrappingType:(unsigned long long)arg1;
- (void)setPolygon:(id)arg1;
- (void)setScriptCategoryResults:(id)arg1;
- (void)setScriptCount:(id)arg1;
- (void)setSelectedLocale:(id)arg1;
- (void)setSelectedLocale:(id)arg1 includeSubfeatures:(bool)arg2;
- (void)setSequenceScriptOutputResult:(id)arg1;
- (void)setShouldExpandToFullWidth:(bool)arg1;
- (void)setSizeHint:(unsigned char)arg1;
- (void)setStringValue:(id)arg1;
- (void)setStringValueByReplacingCharactersInSet:(id)arg1 withString:(id)arg2;
- (void)setStringValueCandidates:(id)arg1;
- (void)setSubFeatureCandidates:(id)arg1;
- (void)setSubFeatures:(id)arg1;
- (void)setTextlineHeight:(float)arg1;
- (void)setTopLeft:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTopRight:(struct CGPoint { double x1; double x2; })arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setUseSequenceScriptLocale:(bool)arg1;
- (void)setUuid:(id)arg1;
- (void)setWhitespaceInjected:(bool)arg1;
- (bool)shouldExpandToFullWidth;
- (struct CGSize { double x1; double x2; })sizeForImageSize:(struct CGSize { double x1; double x2; })arg1;
- (unsigned char)sizeHint;
- (float)slopeOfSubFeatures;
- (void)sortSubfeaturesInReadingOrderImageSize:(struct CGSize { double x1; double x2; })arg1;
- (id)stringValue;
- (id)stringValueCandidates;
- (id)subFeatureCandidates;
- (unsigned long long)subFeatureType;
- (id)subFeatures;
- (id)textFeatureScaledToImage:(id)arg1;
- (id)textFeatureScaledToImageWidth:(float)arg1 height:(float)arg2;
- (id)textFeatureSplitForStringValue:(id)arg1;
- (id)textFeaturebyPaddingToWidth:(float)arg1 height:(float)arg2;
- (float)textlineHeight;
- (struct CGPoint { double x1; double x2; })topLeft;
- (struct CGPoint { double x1; double x2; })topRight;
- (struct CGPoint { double x1; double x2; })toplineOrigin;
- (unsigned long long)type;
- (void)updateSizeHints;
- (bool)useSequenceScriptLocale;
- (id)uuid;
- (bool)whitespaceInjected;
- (id)wordFeatures;

@end
