/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextRecognition.framework/TextRecognition
 */

@interface CRNeuralTextDetectorV3 : CRNeuralTextDetector {
    CRTextDetectorModelV3 * _model;
}

@property (retain) CRTextDetectorModelV3 *model;

+ (void)aggregateRegionMap:(id)arg1 affinityMap:(id)arg2 scriptMap:(id)arg3 linkMap:(id)arg4 targetSize:(struct CGSize { double x1; double x2; })arg5 outputRegionMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg6 outputAffinityMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg7 outputScriptMap:(void*)arg8 outputLinkMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg9 outputOrigin:(struct CGPoint { double x1; double x2; })arg10;
+ (void)calculateTargetOutputSize:(struct CGSize { double x1; double x2; }*)arg1 adjustedInputScale:(double*)arg2 paddedSize:(struct CGSize { double x1; double x2; }*)arg3 imageSize:(struct CGSize { double x1; double x2; })arg4 maximumSize:(struct CGSize { double x1; double x2; })arg5 minimumSize:(struct CGSize { double x1; double x2; })arg6 inputLengthLimit:(double)arg7;
+ (struct unique_ptr<CRImageBuffer, std::default_delete<CRImageBuffer>> { struct __compressed_pair<CRImageBuffer *, std::default_delete<CRImageBuffer>> { struct CRImageBuffer {} *x_1_1_1; } x1; })createImageMap:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct CGSize { double x1; double x2; })scaledImageSizeForConfiguration:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct CGSize { double x1; double x2; })scaledImageSizeForMaxSize:(struct CGSize { double x1; double x2; })arg1 minSize:(struct CGSize { double x1; double x2; })arg2 inputLengthLimit:(double)arg3 imageSize:(struct CGSize { double x1; double x2; })arg4 scale:(double*)arg5;

- (void).cxx_destruct;
- (id)detectInImage:(id)arg1 error:(id*)arg2;
- (id)enumerateTilesForImage:(id)arg1 guidedByScoreMapFullTile:(void*)arg2 block:(id /* block */)arg3;
- (id)init;
- (id)initWithConfiguration:(id)arg1 error:(id*)arg2;
- (id)model;
- (bool)preheatWithError:(id*)arg1;
- (id)processRegionMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 affinityMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg2 linkMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg3 adjustedSize:(struct CGSize { double x1; double x2; })arg4 regionMapFullTile:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg5 affinityMapFullTile:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg6 linkMapFullTile:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg7 adjustedFullTileSize:(struct CGSize { double x1; double x2; })arg8 targetSize:(struct CGSize { double x1; double x2; })arg9 targetSizeFullTile:(struct CGSize { double x1; double x2; })arg10 intermediateResults:(id*)arg11 withScaleIds:(void*)arg12 sourceImageSize:(struct CGSize { double x1; double x2; })arg13 tileRects:(id)arg14;
- (void)setModel:(id)arg1;
- (struct CGSize { double x1; double x2; })smallestImageSizeForTextWithRelativeHeight:(double)arg1 originalImageSize:(struct CGSize { double x1; double x2; })arg2;

@end
