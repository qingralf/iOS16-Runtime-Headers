/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience
 */

@interface MXCoreSession : MXCoreSessionBase {
    NSDictionary * _activationContext;
    NSArray * _activeRoutesWhenInterrupted;
    bool  _addSharedAudioRouteToRoutablePorts;
    NSString * _aggregateDeviceClockUID;
    bool  _allowMixableAudioWhileRecording;
    bool  _allowSystemSoundsWhileRecording;
    NSArray * _allowedPortTypes;
    NSArray * _allowedRouteTypes;
    bool  _allowedToBeNowPlayingApp;
    bool  _allowsBluetoothRecordingCustomization;
    bool  _allowsDefaultBuiltInRouteCustomization;
    unsigned int  _applicationState;
    NSDictionary * _audioBehaviour;
    NSArray * _audioDestinationPriority;
    bool  _audioHWControlFlagsSetByClient;
    float  _audioQueueDuckVolume;
    float  _audioQueueFadeDuration;
    struct { 
        unsigned int val[8]; 
    }  _auditToken;
    bool  _auditTokenSetByClient;
    NSDictionary * _bundleIdToPAAccessIntervalMap;
    NSDictionary * _cameraParameters;
    bool  _clientIsPlaying;
    unsigned int  _clientPriority;
    bool  _createSpeakerDevice;
    unsigned int  _currentlyControllingFlags;
    int  _deactivateTimerDelay;
    NSString * _defaultBuiltInRoutePreference;
    bool  _defaultBuiltInRoutePreferenceSetByClient;
    NSString * _defaultVPChatMode;
    NSNumber * _desiredInputGainScalar;
    bool  _disallowAudioFormatChanges;
    bool  _doNotNotifyOtherSessionsOnNextInactive;
    bool  _doNotResetAudioCategoryOnNextInactive;
    bool  _doesInterAppAudio;
    bool  _doesntActuallyPlayAudio;
    bool  _dontTakeOverHardware;
    bool  _duckCommandSentToCarSession;
    float  _duckFadeDuration;
    bool  _duckFadeDurationSetByClient;
    float  _duckToLevelDB;
    bool  _duckToLevelDBSetByClient;
    float  _duckToLevelScalar;
    bool  _duckToLevelScalarSetByClient;
    bool  _duckedOnVAD;
    NSArray * _duckerSourceAudioBudgetRef;
    NSArray * _duckerSourceSessionRef;
    NSArray * _duckerSourceSystemSoundRef;
    bool  _enableBluetoothRecordingPreference;
    bool  _enableBluetoothRecordingPreferenceSetByClient;
    NSArray * _excludedPortsList;
    NSObject<OS_dispatch_source> * _extendBackgroundAppAssertionTimer;
    bool  _forceSoundCheck;
    bool  _handsOverInterruptionsToInterruptor;
    bool  _hapticEngineIsPlaying;
    bool  _hasEntitlementToRecordAudioInAnExtension;
    bool  _hasEntitlementToRecordDuringCall;
    bool  _hasEntitlementToSetEmergencyAlertPriority;
    bool  _hasEntitlementToStartRecordingInTheBackground;
    bool  _hasEntitlementToSupportProcessAssertionAuditTokens;
    bool  _hasEntitlementToSuppressRecordingStateToSystemStatus;
    bool  _hasFetchedBackgroundPrivileges;
    bool  _hasFetchedGPSPrivileges;
    bool  _hasGPSPrivileges;
    bool  _hasInput;
    bool  _hasPhoneCallBehavior;
    NSArray * _hostProcessAttribution;
    NSArray * _hostProcessInfo;
    NSDictionary * _hostProcessPlaybackAssertions;
    unsigned int  _hwControlFlags;
    unsigned int  _idleSleepPreventor;
    bool  _idleSleepPreventorAllocated;
    NSDate * _idleSleepPreventorCreationTime;
    NSString * _idleSleepPreventorName;
    NSObject<OS_dispatch_source> * _idleSleepPreventorUpdaterTimer;
    bool  _ignoreRingerSwitch;
    NSObject<OS_dispatch_source> * _interruptSessionWithoutValidAssertionsTimer;
    MXCoreSession * _interruptingSession;
    bool  _interruptionFadeDurationSetByClient;
    unsigned int  _interruptionStyle;
    bool  _interruptionStyleSetByClient;
    bool  _isActiveOverAirPlayVideo;
    bool  _isAllowedToPlayInBackground;
    bool  _isAudioOnlyAirPlayVideoActive;
    bool  _isAudioSession;
    bool  _isCarSession;
    bool  _isDucked;
    bool  _isEligibleForBTSmartRoutingConsideration;
    bool  _isEligibleForBTTriangleConsideration;
    bool  _isEligibleForNowPlayingAppConsideration;
    bool  _isFigInstantiatedAudioSession;
    bool  _isIDSMXCoreSession;
    bool  _isLongFormAudio;
    bool  _isNowPlayingApp;
    bool  _isPiPPossible;
    NSDate * _isPlayingStartTime;
    NSDate * _isPlayingStopTime;
    bool  _isRecordingMuted;
    bool  _isShadowSessionForFigSBAR;
    bool  _isSharePlayCallSession;
    bool  _isSharePlayCapableCallSession;
    bool  _isSharePlayMediaSession;
    bool  _isUsingCamera;
    bool  _isVibrating;
    bool  _makesMusicResume;
    bool  _mixesWithEveryone;
    unsigned int  _mode;
    bool  _mustRestoreCurrentlyControllingFlags;
    bool  _mustUseDefaultClientPriority;
    bool  _mutesAudioBasedOnRingerSwitchState;
    bool  _needToEndInterruption;
    bool  _needsAudioBudget;
    bool  _notFullyInactive;
    NSDictionary * _notificationsSubscribedTo;
    bool  _nowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio;
    bool  _nowPlayingAppWasStoppedOnMostRecentActivation;
    bool  _optOutOfMutePriority;
    unsigned int  _orientationOverride;
    NSArray * _overridePortsList;
    NSArray * _parentProcessAuditTokens;
    int  _pidToInheritAppStateFrom;
    RBSAssertion * _playbackAssertionRef;
    NSObject<OS_os_transaction> * _playingOSTransaction;
    NSDictionary * _powerProfile;
    bool  _preferredDecoupledInputOutput;
    NSString * _preferredHardwareFormat;
    float  _preferredIOBufferDuration;
    int  _preferredIOBufferFrames;
    double  _preferredInputSampleRate;
    int  _preferredNumberOfInputChannels;
    int  _preferredNumberOfOutputChannels;
    double  _preferredOutputSampleRate;
    int  _preferredStereoInputOrientation;
    bool  _prefersMultichannelAudio;
    bool  _prefersNoDucking;
    bool  _prefersNoInterruptionWhenSecureMicrophoneIsEngaged;
    bool  _prefersNoInterruptionsByMixableSessions;
    bool  _prefersNoInterruptionsByRingtonesAndAlerts;
    bool  _prefersSuppressingRecordingState;
    bool  _prefersToPlayDuringWombat;
    bool  _prefersToTakeHWControlFlagsFromAnotherSession;
    bool  _prefersToVibeWhenVibrationsAreDisabled;
    bool  _recentlyWantedToPauseSpokenAudio;
    bool  _requiresAggregatedInputOutput;
    RBSAssertion * _resumeAssertionRef;
    NSObject<OS_dispatch_source> * _resumeBackgroundAppUpdaterTimer;
    int  _routeSharingPolicy;
    bool  _routingContextSetByClient;
    unsigned int  _savedCurrentlyControllingFlags;
    unsigned int  _savedHWControlFlagsForClientThatDoesNotActuallyPlayAudio;
    NSObject<OS_dispatch_source> * _sessionDeactivateTimer;
    unsigned int  _shadowingAudioSessionID;
    bool  _silentMuted;
    NSString * _siriInputDeviceUUID;
    bool  _someMXSessionIsPlaying;
    unsigned int  _starkBorrowCount;
    bool  _stopsWhenDeviceLocks;
    NSArray * _subPortPreferences;
    bool  _systemSoundHasModifiedCurrentlyControllingFlags;
    long long  _timestampWhenMostRecentResumableEndInterruptionWasSent;
    long long  _timestampWhenMostRecentlyInterrupted;
    long long  _timestampWhenRecordingInBackgroundMostRecentlyStopped;
    bool  _tookControlOfStarkMainAudio;
    bool  _triggeredRemoteInterruption;
    float  _unduckFadeDuration;
    bool  _unduckFadeDurationSetByClient;
    bool  _userMuted;
    NSObject<OS_os_transaction> * _vibratingOSTransaction;
    NSDictionary * _vibrationData;
    NSDictionary * _vpBlockConfiguration;
    bool  _waitingForEndInterruptionWhenDeviceUnlocksOrInForeground;
    NSString * _waitingForRemoteInterruptionDoneIdentifier;
    bool  _waitingToResume;
    bool  _waitingToResumeWhenDeviceUnlocksOrInForeground;
    bool  _waitingToSendEndInterruptionToSpokenAudioApp;
    bool  _wantsAutomaticClusterPairingOnPlaybackStart;
    bool  _wantsToBeVolumeButtonClient;
    bool  _wantsToPauseSpokenAudio;
    bool  _wantsToSendResumableEndInterruptionWhenBackgrounded;
    bool  _wantsVibrationNotifications;
    bool  _wantsVolumeChangesWhenPaused;
    bool  _wantsVolumeChangesWhenPausedOrInactive;
    bool  _wasInterruptedByNowPlayingApp;
    bool  _wasInterruptedWhileRecording;
    bool  _wasInterruptedWhileSuspended;
    bool  _wasMutedBeforeInterruption;
    bool  _wasRecordingBeforeBeingInterrupted;
    bool  _willSetScreenDarkModeOnVAD;
}

@property (retain) NSDictionary *activationContext;
@property (retain) NSArray *activeRoutesWhenInterrupted;
@property (nonatomic) bool addSharedAudioRouteToRoutablePorts;
@property (retain) NSString *aggregateDeviceClockUID;
@property (nonatomic) bool allowMixableAudioWhileRecording;
@property (nonatomic) bool allowSystemSoundsWhileRecording;
@property (retain) NSArray *allowedPortTypes;
@property (retain) NSArray *allowedRouteTypes;
@property (nonatomic) bool allowedToBeNowPlayingApp;
@property (nonatomic) bool allowsBluetoothRecordingCustomization;
@property (nonatomic) bool allowsDefaultBuiltInRouteCustomization;
@property (nonatomic) unsigned int applicationState;
@property (retain) NSDictionary *audioBehaviour;
@property (retain) NSArray *audioDestinationPriority;
@property (nonatomic) bool audioHWControlFlagsSetByClient;
@property (nonatomic) float audioQueueDuckVolume;
@property (nonatomic) float audioQueueFadeDuration;
@property (nonatomic) struct { unsigned int x1[8]; } auditToken;
@property (nonatomic) bool auditTokenSetByClient;
@property (retain) NSDictionary *bundleIdToPAAccessIntervalMap;
@property (retain) NSDictionary *cameraParameters;
@property (nonatomic) bool clientIsPlaying;
@property (nonatomic) unsigned int clientPriority;
@property (nonatomic) bool createSpeakerDevice;
@property (nonatomic) unsigned int currentlyControllingFlags;
@property (nonatomic) int deactivateTimerDelay;
@property (retain) NSString *defaultBuiltInRoutePreference;
@property (nonatomic) bool defaultBuiltInRoutePreferenceSetByClient;
@property (retain) NSString *defaultVPChatMode;
@property (retain) NSNumber *desiredInputGainScalar;
@property (nonatomic) bool disallowAudioFormatChanges;
@property (nonatomic) bool doNotNotifyOtherSessionsOnNextInactive;
@property (nonatomic) bool doNotResetAudioCategoryOnNextInactive;
@property (nonatomic) bool doesInterAppAudio;
@property (nonatomic) bool doesntActuallyPlayAudio;
@property (nonatomic) bool dontTakeOverHardware;
@property (nonatomic) bool duckCommandSentToCarSession;
@property (nonatomic) float duckFadeDuration;
@property (nonatomic) bool duckFadeDurationSetByClient;
@property (nonatomic) float duckToLevelDB;
@property (nonatomic) bool duckToLevelDBSetByClient;
@property (nonatomic) float duckToLevelScalar;
@property (nonatomic) bool duckToLevelScalarSetByClient;
@property (nonatomic) bool duckedOnVAD;
@property (retain) NSArray *duckerSourceAudioBudgetRef;
@property (retain) NSArray *duckerSourceSessionRef;
@property (retain) NSArray *duckerSourceSystemSoundRef;
@property (nonatomic) bool enableBluetoothRecordingPreference;
@property (nonatomic) bool enableBluetoothRecordingPreferenceSetByClient;
@property (retain) NSArray *excludedPortsList;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *extendBackgroundAppAssertionTimer;
@property (nonatomic) bool forceSoundCheck;
@property (nonatomic) bool handsOverInterruptionsToInterruptor;
@property (nonatomic) bool hapticEngineIsPlaying;
@property (nonatomic) bool hasEntitlementToRecordAudioInAnExtension;
@property (nonatomic) bool hasEntitlementToRecordDuringCall;
@property (nonatomic) bool hasEntitlementToSetEmergencyAlertPriority;
@property (nonatomic) bool hasEntitlementToStartRecordingInTheBackground;
@property (nonatomic) bool hasEntitlementToSupportProcessAssertionAuditTokens;
@property (nonatomic) bool hasEntitlementToSuppressRecordingStateToSystemStatus;
@property (nonatomic) bool hasFetchedBackgroundPrivileges;
@property (nonatomic) bool hasFetchedGPSPrivileges;
@property (nonatomic) bool hasGPSPrivileges;
@property (nonatomic) bool hasInput;
@property (nonatomic) bool hasPhoneCallBehavior;
@property (retain) NSArray *hostProcessAttribution;
@property (retain) NSArray *hostProcessInfo;
@property (retain) NSDictionary *hostProcessPlaybackAssertions;
@property (nonatomic) unsigned int hwControlFlags;
@property (nonatomic) unsigned int idleSleepPreventor;
@property (nonatomic) bool idleSleepPreventorAllocated;
@property (retain) NSDate *idleSleepPreventorCreationTime;
@property (retain) NSString *idleSleepPreventorName;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *idleSleepPreventorUpdaterTimer;
@property (nonatomic) bool ignoreRingerSwitch;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *interruptSessionWithoutValidAssertionsTimer;
@property (nonatomic) MXCoreSession *interruptingSession;
@property (nonatomic) bool interruptionFadeDurationSetByClient;
@property (nonatomic) unsigned int interruptionStyle;
@property (nonatomic) bool interruptionStyleSetByClient;
@property (nonatomic) bool isActiveOverAirPlayVideo;
@property (nonatomic) bool isAllowedToPlayInBackground;
@property (nonatomic) bool isAudioOnlyAirPlayVideoActive;
@property (nonatomic) bool isAudioSession;
@property (nonatomic) bool isCarSession;
@property (nonatomic) bool isDucked;
@property (nonatomic) bool isEligibleForBTSmartRoutingConsideration;
@property (nonatomic) bool isEligibleForBTTriangleConsideration;
@property (nonatomic) bool isEligibleForNowPlayingAppConsideration;
@property (nonatomic) bool isFigInstantiatedAudioSession;
@property (nonatomic) bool isIDSMXCoreSession;
@property (nonatomic) bool isLongFormAudio;
@property (nonatomic) bool isNowPlayingApp;
@property (nonatomic) bool isPiPPossible;
@property (retain) NSDate *isPlayingStartTime;
@property (retain) NSDate *isPlayingStopTime;
@property (nonatomic) bool isRecordingMuted;
@property (nonatomic) bool isShadowSessionForFigSBAR;
@property (nonatomic) bool isSharePlayCallSession;
@property (nonatomic) bool isSharePlayCapableCallSession;
@property (nonatomic) bool isSharePlayMediaSession;
@property (nonatomic) bool isUsingCamera;
@property (nonatomic) bool isVibrating;
@property (nonatomic) bool makesMusicResume;
@property (nonatomic) bool mixesWithEveryone;
@property (nonatomic) unsigned int mode;
@property (nonatomic) bool mustRestoreCurrentlyControllingFlags;
@property (nonatomic) bool mustUseDefaultClientPriority;
@property (nonatomic) bool mutesAudioBasedOnRingerSwitchState;
@property (nonatomic) bool needToEndInterruption;
@property (nonatomic) bool needsAudioBudget;
@property (nonatomic) bool notFullyInactive;
@property (retain) NSDictionary *notificationsSubscribedTo;
@property (nonatomic) bool nowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio;
@property (nonatomic) bool nowPlayingAppWasStoppedOnMostRecentActivation;
@property (nonatomic) bool optOutOfMutePriority;
@property (nonatomic) unsigned int orientationOverride;
@property (retain) NSArray *overridePortsList;
@property (retain) NSArray *parentProcessAuditTokens;
@property (nonatomic) int pidToInheritAppStateFrom;
@property (retain) RBSAssertion *playbackAssertionRef;
@property (nonatomic) NSObject<OS_os_transaction> *playingOSTransaction;
@property (retain) NSDictionary *powerProfile;
@property (nonatomic) bool preferredDecoupledInputOutput;
@property (retain) NSString *preferredHardwareFormat;
@property (nonatomic) float preferredIOBufferDuration;
@property (nonatomic) int preferredIOBufferFrames;
@property (nonatomic) double preferredInputSampleRate;
@property (nonatomic) int preferredNumberOfInputChannels;
@property (nonatomic) int preferredNumberOfOutputChannels;
@property (nonatomic) double preferredOutputSampleRate;
@property (nonatomic) int preferredStereoInputOrientation;
@property (nonatomic) bool prefersMultichannelAudio;
@property (nonatomic) bool prefersNoDucking;
@property (nonatomic) bool prefersNoInterruptionWhenSecureMicrophoneIsEngaged;
@property (nonatomic) bool prefersNoInterruptionsByMixableSessions;
@property (nonatomic) bool prefersNoInterruptionsByRingtonesAndAlerts;
@property (nonatomic) bool prefersSuppressingRecordingState;
@property (nonatomic) bool prefersToPlayDuringWombat;
@property (nonatomic) bool prefersToTakeHWControlFlagsFromAnotherSession;
@property (nonatomic) bool prefersToVibeWhenVibrationsAreDisabled;
@property (nonatomic) bool recentlyWantedToPauseSpokenAudio;
@property (nonatomic) bool requiresAggregatedInputOutput;
@property (retain) RBSAssertion *resumeAssertionRef;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *resumeBackgroundAppUpdaterTimer;
@property (nonatomic) int routeSharingPolicy;
@property (nonatomic) bool routingContextSetByClient;
@property (nonatomic) unsigned int savedCurrentlyControllingFlags;
@property (nonatomic) unsigned int savedHWControlFlagsForClientThatDoesNotActuallyPlayAudio;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *sessionDeactivateTimer;
@property (nonatomic) unsigned int shadowingAudioSessionID;
@property (nonatomic) bool silentMuted;
@property (retain) NSString *siriInputDeviceUUID;
@property (nonatomic) bool someMXSessionIsPlaying;
@property (nonatomic) unsigned int starkBorrowCount;
@property (nonatomic) bool stopsWhenDeviceLocks;
@property (retain) NSArray *subPortPreferences;
@property (nonatomic) bool systemSoundHasModifiedCurrentlyControllingFlags;
@property (nonatomic) long long timestampWhenMostRecentResumableEndInterruptionWasSent;
@property (nonatomic) long long timestampWhenMostRecentlyInterrupted;
@property (nonatomic) long long timestampWhenRecordingInBackgroundMostRecentlyStopped;
@property (nonatomic) bool tookControlOfStarkMainAudio;
@property (nonatomic) bool triggeredRemoteInterruption;
@property (nonatomic) float unduckFadeDuration;
@property (nonatomic) bool unduckFadeDurationSetByClient;
@property (nonatomic) bool userMuted;
@property (nonatomic) NSObject<OS_os_transaction> *vibratingOSTransaction;
@property (retain) NSDictionary *vibrationData;
@property (retain) NSDictionary *vpBlockConfiguration;
@property (nonatomic) bool waitingForEndInterruptionWhenDeviceUnlocksOrInForeground;
@property (retain) NSString *waitingForRemoteInterruptionDoneIdentifier;
@property (nonatomic) bool waitingToResume;
@property (nonatomic) bool waitingToResumeWhenDeviceUnlocksOrInForeground;
@property (nonatomic) bool waitingToSendEndInterruptionToSpokenAudioApp;
@property (nonatomic) bool wantsAutomaticClusterPairingOnPlaybackStart;
@property (nonatomic) bool wantsToBeVolumeButtonClient;
@property (nonatomic) bool wantsToPauseSpokenAudio;
@property (nonatomic) bool wantsToSendResumableEndInterruptionWhenBackgrounded;
@property (nonatomic) bool wantsVibrationNotifications;
@property (nonatomic) bool wantsVolumeChangesWhenPaused;
@property (nonatomic) bool wantsVolumeChangesWhenPausedOrInactive;
@property (nonatomic) bool wasInterruptedByNowPlayingApp;
@property (nonatomic) bool wasInterruptedWhileRecording;
@property (nonatomic) bool wasInterruptedWhileSuspended;
@property (nonatomic) bool wasMutedBeforeInterruption;
@property (nonatomic) bool wasRecordingBeforeBeingInterrupted;
@property (nonatomic) bool willSetScreenDarkModeOnVAD;

- (id)activationContext;
- (id)activeRoutesWhenInterrupted;
- (bool)addSharedAudioRouteToRoutablePorts;
- (id)aggregateDeviceClockUID;
- (bool)allowMixableAudioWhileRecording;
- (bool)allowSystemSoundsWhileRecording;
- (id)allowedPortTypes;
- (id)allowedRouteTypes;
- (bool)allowedToBeNowPlayingApp;
- (bool)allowsBluetoothRecordingCustomization;
- (bool)allowsDefaultBuiltInRouteCustomization;
- (unsigned int)applicationState;
- (id)audioBehaviour;
- (id)audioDestinationPriority;
- (bool)audioHWControlFlagsSetByClient;
- (float)audioQueueDuckVolume;
- (float)audioQueueFadeDuration;
- (struct { unsigned int x1[8]; })auditToken;
- (bool)auditTokenSetByClient;
- (id)bundleIdToPAAccessIntervalMap;
- (id)cameraParameters;
- (bool)clientIsPlaying;
- (unsigned int)clientPriority;
- (id)copyDetailedRouteDescription;
- (bool)createSpeakerDevice;
- (unsigned int)currentlyControllingFlags;
- (int)deactivateTimerDelay;
- (void)dealloc;
- (id)defaultBuiltInRoutePreference;
- (bool)defaultBuiltInRoutePreferenceSetByClient;
- (id)defaultVPChatMode;
- (id)desiredInputGainScalar;
- (bool)disallowAudioFormatChanges;
- (bool)doNotNotifyOtherSessionsOnNextInactive;
- (bool)doNotResetAudioCategoryOnNextInactive;
- (bool)doesInterAppAudio;
- (bool)doesntActuallyPlayAudio;
- (bool)dontTakeOverHardware;
- (bool)duckCommandSentToCarSession;
- (float)duckFadeDuration;
- (bool)duckFadeDurationSetByClient;
- (float)duckToLevelDB;
- (bool)duckToLevelDBSetByClient;
- (float)duckToLevelScalar;
- (bool)duckToLevelScalarSetByClient;
- (bool)duckedOnVAD;
- (id)duckerSourceAudioBudgetRef;
- (id)duckerSourceSessionRef;
- (id)duckerSourceSystemSoundRef;
- (bool)enableBluetoothRecordingPreference;
- (bool)enableBluetoothRecordingPreferenceSetByClient;
- (id)excludedPortsList;
- (id)extendBackgroundAppAssertionTimer;
- (bool)forceSoundCheck;
- (int*)getPreferredIOBufferFramesPointer;
- (double*)getPreferredOutputSampleRatePointer;
- (bool)handsOverInterruptionsToInterruptor;
- (bool)hapticEngineIsPlaying;
- (bool)hasEntitlementToRecordAudioInAnExtension;
- (bool)hasEntitlementToRecordDuringCall;
- (bool)hasEntitlementToSetEmergencyAlertPriority;
- (bool)hasEntitlementToStartRecordingInTheBackground;
- (bool)hasEntitlementToSupportProcessAssertionAuditTokens;
- (bool)hasEntitlementToSuppressRecordingStateToSystemStatus;
- (bool)hasFetchedBackgroundPrivileges;
- (bool)hasFetchedGPSPrivileges;
- (bool)hasGPSPrivileges;
- (bool)hasInput;
- (bool)hasPhoneCallBehavior;
- (id)hostProcessAttribution;
- (id)hostProcessInfo;
- (id)hostProcessPlaybackAssertions;
- (unsigned int)hwControlFlags;
- (unsigned int)idleSleepPreventor;
- (bool)idleSleepPreventorAllocated;
- (id)idleSleepPreventorCreationTime;
- (id)idleSleepPreventorName;
- (id)idleSleepPreventorUpdaterTimer;
- (bool)ignoreRingerSwitch;
- (id)init;
- (id)interruptSessionWithoutValidAssertionsTimer;
- (id)interruptingSession;
- (bool)interruptionFadeDurationSetByClient;
- (unsigned int)interruptionStyle;
- (bool)interruptionStyleSetByClient;
- (bool)isActiveOverAirPlayVideo;
- (bool)isAllowedToPlayInBackground;
- (bool)isAudioOnlyAirPlayVideoActive;
- (bool)isAudioSession;
- (bool)isCarSession;
- (bool)isDucked;
- (bool)isEligibleForBTSmartRoutingConsideration;
- (bool)isEligibleForBTTriangleConsideration;
- (bool)isEligibleForNowPlayingAppConsideration;
- (bool)isFigInstantiatedAudioSession;
- (bool)isIDSMXCoreSession;
- (bool)isLongFormAudio;
- (bool)isNowPlayingApp;
- (bool)isPiPPossible;
- (id)isPlayingStartTime;
- (id)isPlayingStopTime;
- (bool)isRecordingMuted;
- (bool)isShadowSessionForFigSBAR;
- (bool)isSharePlayCallSession;
- (bool)isSharePlayCapableCallSession;
- (bool)isSharePlayMediaSession;
- (bool)isUsingCamera;
- (bool)isVibrating;
- (bool)makesMusicResume;
- (bool)mixesWithEveryone;
- (unsigned int)mode;
- (bool)mustRestoreCurrentlyControllingFlags;
- (bool)mustUseDefaultClientPriority;
- (bool)mutesAudioBasedOnRingerSwitchState;
- (bool)needToEndInterruption;
- (bool)needsAudioBudget;
- (bool)notFullyInactive;
- (id)notificationsSubscribedTo;
- (bool)nowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio;
- (bool)nowPlayingAppWasStoppedOnMostRecentActivation;
- (bool)optOutOfMutePriority;
- (unsigned int)orientationOverride;
- (id)overridePortsList;
- (id)parentProcessAuditTokens;
- (int)pidToInheritAppStateFrom;
- (id)playbackAssertionRef;
- (id)playingOSTransaction;
- (id)powerProfile;
- (bool)preferredDecoupledInputOutput;
- (id)preferredHardwareFormat;
- (float)preferredIOBufferDuration;
- (int)preferredIOBufferFrames;
- (double)preferredInputSampleRate;
- (int)preferredNumberOfInputChannels;
- (int)preferredNumberOfOutputChannels;
- (double)preferredOutputSampleRate;
- (int)preferredStereoInputOrientation;
- (bool)prefersMultichannelAudio;
- (bool)prefersNoDucking;
- (bool)prefersNoInterruptionWhenSecureMicrophoneIsEngaged;
- (bool)prefersNoInterruptionsByMixableSessions;
- (bool)prefersNoInterruptionsByRingtonesAndAlerts;
- (bool)prefersSuppressingRecordingState;
- (bool)prefersToPlayDuringWombat;
- (bool)prefersToTakeHWControlFlagsFromAnotherSession;
- (bool)prefersToVibeWhenVibrationsAreDisabled;
- (bool)recentlyWantedToPauseSpokenAudio;
- (bool)requiresAggregatedInputOutput;
- (id)resumeAssertionRef;
- (id)resumeBackgroundAppUpdaterTimer;
- (int)routeSharingPolicy;
- (bool)routingContextSetByClient;
- (unsigned int)savedCurrentlyControllingFlags;
- (unsigned int)savedHWControlFlagsForClientThatDoesNotActuallyPlayAudio;
- (id)sessionDeactivateTimer;
- (void)setActivationContext:(id)arg1;
- (void)setActiveRoutesWhenInterrupted:(id)arg1;
- (void)setAddSharedAudioRouteToRoutablePorts:(bool)arg1;
- (void)setAggregateDeviceClockUID:(id)arg1;
- (void)setAllowMixableAudioWhileRecording:(bool)arg1;
- (void)setAllowSystemSoundsWhileRecording:(bool)arg1;
- (void)setAllowedPortTypes:(id)arg1;
- (void)setAllowedRouteTypes:(id)arg1;
- (void)setAllowedToBeNowPlayingApp:(bool)arg1;
- (void)setAllowsBluetoothRecordingCustomization:(bool)arg1;
- (void)setAllowsDefaultBuiltInRouteCustomization:(bool)arg1;
- (void)setApplicationState:(unsigned int)arg1;
- (void)setAudioBehaviour:(id)arg1;
- (void)setAudioDestinationPriority:(id)arg1;
- (void)setAudioHWControlFlagsSetByClient:(bool)arg1;
- (void)setAudioQueueDuckVolume:(float)arg1;
- (void)setAudioQueueFadeDuration:(float)arg1;
- (void)setAuditToken:(struct { unsigned int x1[8]; })arg1;
- (void)setAuditTokenSetByClient:(bool)arg1;
- (void)setBundleIdToPAAccessIntervalMap:(id)arg1;
- (void)setCameraParameters:(id)arg1;
- (void)setClientIsPlaying:(bool)arg1;
- (void)setClientPriority:(unsigned int)arg1;
- (void)setCreateSpeakerDevice:(bool)arg1;
- (void)setCurrentlyControllingFlags:(unsigned int)arg1;
- (void)setDeactivateTimerDelay:(int)arg1;
- (void)setDefaultBuiltInRoutePreference:(id)arg1;
- (void)setDefaultBuiltInRoutePreferenceSetByClient:(bool)arg1;
- (void)setDefaultVPChatMode:(id)arg1;
- (void)setDesiredInputGainScalar:(id)arg1;
- (void)setDisallowAudioFormatChanges:(bool)arg1;
- (void)setDoNotNotifyOtherSessionsOnNextInactive:(bool)arg1;
- (void)setDoNotResetAudioCategoryOnNextInactive:(bool)arg1;
- (void)setDoesInterAppAudio:(bool)arg1;
- (void)setDoesntActuallyPlayAudio:(bool)arg1;
- (void)setDontTakeOverHardware:(bool)arg1;
- (void)setDuckCommandSentToCarSession:(bool)arg1;
- (void)setDuckFadeDuration:(float)arg1;
- (void)setDuckFadeDurationSetByClient:(bool)arg1;
- (void)setDuckToLevelDB:(float)arg1;
- (void)setDuckToLevelDBSetByClient:(bool)arg1;
- (void)setDuckToLevelScalar:(float)arg1;
- (void)setDuckToLevelScalarSetByClient:(bool)arg1;
- (void)setDuckedOnVAD:(bool)arg1;
- (void)setDuckerSourceAudioBudgetRef:(id)arg1;
- (void)setDuckerSourceSessionRef:(id)arg1;
- (void)setDuckerSourceSystemSoundRef:(id)arg1;
- (void)setEnableBluetoothRecordingPreference:(bool)arg1;
- (void)setEnableBluetoothRecordingPreferenceSetByClient:(bool)arg1;
- (void)setExcludedPortsList:(id)arg1;
- (void)setExtendBackgroundAppAssertionTimer:(id)arg1;
- (void)setForceSoundCheck:(bool)arg1;
- (void)setHandsOverInterruptionsToInterruptor:(bool)arg1;
- (void)setHapticEngineIsPlaying:(bool)arg1;
- (void)setHasEntitlementToRecordAudioInAnExtension:(bool)arg1;
- (void)setHasEntitlementToRecordDuringCall:(bool)arg1;
- (void)setHasEntitlementToSetEmergencyAlertPriority:(bool)arg1;
- (void)setHasEntitlementToStartRecordingInTheBackground:(bool)arg1;
- (void)setHasEntitlementToSupportProcessAssertionAuditTokens:(bool)arg1;
- (void)setHasEntitlementToSuppressRecordingStateToSystemStatus:(bool)arg1;
- (void)setHasFetchedBackgroundPrivileges:(bool)arg1;
- (void)setHasFetchedGPSPrivileges:(bool)arg1;
- (void)setHasGPSPrivileges:(bool)arg1;
- (void)setHasInput:(bool)arg1;
- (void)setHasPhoneCallBehavior:(bool)arg1;
- (void)setHostProcessAttribution:(id)arg1;
- (void)setHostProcessInfo:(id)arg1;
- (void)setHostProcessPlaybackAssertions:(id)arg1;
- (void)setHwControlFlags:(unsigned int)arg1;
- (void)setIdleSleepPreventor:(unsigned int)arg1;
- (void)setIdleSleepPreventorAllocated:(bool)arg1;
- (void)setIdleSleepPreventorCreationTime:(id)arg1;
- (void)setIdleSleepPreventorName:(id)arg1;
- (void)setIdleSleepPreventorUpdaterTimer:(id)arg1;
- (void)setIgnoreRingerSwitch:(bool)arg1;
- (void)setInterruptSessionWithoutValidAssertionsTimer:(id)arg1;
- (void)setInterruptingSession:(id)arg1;
- (void)setInterruptionFadeDurationSetByClient:(bool)arg1;
- (void)setInterruptionStyle:(unsigned int)arg1;
- (void)setInterruptionStyleSetByClient:(bool)arg1;
- (void)setIsActiveOverAirPlayVideo:(bool)arg1;
- (void)setIsAllowedToPlayInBackground:(bool)arg1;
- (void)setIsAudioOnlyAirPlayVideoActive:(bool)arg1;
- (void)setIsAudioSession:(bool)arg1;
- (void)setIsCarSession:(bool)arg1;
- (void)setIsDucked:(bool)arg1;
- (void)setIsEligibleForBTSmartRoutingConsideration:(bool)arg1;
- (void)setIsEligibleForBTTriangleConsideration:(bool)arg1;
- (void)setIsEligibleForNowPlayingAppConsideration:(bool)arg1;
- (void)setIsFigInstantiatedAudioSession:(bool)arg1;
- (void)setIsIDSMXCoreSession:(bool)arg1;
- (void)setIsLongFormAudio:(bool)arg1;
- (void)setIsNowPlayingApp:(bool)arg1;
- (void)setIsPiPPossible:(bool)arg1;
- (void)setIsPlayingStartTime:(id)arg1;
- (void)setIsPlayingStopTime:(id)arg1;
- (void)setIsRecordingMuted:(bool)arg1;
- (void)setIsShadowSessionForFigSBAR:(bool)arg1;
- (void)setIsSharePlayCallSession:(bool)arg1;
- (void)setIsSharePlayCapableCallSession:(bool)arg1;
- (void)setIsSharePlayMediaSession:(bool)arg1;
- (void)setIsUsingCamera:(bool)arg1;
- (void)setIsVibrating:(bool)arg1;
- (void)setMakesMusicResume:(bool)arg1;
- (void)setMixesWithEveryone:(bool)arg1;
- (void)setMode:(unsigned int)arg1;
- (void)setMustRestoreCurrentlyControllingFlags:(bool)arg1;
- (void)setMustUseDefaultClientPriority:(bool)arg1;
- (void)setMutesAudioBasedOnRingerSwitchState:(bool)arg1;
- (void)setNeedToEndInterruption:(bool)arg1;
- (void)setNeedsAudioBudget:(bool)arg1;
- (void)setNotFullyInactive:(bool)arg1;
- (void)setNotificationsSubscribedTo:(id)arg1;
- (void)setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:(bool)arg1;
- (void)setNowPlayingAppWasStoppedOnMostRecentActivation:(bool)arg1;
- (void)setOptOutOfMutePriority:(bool)arg1;
- (void)setOrientationOverride:(unsigned int)arg1;
- (void)setOverridePortsList:(id)arg1;
- (void)setParentProcessAuditTokens:(id)arg1;
- (void)setPidToInheritAppStateFrom:(int)arg1;
- (void)setPlaybackAssertionRef:(id)arg1;
- (void)setPlayingOSTransaction:(id)arg1;
- (void)setPowerProfile:(id)arg1;
- (void)setPreferredDecoupledInputOutput:(bool)arg1;
- (void)setPreferredHardwareFormat:(id)arg1;
- (void)setPreferredIOBufferDuration:(float)arg1;
- (void)setPreferredIOBufferFrames:(int)arg1;
- (void)setPreferredInputSampleRate:(double)arg1;
- (void)setPreferredNumberOfInputChannels:(int)arg1;
- (void)setPreferredNumberOfOutputChannels:(int)arg1;
- (void)setPreferredOutputSampleRate:(double)arg1;
- (void)setPreferredStereoInputOrientation:(int)arg1;
- (void)setPrefersMultichannelAudio:(bool)arg1;
- (void)setPrefersNoDucking:(bool)arg1;
- (void)setPrefersNoInterruptionWhenSecureMicrophoneIsEngaged:(bool)arg1;
- (void)setPrefersNoInterruptionsByMixableSessions:(bool)arg1;
- (void)setPrefersNoInterruptionsByRingtonesAndAlerts:(bool)arg1;
- (void)setPrefersSuppressingRecordingState:(bool)arg1;
- (void)setPrefersToPlayDuringWombat:(bool)arg1;
- (void)setPrefersToTakeHWControlFlagsFromAnotherSession:(bool)arg1;
- (void)setPrefersToVibeWhenVibrationsAreDisabled:(bool)arg1;
- (void)setRecentlyWantedToPauseSpokenAudio:(bool)arg1;
- (void)setRequiresAggregatedInputOutput:(bool)arg1;
- (void)setResumeAssertionRef:(id)arg1;
- (void)setResumeBackgroundAppUpdaterTimer:(id)arg1;
- (void)setRouteSharingPolicy:(int)arg1;
- (void)setRoutingContextSetByClient:(bool)arg1;
- (void)setSavedCurrentlyControllingFlags:(unsigned int)arg1;
- (void)setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:(unsigned int)arg1;
- (void)setSessionDeactivateTimer:(id)arg1;
- (void)setShadowingAudioSessionID:(unsigned int)arg1;
- (void)setSilentMuted:(bool)arg1;
- (void)setSiriInputDeviceUUID:(id)arg1;
- (void)setSomeMXSessionIsPlaying:(bool)arg1;
- (void)setStarkBorrowCount:(unsigned int)arg1;
- (void)setStopsWhenDeviceLocks:(bool)arg1;
- (void)setSubPortPreferences:(id)arg1;
- (void)setSystemSoundHasModifiedCurrentlyControllingFlags:(bool)arg1;
- (void)setTimestampWhenMostRecentResumableEndInterruptionWasSent:(long long)arg1;
- (void)setTimestampWhenMostRecentlyInterrupted:(long long)arg1;
- (void)setTimestampWhenRecordingInBackgroundMostRecentlyStopped:(long long)arg1;
- (void)setTookControlOfStarkMainAudio:(bool)arg1;
- (void)setTriggeredRemoteInterruption:(bool)arg1;
- (void)setUnduckFadeDuration:(float)arg1;
- (void)setUnduckFadeDurationSetByClient:(bool)arg1;
- (void)setUserMuted:(bool)arg1;
- (void)setVibratingOSTransaction:(id)arg1;
- (void)setVibrationData:(id)arg1;
- (void)setVpBlockConfiguration:(id)arg1;
- (void)setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:(bool)arg1;
- (void)setWaitingForRemoteInterruptionDoneIdentifier:(id)arg1;
- (void)setWaitingToResume:(bool)arg1;
- (void)setWaitingToResumeWhenDeviceUnlocksOrInForeground:(bool)arg1;
- (void)setWaitingToSendEndInterruptionToSpokenAudioApp:(bool)arg1;
- (void)setWantsAutomaticClusterPairingOnPlaybackStart:(bool)arg1;
- (void)setWantsToBeVolumeButtonClient:(bool)arg1;
- (void)setWantsToPauseSpokenAudio:(bool)arg1;
- (void)setWantsToSendResumableEndInterruptionWhenBackgrounded:(bool)arg1;
- (void)setWantsVibrationNotifications:(bool)arg1;
- (void)setWantsVolumeChangesWhenPaused:(bool)arg1;
- (void)setWantsVolumeChangesWhenPausedOrInactive:(bool)arg1;
- (void)setWasInterruptedByNowPlayingApp:(bool)arg1;
- (void)setWasInterruptedWhileRecording:(bool)arg1;
- (void)setWasInterruptedWhileSuspended:(bool)arg1;
- (void)setWasMutedBeforeInterruption:(bool)arg1;
- (void)setWasRecordingBeforeBeingInterrupted:(bool)arg1;
- (void)setWillSetScreenDarkModeOnVAD:(bool)arg1;
- (unsigned int)shadowingAudioSessionID;
- (bool)silentMuted;
- (id)siriInputDeviceUUID;
- (bool)someMXSessionIsPlaying;
- (unsigned int)starkBorrowCount;
- (bool)stopsWhenDeviceLocks;
- (id)subPortPreferences;
- (bool)systemSoundHasModifiedCurrentlyControllingFlags;
- (long long)timestampWhenMostRecentResumableEndInterruptionWasSent;
- (long long)timestampWhenMostRecentlyInterrupted;
- (long long)timestampWhenRecordingInBackgroundMostRecentlyStopped;
- (bool)tookControlOfStarkMainAudio;
- (bool)triggeredRemoteInterruption;
- (float)unduckFadeDuration;
- (bool)unduckFadeDurationSetByClient;
- (void)updateApplicationStateAndPIDToInheritAppStateFrom;
- (bool)userMuted;
- (id)vibratingOSTransaction;
- (id)vibrationData;
- (id)vpBlockConfiguration;
- (bool)waitingForEndInterruptionWhenDeviceUnlocksOrInForeground;
- (id)waitingForRemoteInterruptionDoneIdentifier;
- (bool)waitingToResume;
- (bool)waitingToResumeWhenDeviceUnlocksOrInForeground;
- (bool)waitingToSendEndInterruptionToSpokenAudioApp;
- (bool)wantsAutomaticClusterPairingOnPlaybackStart;
- (bool)wantsToBeVolumeButtonClient;
- (bool)wantsToPauseSpokenAudio;
- (bool)wantsToSendResumableEndInterruptionWhenBackgrounded;
- (bool)wantsVibrationNotifications;
- (bool)wantsVolumeChangesWhenPaused;
- (bool)wantsVolumeChangesWhenPausedOrInactive;
- (bool)wasInterruptedByNowPlayingApp;
- (bool)wasInterruptedWhileRecording;
- (bool)wasInterruptedWhileSuspended;
- (bool)wasMutedBeforeInterruption;
- (bool)wasRecordingBeforeBeingInterrupted;
- (bool)willSetScreenDarkModeOnVAD;

@end
