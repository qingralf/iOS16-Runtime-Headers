/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AuthenticationServicesCore.framework/AuthenticationServicesCore
 */

@interface ASCAgent : NSObject <ASCAgentProtocol, ASCAuthorizationPresenterDelegate, ASPublicKeyCredentialManagerDelegate, AuthenticationServicesCore.ASCABLEClientDelegate> {
    id /* block */  _authorizationCompletionHandler;
    ASCAuthorizationTrafficController * _authorizationTrafficController;
    NSURL * _cableAuthenticationURL;
    _TtC26AuthenticationServicesCore20ASCABLEAuthenticator * _cableAuthenticator;
    _TtC26AuthenticationServicesCore13ASCABLEClient * _cableClient;
    NSString * _clientApplicationIdentifier;
    NSXPCConnection * _connection;
    id /* block */  _didLoadPlatformCredentialsCallback;
    bool  _didStartCABLEClient;
    bool  _existingAppleIDCredentialAvailableForLogIn;
    id /* block */  _passkeyCredentialCallback;
    NSArray * _passwordCredentials;
    id /* block */  _pinResultCallback;
    NSArray * _platformLoginChoices;
    <ASPublicKeyCredentialManagerInterface> * _publicKeyCredentialManager;
    NSUUID * _publicKeyCredentialOperationUUID;
    ASCCredentialRequestContext * _requestContext;
    ASCAuthorizationPresenter * _requestPresenter;
    NSArray * _securityKeyLoginChoices;
    id /* block */  _userEnteredPINCallback;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_allAvailableLoginChoicesForRequestContext:(id)arg1;
- (void)_authorizationCompletedWithCredential:(id)arg1 error:(id)arg2;
- (id)_bundleIDfromAppID:(id)arg1;
- (id)_cableLoginChoice;
- (bool)_clientHasAuthKitDeveloperEntitlement;
- (bool)_clientHasNecessaryAuthKitEntitlements;
- (bool)_clientIsAuthKitOwner;
- (bool)_clientIsInternalAuthKit;
- (bool)_clientIsPrivateAuthKit;
- (void)_configureAppleIDCredentialwithCompletionHandler:(id /* block */)arg1;
- (void)_configureLoginChoicesForPresentationContext:(id)arg1 withRequestContext:(id)arg2;
- (void)_configurePasswordCredentialsWithCompletionHandler:(id /* block */)arg1;
- (void)_configurePublicKeyCredentialsWithAssertionOptions:(id)arg1 forProcessWithApplicationIdentifier:(id)arg2 requestStyle:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)_credentialRequestedForCABLELoginChoice:(id)arg1;
- (void)_credentialRequestedForPasswordLoginChoice:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_credentialRequestedForPlatformLoginChoice:(id)arg1 authenticatedContext:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_credentialRequestedForSecurityKeyLoginChoice:(id)arg1;
- (bool)_hasAnyCredentialsAvailableForRequestTypes:(unsigned long long)arg1;
- (bool)_hasSignInOptionsForRequestTypes:(unsigned long long)arg1;
- (bool)_isAuthenticationConfiguredForPlatformPublicKeyRequestWithError:(id*)arg1;
- (bool)_isClientEntitledWebBrowser;
- (bool)_isClientWithApplicationIdentifier:(id)arg1 properlyEntitledForRequestContext:(id)arg2 error:(id*)arg3;
- (id)_noCredentialsFoundErrorForRequestContext:(id)arg1;
- (void)_performAuthKitAuthorizationValidation;
- (void)_prepareForAuthorizationRequestsForContext:(id)arg1 clientConnection:(id)arg2 withPresentationHandler:(id /* block */)arg3;
- (void)_presentAuthorizationRequestWithContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_shouldAddCABLEChoiceForAllowedCredentials:(id)arg1;
- (bool)_shouldAddCABLEChoiceForRequestContext:(id)arg1;
- (void)authorizationPresenter:(id)arg1 credentialRequestedForLoginChoice:(id)arg2 authenticatedContext:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)authorizationPresenter:(id)arg1 startCABLEAuthenticationWithCompletionHandler:(id /* block */)arg2;
- (void)authorizationPresenter:(id)arg1 validateUserEnteredPIN:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)cableClientWillAuthenticate:(id)arg1;
- (void)cableClientWillConnect:(id)arg1;
- (void)cancelCurrentRequest;
- (void)clearAllPlatformPublicKeyCredentialsWithCompletionHandler:(id /* block */)arg1;
- (void)dealloc;
- (void)didCompleteAssertionWithCredential:(id)arg1 error:(id)arg2;
- (void)didCompleteRegistrationWithCredential:(id)arg1 error:(id)arg2;
- (void)didFetchPlatformLoginChoices:(id)arg1;
- (void)didFetchSecurityKeyLoginChoices:(id)arg1;
- (void)didReceiveError:(long long)arg1;
- (id)encodeGetAssertionCTAPCommandForAuthenticatorWithUserVerificationAvailability:(unsigned long long)arg1;
- (id)encodeMakeCredentialCTAPCommandForAuthenticatorWithUserVerificationAvailability:(unsigned long long)arg1;
- (void)getShouldUseAlternateCredentialStoreWithCompletionHandler:(id /* block */)arg1;
- (id)initWithTrafficController:(id)arg1 connection:(id)arg2 publicKeyCredentialManager:(id)arg3;
- (void)openCABLEURL:(id)arg1 fromSourceApplication:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)performAuthorizationRequestsForContext:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)presentCABLESheetWithCompletionHandler:(id /* block */)arg1;
- (void)requestPINWithRemainingRetries:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)userSelectedLoginChoice:(id)arg1 authenticatedContext:(id)arg2 completionHandler:(id /* block */)arg3;

@end
