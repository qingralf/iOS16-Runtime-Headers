/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHRecognizer : NSObject <CHRecognizing> {
    NSCharacterSet * _activeCharacterSet;
    CHRecognitionInsight * _activeRecognitionInsight;
    CHDrawing * _cachedDrawing;
    struct map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>> { 
        struct __tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>> { 
            void *__begin_node_; 
            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>> { 
                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                    void *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _cachedResults;
    struct map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> { 
        struct __tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>> { 
            void *__begin_node_; 
            struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>> { 
                struct __tree_end_node<std::__tree_node_base<void *> *> { 
                    void *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>> { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _characterIDMap;
    void * _characterLanguageModel;
    void * _cjkDynamicLexicon;
    void * _cjkStaticLexicon;
    CHRecognizerConfiguration * _configuration;
    struct _LXLexicon { } * _customLexicon;
    struct _LXLexicon { } * _customPhraseLexicon;
    struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; } * _engine;
    void * _formatGrammarFST;
    struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; } * _freeformEngine;
    void ** _icuTransliterator;
    unsigned long long  _lastCharacterSegmentCount;
    NSMutableIndexSet * _lastCharacterSegmentIndexes;
    NSURL * _learningDictionaryURL;
    void * _lmVocabulary;
    unsigned long long  _maxRecognitionResultCount;
    CHMecabraWrapper * _mecabraWrapper;
    CHPostProcessingManager * _mergedResultPostProcessor;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumDrawingSize;
    CHRecognitionInsightRequest * _nextRecognitionInsightRequest;
    CHStringOVSChecker * _ovsStringChecker;
    CHPatternNetwork * _patternFST;
    struct _LXLexicon { } * _phraseLexicon;
    CHPatternNetwork * _postProcessingFST;
    CHPostProcessingManager * _postProcessor;
    void * _radicalClusterFST;
    CHCTCRecognitionModel * _recognitionModel;
    NSObject<OS_dispatch_queue> * _recognitionQueue;
    int  _recognitionType;
    struct _LXLexicon { } * _secondaryStaticLexicon;
    CHSpellChecker * _spellChecker;
    struct _LXLexicon { } * _staticLexicon;
    CVNLPCTCTextDecoder * _textDecoder;
    NSMutableDictionary * _textReplacementLowercasedKeyMapping;
    NSDictionary * _textReplacements;
    struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; } * _transliterationVariantMap;
    NSArray * _whitelistMecabraRareCharacters;
    void * _wordLanguageModel;
}

@property (nonatomic, retain) NSCharacterSet *activeCharacterSet;
@property (nonatomic) int autoCapitalizationMode;
@property (nonatomic) int autoCorrectionMode;
@property (nonatomic, copy) CHDrawing *cachedDrawing;
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<std::set<long>' */ struct  cachedResults; /* unknown property attribute:  true>>=Q}}} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<unsigned int' */ struct  characterIDMap; /* unknown property attribute:  true>>=Q}}} */
@property (nonatomic) void*characterLanguageModel;
@property (nonatomic) void*cjkDynamicLexicon;
@property (nonatomic) void*cjkStaticLexicon;
@property (setter=_setConfiguration:, nonatomic, retain) CHRecognizerConfiguration *configuration;
@property (nonatomic) int contentType;
@property (nonatomic) struct _LXLexicon { }*customLexicon;
@property (nonatomic) struct _LXLexicon { }*customPhraseLexicon;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enableCachingIfAvailable;
@property (nonatomic) bool enableGen2CharacterLMIfAvailable;
@property (nonatomic) bool enableGen2ModelIfAvailable;
@property (nonatomic) struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*engine;
@property (nonatomic) void*formatGrammarFST;
@property (nonatomic) struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*freeformEngine;
@property (readonly) unsigned long long hash;
@property (nonatomic) void**icuTransliterator;
@property (nonatomic) unsigned long long lastCharacterSegmentCount;
@property (nonatomic, retain) NSMutableIndexSet *lastCharacterSegmentIndexes;
@property (nonatomic, retain) NSURL *learningDictionaryURL;
@property (nonatomic) void*lmVocabulary;
@property (nonatomic, copy) NSLocale *locale;
@property (nonatomic) unsigned long long maxRecognitionResultCount;
@property (nonatomic, retain) CHMecabraWrapper *mecabraWrapper;
@property (nonatomic, retain) CHPostProcessingManager *mergedResultPostProcessor;
@property (nonatomic) struct CGSize { double x1; double x2; } minimumDrawingSize;
@property (nonatomic, retain) CHStringOVSChecker *ovsStringChecker;
@property (nonatomic, retain) CHPatternNetwork *patternFST;
@property (nonatomic) struct _LXLexicon { }*phraseLexicon;
@property (nonatomic, retain) CHPatternNetwork *postProcessingFST;
@property (nonatomic, retain) CHPostProcessingManager *postProcessor;
@property (nonatomic) void*radicalClusterFST;
@property (nonatomic) int recognitionMode;
@property (nonatomic, retain) CHCTCRecognitionModel *recognitionModel;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *recognitionQueue;
@property (nonatomic) int recognitionType;
@property (nonatomic, readonly) CHRecognitionInsight *recordedInsightFromLastRequest;
@property (nonatomic) struct _LXLexicon { }*secondaryStaticLexicon;
@property (nonatomic, retain) CHSpellChecker *spellChecker;
@property (nonatomic) struct _LXLexicon { }*staticLexicon;
@property (readonly) Class superclass;
@property (nonatomic, retain) CVNLPCTCTextDecoder *textDecoder;
@property (nonatomic, retain) NSMutableDictionary *textReplacementLowercasedKeyMapping;
@property (nonatomic, retain) NSDictionary *textReplacements;
@property (nonatomic) struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*transliterationVariantMap;
@property (nonatomic) void*wordLanguageModel;

+ (void)_updatePrecedingAndTrailingSeparatorsForTopCandidate:(id)arg1 history:(id)arg2 textAfter:(id)arg3 locale:(id)arg4 outTrailingSeparator:(id*)arg5 inFirstTokenHasPrecedingSpace:(bool)arg6 outFirstTokenHasPrecedingSpace:(bool*)arg7;
+ (bool)isLocaleSupported:(id)arg1 withMode:(int)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_activationMatrixFromInferenceCache:(id)arg1 forDrawing:(id)arg2 outStrokeEndings:(void*)arg3;
- (id)_addAlternativeCandidatesForTokenizedResult:(id)arg1;
- (void)_addEdgesFromCandidates:(struct vector<CHCandidateResult, std::allocator<CHCandidateResult>> { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::allocator<CHCandidateResult>> { struct CHCandidateResult {} *x_3_1_1; } x3; })arg1 toEdges:(void*)arg2 referenceEdge:(const struct NetworkEdge { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; double x5; double x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; }*)arg3 network:(void*)arg4 consumedSegmentCount:(long long)arg5 numSubstrokes:(long long)arg6;
- (void)_adjustCandidatesForChinesePunctuation:(void*)arg1 segmentDrawing:(id)arg2 completeDrawing:(id)arg3;
- (void)_adjustCandidatesForConfusableCharacters:(void*)arg1;
- (void)_adjustCandidatesForRomanPunctuation:(void*)arg1 segmentDrawing:(id)arg2;
- (void)_adjustResultsForConfusableCharacters:(id)arg1;
- (id)_alternativeInterpretationsForString:(id)arg1;
- (id)_applySentenceTransliterationCandidates:(unsigned short*)arg1 codesLen:(int)arg2 codesMax:(int)arg3;
- (void)_applyTransliterationAndSyntheticCandidates:(void*)arg1;
- (void)_cachingWithMatchingStrokeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 drawing:(id)arg2;
- (void)_calculateBestTranscriptionPaths:(id*)arg1 scores:(id*)arg2 fromTokenizedResult:(id)arg3 pathCount:(long long)arg4 history:(id)arg5 skipLMRescoring:(bool)arg6;
- (double)_calculateJointWordLMScoreForString:(id)arg1 wordRanges:(id)arg2 wordIDs:(id)arg3 patternEntries:(id)arg4 history:(unsigned int*)arg5 historyLength:(unsigned long long)arg6;
- (double)_calculateJointWordLMScoreForTokenPath:(id)arg1 tokenizedResult:(id)arg2 history:(unsigned int*)arg3 historyLength:(unsigned long long)arg4 pathTranscription:(id*)arg5;
- (double)_candidateLatticePruningThresholdForEdgeType:(bool)arg1;
- (id)_changeableColumnCountUpdatedResult:(id)arg1 options:(id)arg2;
- (long long)_classifyEdgeDrawingsFromContexts:(id)arg1 allEdges:(void*)arg2 segmentationNetwork:(void*)arg3 candidateNetwork:(void*)arg4 cachedEdgeSet:(void*)arg5 completeDrawing:(id)arg6 allowSmallerFinalBatch:(bool)arg7 shouldCancel:(id /* block */)arg8;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_computeLocalFrameWithLeftBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rightBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_contextTokenIDsFromHistory:(id)arg1 maxCharacterLength:(unsigned long long)arg2 maxTokenCount:(unsigned long long)arg3;
- (void*)_createCandidateNetworkFromSegmentationNetwork:(void*)arg1 segmentGroup:(id)arg2 drawing:(id)arg3 boundsAtNode:(void*)arg4 matchingStrokeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 sortedSegmentIndexes:(struct vector<long, std::allocator<long>> { long long *x1; long long *x2; struct __compressed_pair<long *, std::allocator<long>> { long long *x_3_1_1; } x3; })arg6 shouldCancel:(id /* block */)arg7;
- (unsigned int*)_createNetworkTruncatedPrefixStringUsingPrefix:(id)arg1 fullHistoryStringLength:(long long)arg2 hasLexiconCursor:(bool)arg3 prefixStringLength:(unsigned long long*)arg4 hasComplexChars:(bool*)arg5 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6;
- (id)_defaultLegacyPunctuationResultsWithStrokeCount:(unsigned long long)arg1;
- (id)_defaultPunctuationResultWithStrokeCount:(unsigned long long)arg1;
- (id)_defaultPunctuationStringsOutputScores:(id*)arg1 maxCandidateCount:(long long)arg2;
- (struct CGPoint { double x1; double x2; })_drawingAnchorPointFromRecognizerOptions:(id)arg1;
- (unsigned long long)_effectiveMaxRecognitionResultCount;
- (id)_fallbackStructuredResultForDrawing:(id)arg1 string:(id)arg2 score:(double)arg3 firstTokenHasPrecedingSpacePreference:(bool)arg4;
- (void)_filterNonHumanFriendlyCandidates:(id)arg1;
- (id)_historyStringFromRecognizerOptions:(id)arg1;
- (id)_inferenceCacheFromRecognizerOptions:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_initialContextRectFromRecognizerOptions:(id)arg1;
- (void)_initializeMergedResultPostProcessor;
- (void)_initializePostProcessor;
- (void)_initializeTextDecoder;
- (bool)_isLocaleSupported:(id)arg1;
- (id)_legacyTextRecognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (double)_lmRescoringWeightForPath:(id)arg1;
- (void)_loadMecabraIfNeeded;
- (struct CGSize { double x1; double x2; })_minSizeForReliableRescalingFromRecognizerOptions:(id)arg1;
- (unsigned long long)_mininmumPathCount;
- (void)_penalizeCandidatesForRomanPunctuation:(void*)arg1 punctuationStrokeCount:(long long)arg2;
- (id)_postprocessingMergedRecognitionResult:(id)arg1 options:(id)arg2;
- (long long)_precedingSpaceBehaviorFromRecognizerOptions:(id)arg1;
- (id)_recognitionResultsForMultipleCharacterDrawing:(id)arg1 segmentGroup:(id)arg2 options:(id)arg3 shouldCancel:(id /* block */)arg4;
- (void)_refineCandidates:(void*)arg1 withAllowedCandidateCodes:(const void*)arg2;
- (void)_refineChineseCharacterCandidates:(void*)arg1 drawing:(id)arg2;
- (void)_reloadEngineAndResources;
- (void)_removeOVSResults:(id)arg1 withHistory:(id)arg2;
- (void)_rescoreCandidatesWithLanguageModel:(void*)arg1 history:(id)arg2;
- (id)_resolvedStrokeIndexes:(id)arg1 segmentGroup:(id)arg2 segmentOffset:(long long)arg3 substrokeCount:(long long*)arg4;
- (id)_resultUsingNextGenerationPipelineWithDrawing:(id)arg1 options:(id)arg2;
- (id)_resultUsingSegmentAndDecodePipelineWithDrawing:(id)arg1 insight:(id)arg2 options:(id)arg3 shouldCancel:(id /* block */)arg4;
- (void)_safelyUnloadEngineAndResources;
- (void)_setConfiguration:(id)arg1;
- (void)_setupRecognitionInsightRecording;
- (bool)_shouldReturnDefaultResultsForDrawing:(id)arg1;
- (struct vector<long, std::allocator<long>> { long long *x1; long long *x2; struct __compressed_pair<long *, std::allocator<long>> { long long *x_3_1_1; } x3; })_sortedIndexesForSegmentGroup:(id)arg1 drawing:(id)arg2;
- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })_stringForCode:(unsigned int)arg1;
- (id)_textAfterFromRecognizerOptions:(id)arg1;
- (id)_textReplacementResultForLegacyRecognitionResult:(id)arg1;
- (id)_textResultWithLexiconExpansionFromCandidateNetwork:(void*)arg1 history:(id)arg2 prefix:(id)arg3 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 rootStaticCursor:(struct _LXCursor { }*)arg5 rootCustomCursor:(struct _LXCursor { }*)arg6 rootPatternCursor:(id)arg7 segmentGroup:(id)arg8 maxRecognitionResultCount:(unsigned long long)arg9 precedingSpaceBehavior:(long long)arg10 shouldPerformNoSpaceRecognition:(bool)arg11 totalStrokeCount:(long long)arg12 totalSubstrokeCount:(long long)arg13 shouldCancel:(id /* block */)arg14;
- (id)_textResultWithNetworkComposeFromCandidateNetwork:(void*)arg1 segmentGroup:(id)arg2 drawing:(id)arg3 maxRecognitionResultCount:(unsigned long long)arg4 history:(id)arg5 totalStrokeCount:(long long)arg6 totalSubstrokeCount:(long long)arg7;
- (id)_tokenFromLegacyResult:(id)arg1 wordIndex:(unsigned long long)arg2 strokeSet:(id)arg3 substrokeCount:(long long)arg4;
- (unsigned int)_tokenIDForUNKCharacterString:(id)arg1;
- (id)_tokenizedTextRecognitionResultForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)_tokenizedTextRecognitionResultForDrawing:(id)arg1 writingStatistics:(id)arg2 options:(id)arg3 shouldCancel:(id /* block */)arg4;
- (id)_tokenizedTextResultFromResults:(id)arg1 segmentGroup:(id)arg2 offsetSegment:(long long)arg3 decodedStrokeSets:(bool)arg4 spaceBehavior:(long long)arg5;
- (id)_tokenizedTextResultFromTextDecodingResult:(id)arg1 options:(id)arg2 strokeEndings:(struct vector<long, std::allocator<long>> { long long *x1; long long *x2; struct __compressed_pair<long *, std::allocator<long>> { long long *x_3_1_1; } x3; })arg3 drawing:(id)arg4 firstTokenHasPrecedingSpacePreference:(bool)arg5;
- (id)_tokensUsingLMTokenizerForString:(id)arg1 wordRanges:(id)arg2 nonWordPatterns:(id)arg3 outTokenIDs:(id*)arg4;
- (id)_transliterationVariantsForString:(id)arg1;
- (void)_unloadEngineAndResources;
- (bool)_updateResults:(id)arg1 string:(id)arg2 score:(double)arg3 recognitionScore:(double)arg4 lexicalEntry:(bool)arg5 patternEntry:(bool)arg6 isInappropriateWord:(bool)arg7 wordID:(unsigned int)arg8 wordStrokeSet:(id)arg9;
- (void)_updateWordLanguageModel:(void*)arg1;
- (id)activeCharacterSet;
- (int)autoCapitalizationMode;
- (int)autoCorrectionMode;
- (id)bestPathsFromNetwork:(void*)arg1 pathCount:(unsigned long long)arg2 staticLexiconCursor:(struct _LXCursor { }*)arg3 customLexiconCursor:(struct _LXCursor { }*)arg4 patternCursor:(id)arg5 history:(id)arg6 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg7 mecabraIDs:(void*)arg8 segmentGroup:(id)arg9 precedingSpaceBehavior:(long long)arg10 effectiveContentType:(int)arg11 totalStrokeCount:(long long)arg12 totalSubstrokeCount:(long long)arg13;
- (id)bestTranscriptionPathsForTokenizedResult:(id)arg1 scores:(id*)arg2 history:(id)arg3;
- (id)cachedDrawing;
- (struct map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>> { struct __tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>> { void *x_1_1_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })cachedResults;
- (void)candidateAccepted:(void*)arg1;
- (struct map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> { struct __tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>> { void *x_1_1_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })characterIDMap;
- (void*)characterLanguageModel;
- (id)characterSetForStrings:(id)arg1;
- (id)chatBubbleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (void*)cjkDynamicLexicon;
- (void*)cjkStaticLexicon;
- (id)cloudCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (struct vector<const void *, std::allocator<const void *>> { void **x1; void **x2; struct __compressed_pair<const void **, std::allocator<const void *>> { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 candidateContext:(id)arg2 prefix:(id)arg3 option:(unsigned long long)arg4;
- (struct vector<const void *, std::allocator<const void *>> { void **x1; void **x2; struct __compressed_pair<const void **, std::allocator<const void *>> { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 prefix:(id)arg2 option:(unsigned long long)arg3;
- (id)configuration;
- (int)contentType;
- (struct _LXLexicon { }*)customLexicon;
- (struct _LXLexicon { }*)customPhraseLexicon;
- (void)dealloc;
- (id)ellipseCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (bool)enableCachingIfAvailable;
- (bool)enableGen2CharacterLMIfAvailable;
- (bool)enableGen2ModelIfAvailable;
- (void)endpointsForDrawing:(id)arg1 startLocation:(struct CGPoint { double x1; double x2; }*)arg2 endLocation:(struct CGPoint { double x1; double x2; }*)arg3;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)engine;
- (void*)formatGrammarFST;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)freeformEngine;
- (id)heartCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void**)icuTransliterator;
- (id)initWithMode:(int)arg1 locale:(id)arg2;
- (id)initWithMode:(int)arg1 locale:(id)arg2 learningDictionaryURL:(id)arg3;
- (id)initWithMode:(int)arg1 locale:(id)arg2 learningDictionaryURL:(id)arg3 recognizerOptions:(id)arg4;
- (id)initWithMode:(int)arg1 locale:(id)arg2 recognizerOptions:(id)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2;
- (id)initWithType:(int)arg1 mode:(int)arg2 learningDictionaryURL:(id)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3 learningDictionaryURL:(id)arg4;
- (bool)isOVSString:(id)arg1;
- (bool)isRareChineseEntry:(id)arg1;
- (unsigned long long)lastCharacterSegmentCount;
- (id)lastCharacterSegmentIndexes;
- (id)learningDictionaryURL;
- (id)lineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void*)lmVocabulary;
- (id)locale;
- (id)manhattanLineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (unsigned long long)maxRecognitionResultCount;
- (id)mecabraRareWordIndexes:(id)arg1 wordRanges:(id)arg2;
- (id)mecabraWrapper;
- (id)mergedResultPostProcessor;
- (struct CGSize { double x1; double x2; })minimumDrawingSize;
- (id)outlineArrowCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (id)ovsStringChecker;
- (id)patternFST;
- (id)pentagonCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _LXLexicon { }*)phraseLexicon;
- (id)postProcessingFST;
- (id)postProcessor;
- (void*)radicalClusterFST;
- (id)recognitionEngineCachingKey;
- (int)recognitionMode;
- (id)recognitionModel;
- (id)recognitionQueue;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)recognitionResultsForSingleCharacterDrawing:(id)arg1 segmentGroup:(id)arg2 options:(id)arg3 history:(id)arg4;
- (id)recognitionResultsForSketchDrawing:(id)arg1 options:(id)arg2;
- (int)recognitionType;
- (void)recordInsightWithRequest:(id)arg1;
- (id)recordedInsightFromLastRequest;
- (id)rectangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _LXLexicon { }*)secondaryStaticLexicon;
- (void)setActiveCharacterSet:(id)arg1;
- (void)setAutoCapitalizationMode:(int)arg1;
- (void)setAutoCorrectionMode:(int)arg1;
- (void)setCachedDrawing:(id)arg1;
- (void)setCachedResults:(struct map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>> { struct __tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>> { void *x_1_1_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setCharacterIDMap:(struct map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> { struct __tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>> { void *x_1_1_1; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>> { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setCharacterLanguageModel:(void*)arg1;
- (void)setCjkDynamicLexicon:(void*)arg1;
- (void)setCjkStaticLexicon:(void*)arg1;
- (void)setContentType:(int)arg1;
- (void)setCustomLexicon:(struct _LXLexicon { }*)arg1;
- (void)setCustomLexicon:(struct _LXLexicon { }*)arg1 customVocabulary:(void*)arg2;
- (void)setCustomPhraseLexicon:(struct _LXLexicon { }*)arg1;
- (void)setEnableCachingIfAvailable:(bool)arg1;
- (void)setEnableGen2CharacterLMIfAvailable:(bool)arg1;
- (void)setEnableGen2ModelIfAvailable:(bool)arg1;
- (void)setEngine:(struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)arg1;
- (void)setFormatGrammarFST:(void*)arg1;
- (void)setFreeformEngine:(struct CHNeuralNetwork { int (*x1)(); bool x2; struct CHCodeMap {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; id x8; id x9; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10; }*)arg1;
- (void)setIcuTransliterator:(void**)arg1;
- (void)setLastCharacterSegmentCount:(unsigned long long)arg1;
- (void)setLastCharacterSegmentIndexes:(id)arg1;
- (void)setLearningDictionaryURL:(id)arg1;
- (void)setLmVocabulary:(void*)arg1;
- (void)setLocale:(id)arg1;
- (void)setMaxRecognitionResultCount:(unsigned long long)arg1;
- (void)setMecabraWrapper:(id)arg1;
- (void)setMergedResultPostProcessor:(id)arg1;
- (void)setMinimumDrawingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOvsStringChecker:(id)arg1;
- (void)setPatternFST:(id)arg1;
- (void)setPhraseLexicon:(struct _LXLexicon { }*)arg1;
- (void)setPostProcessingFST:(id)arg1;
- (void)setPostProcessor:(id)arg1;
- (void)setRadicalClusterFST:(void*)arg1;
- (void)setRecognitionMode:(int)arg1;
- (void)setRecognitionModel:(id)arg1;
- (void)setRecognitionQueue:(id)arg1;
- (void)setRecognitionType:(int)arg1;
- (void)setSecondaryStaticLexicon:(struct _LXLexicon { }*)arg1;
- (void)setSpellChecker:(id)arg1;
- (void)setStaticLexicon:(struct _LXLexicon { }*)arg1;
- (void)setTextDecoder:(id)arg1;
- (void)setTextReplacementLowercasedKeyMapping:(id)arg1;
- (void)setTextReplacements:(id)arg1;
- (void)setTransliterationVariantMap:(struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)arg1;
- (void)setWordLanguageModel:(void*)arg1;
- (id)sketchCodeForDescription:(id)arg1;
- (id)sketchDescriptionForCode:(int)arg1;
- (id)spellChecker;
- (id)starCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _LXLexicon { }*)staticLexicon;
- (id)strokeIndexesForLastCharacter;
- (id)supportedCharacterSet;
- (id)supportedStrings;
- (id)textDecoder;
- (id)textRecognitionResultForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)textRecognitionResultForDrawing:(id)arg1 options:(id)arg2 writingStatistics:(id)arg3 shouldCancel:(id /* block */)arg4;
- (id)textReplacementLowercasedKeyMapping;
- (id)textReplacements;
- (id)tokenizedTextResultForChineseLatticePaths:(const void*)arg1 maximumPathCount:(unsigned long long)arg2 network:(void*)arg3 mecabraIDs:(void*)arg4 startNode:(long long)arg5 endNode:(long long)arg6 segmentGroup:(id)arg7;
- (id)tokenizedTextResultForRomanLatticePaths:(const void*)arg1 history:(id)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 startNode:(long long)arg4 segmentGroup:(id)arg5;
- (id)tokenizedTextResultForRomanSingleWordLatticePaths:(const void*)arg1 history:(id)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 startNode:(long long)arg4 segmentGroup:(id)arg5;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)transliterationVariantMap;
- (id)transliterationVariantsForString:(id)arg1;
- (id)triangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)updateAddressBookLexicon:(id)arg1;
- (void)updateMecabraWithRegionalOTAAssets:(id)arg1 nonRegionalOTAAssets:(id)arg2;
- (void)updateUserDictionaryLexicon:(id)arg1;
- (id)whitelistMecabraRareCharacters;
- (void*)wordLanguageModel;

@end
