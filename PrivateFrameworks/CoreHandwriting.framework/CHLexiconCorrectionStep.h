/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHLexiconCorrectionStep : CHPostprocessingStep {
    int  _autoCapitalizationMode;
    NSCharacterSet * _consumableStrokesCharSet;
    const struct _LXLexicon { } * _customLexicon;
    const struct _LXLexicon { } * _customPhraseLexicon;
    NSCharacterSet * _fullWidthPunctuationThatExpectsUppercaseAfter;
    void * _lmVocabulary;
    NSLocale * _locale;
    CHStringOVSChecker * _ovsStringChecker;
    const struct _LXLexicon { } * _phraseLexicon;
    NSCharacterSet * _punctuationThatExpectsUppercaseAfter;
    bool  _shouldAutoCapitalize;
    bool  _shouldAutoCorrect;
    CHSpellChecker * _spellChecker;
    const struct _LXLexicon { } * _staticLexicon;
    NSDictionary * _textReplacements;
}

@property (nonatomic, readonly) int autoCapitalizationMode;
@property (nonatomic, retain) NSCharacterSet *consumableStrokesCharSet;
@property (nonatomic) const struct _LXLexicon { }*customLexicon;
@property (nonatomic) const struct _LXLexicon { }*customPhraseLexicon;
@property (nonatomic, retain) NSCharacterSet *fullWidthPunctuationThatExpectsUppercaseAfter;
@property (nonatomic) void*lmVocabulary;
@property (nonatomic, retain) NSLocale *locale;
@property (nonatomic, retain) CHStringOVSChecker *ovsStringChecker;
@property (nonatomic) const struct _LXLexicon { }*phraseLexicon;
@property (nonatomic, retain) NSCharacterSet *punctuationThatExpectsUppercaseAfter;
@property (nonatomic) bool shouldAutoCapitalize;
@property (nonatomic) bool shouldAutoCorrect;
@property (nonatomic, retain) CHSpellChecker *spellChecker;
@property (nonatomic) const struct _LXLexicon { }*staticLexicon;
@property (nonatomic, retain) NSDictionary *textReplacements;

+ (id)validatedTokenForCorrectedToken:(id)arg1 rawToken:(id)arg2;

- (void).cxx_destruct;
- (id)applyCorrectionsAcrossToken:(id)arg1 isFirstToken:(bool)arg2 contextBeforeToken:(id)arg3 shouldCapitalizeGivenHistory:(bool)arg4 textReplacements:(id)arg5 isSingleIsolatedCharacter:(bool)arg6;
- (id)applyCorrectionsOnSingleToken:(id)arg1 isFirstToken:(bool)arg2 contextBeforeToken:(id)arg3 shouldCapitalizeGivenHistory:(bool)arg4 textReplacements:(id)arg5 isSingleIsolatedCharacter:(bool)arg6 allowSpellChecker:(bool)arg7;
- (id)applyLexiconCorrections:(id)arg1 shouldCapitalizeWord:(bool)arg2 shouldSkipEntryCorrection:(bool)arg3 outBestTokenIndex:(long long*)arg4 bestLexiconTokenScore:(double*)arg5 textReplacements:(id)arg6 contextBeforeToken:(id)arg7 allowSpellChecker:(bool)arg8;
- (int)autoCapitalizationMode;
- (id)consumableStrokesCharSet;
- (id)createPseudoTokensFromToken:(id)arg1;
- (const struct _LXLexicon { }*)customLexicon;
- (const struct _LXLexicon { }*)customPhraseLexicon;
- (void)dealloc;
- (id)fullWidthPunctuationThatExpectsUppercaseAfter;
- (id)getSpellCorrectedToken:(id)arg1 contextBeforeToken:(id)arg2;
- (id)initWithAutoCapitalizationMode:(int)arg1 shouldAutoCorrect:(bool)arg2 shouldAutoCapitalize:(bool)arg3 locale:(id)arg4 staticLexicon:(struct _LXLexicon { }*)arg5 customLexicon:(struct _LXLexicon { }*)arg6 phraseLexicon:(struct _LXLexicon { }*)arg7 customPhraseLexicon:(struct _LXLexicon { }*)arg8 spellChecker:(id)arg9 lmVocabulary:(void*)arg10 ovsStringChecker:(id)arg11 textReplacements:(id)arg12;
- (void*)lmVocabulary;
- (id)locale;
- (id)ovsStringChecker;
- (const struct _LXLexicon { }*)phraseLexicon;
- (id)process:(id)arg1 options:(id)arg2;
- (id)punctuationThatExpectsUppercaseAfter;
- (void)setConsumableStrokesCharSet:(id)arg1;
- (void)setCustomLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setCustomPhraseLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setFullWidthPunctuationThatExpectsUppercaseAfter:(id)arg1;
- (void)setLmVocabulary:(void*)arg1;
- (void)setLocale:(id)arg1;
- (void)setOvsStringChecker:(id)arg1;
- (void)setPhraseLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setPunctuationThatExpectsUppercaseAfter:(id)arg1;
- (void)setShouldAutoCapitalize:(bool)arg1;
- (void)setShouldAutoCorrect:(bool)arg1;
- (void)setSpellChecker:(id)arg1;
- (void)setStaticLexicon:(const struct _LXLexicon { }*)arg1;
- (void)setTextReplacements:(id)arg1;
- (bool)shouldAutoCapitalize;
- (bool)shouldAutoCorrect;
- (id)spellChecker;
- (const struct _LXLexicon { }*)staticLexicon;
- (id)textReplacements;

@end
