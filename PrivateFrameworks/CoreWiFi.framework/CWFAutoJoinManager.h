/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreWiFi.framework/CoreWiFi
 */

@interface CWFAutoJoinManager : NSObject {
    CWFAutoJoinRequest * _activeRequest;
    id /* block */  _allowAutoHotspotHandler;
    id /* block */  _allowAutoJoinHandler;
    id /* block */  _allowHotspotHandler;
    id /* block */  _allowJoinCandidateHandler;
    id /* block */  _allowKnownNetworkHandler;
    id /* block */  _associateToNetworkHandler;
    CWFScanResult * _associatedNetwork;
    unsigned long long  _beginTimestamp;
    id /* block */  _browseForHotspotsHandler;
    CWFAutoJoinMetric * _cachedMetric;
    bool  _cancelled;
    id /* block */  _connectToHotspotHandler;
    NSMutableDictionary * _deferredColocatedJoinCandidateMap;
    bool  _didConfigurationChangeSincePreviousAttempt;
    id /* block */  _eventHandler;
    NSMutableSet * _failedToJoinKnownNetworkIDs;
    NSMutableSet * _hiddenNetworkChannels;
    NSObject<OS_dispatch_queue> * _internalQueue;
    bool  _invalidated;
    id /* block */  _invalidationHandler;
    bool  _isNextRequestScheduled;
    bool  _isRetryScheduled;
    id /* block */  _joinCandidateComparator;
    id /* block */  _knownNetworkComparator;
    NSSet * _knownNetworks;
    CLLocation * _location;
    CWFAutoJoinMetric * _metric;
    NSObject<OS_dispatch_source> * _nextRequestTimer;
    NSMutableArray * _pendingRequests;
    id /* block */  _performGASQueryHandler;
    NSArray * _preferredChannels;
    long long  _previousNonRetryTrigger;
    bool  _requeued;
    NSMutableDictionary * _retryIntervalMap;
    long long  _retrySchedule;
    unsigned long long  _retryScheduleIndex;
    NSObject<OS_dispatch_source> * _retryTimer;
    id /* block */  _scanForNetworksHandler;
    long long  _state;
    CWFAutoJoinStatistics * _statistics;
    NSObject<OS_dispatch_source> * _statisticsSubmissionTimer;
    NSSet * _supportedChannels;
    NSObject<OS_dispatch_queue> * _targetQueue;
    NSMutableDictionary * _throttleIntervalMap;
    NSMutableDictionary * _throttleTimestampMap;
    NSMutableDictionary * _triggerTimestampMap;
    NSError * _underlyingCancelError;
    id /* block */  _updateKnownNetworkHandler;
}

@property (copy) id /* block */ allowAutoHotspotHandler;
@property (copy) id /* block */ allowAutoJoinHandler;
@property (copy) id /* block */ allowHotspotHandler;
@property (copy) id /* block */ allowJoinCandidateHandler;
@property (copy) id /* block */ allowKnownNetworkHandler;
@property (copy) id /* block */ associateToNetworkHandler;
@property (copy) CWFScanResult *associatedNetwork;
@property (copy) id /* block */ browseForHotspotsHandler;
@property (copy) id /* block */ connectToHotspotHandler;
@property (copy) id /* block */ eventHandler;
@property (copy) id /* block */ invalidationHandler;
@property (copy) id /* block */ joinCandidateComparator;
@property (copy) id /* block */ knownNetworkComparator;
@property (copy) NSSet *knownNetworks;
@property (copy) CLLocation *location;
@property (readonly) CWFAutoJoinMetric *metric;
@property (copy) id /* block */ performGASQueryHandler;
@property (copy) NSArray *preferredChannels;
@property long long retrySchedule;
@property (copy) id /* block */ scanForNetworksHandler;
@property (readonly) CWFAutoJoinStatistics *statistics;
@property (copy) NSSet *supportedChannels;
@property (retain) NSObject<OS_dispatch_queue> *targetQueue;
@property (copy) id /* block */ updateKnownNetworkHandler;

- (void).cxx_destruct;
- (void)__addMatchingThrottleInterval:(unsigned long long)arg1 triggers:(id)arg2;
- (void)__addRequest:(id)arg1;
- (void)__addWilcardThrottleInterval:(unsigned long long)arg1 triggers:(id)arg2;
- (long long)__allowAutoHotspotWithTrigger:(long long)arg1 error:(id*)arg2;
- (bool)__allowAutoJoinWithTrigger:(long long)arg1 error:(id*)arg2;
- (bool)__allowHotspot:(id)arg1 error:(id*)arg2;
- (bool)__allowJoinCandidate:(id)arg1 trigger:(long long)arg2 error:(id*)arg3;
- (bool)__allowKnownNetwork:(id)arg1 trigger:(long long)arg2 error:(id*)arg3;
- (unsigned long long)__applyRetryIntervalSkew:(unsigned long long)arg1;
- (id)__basicChannelRepresentation:(id)arg1;
- (id)__browseForHotspotsWithTimeout:(unsigned long long)arg1 maxCacheAge:(unsigned long long)arg2 cacheOnly:(bool)arg3 error:(id*)arg4;
- (id)__cachedScanResultsWithChannelList:(id)arg1 maxCacheAge:(unsigned long long)arg2 ANQPElementIDList:(id)arg3 maxANQPCacheAge:(unsigned long long)arg4;
- (long long)__calloutToAllowAutoHotspotWithTrigger:(long long)arg1 error:(id*)arg2;
- (bool)__calloutToAllowAutoJoinWithTrigger:(long long)arg1 error:(id*)arg2;
- (bool)__calloutToAllowHotspot:(id)arg1 error:(id*)arg2;
- (bool)__calloutToAllowJoinCandidate:(id)arg1 trigger:(long long)arg2 error:(id*)arg3;
- (bool)__calloutToAllowKnownNetwork:(id)arg1 trigger:(long long)arg2 error:(id*)arg3;
- (bool)__calloutToAssociateToNetwork:(id)arg1 error:(id*)arg2;
- (id)__calloutToBrowseForHotspotsWithTimeout:(unsigned long long)arg1 maxCacheAge:(unsigned long long)arg2 cacheOnly:(bool)arg3 error:(id*)arg4;
- (bool)__calloutToConnectToHotspot:(id)arg1 error:(id*)arg2;
- (id)__calloutToPerformGASQueryWithParameters:(id)arg1 GASQueryNetworks:(id*)arg2 error:(id*)arg3;
- (id)__calloutToScanForNetworksWithParameters:(id)arg1 scanChannels:(id*)arg2 error:(id*)arg3;
- (bool)__connectToHotspot:(id)arg1 error:(id*)arg2;
- (id)__descriptionForError:(id)arg1;
- (bool)__discoverKnownNetworksWithContext:(id)arg1 error:(id*)arg2;
- (bool)__isAutoJoinCancelled:(id*)arg1;
- (bool)__isAutoJoinRequeued;
- (bool)__knownNetworkIsMultiband:(id)arg1;
- (bool)__knownNetworksList:(id)arg1 containsMatchingKnownNetwork:(id)arg2;
- (bool)__matchAndJoinCachedScanResults:(id)arg1 context:(id)arg2 error:(id*)arg3;
- (bool)__matchAndJoinScanResults:(id)arg1 allowPreAssociationScan:(bool)arg2 context:(id)arg3 error:(id*)arg4;
- (bool)__matchAndJoinScanResults:(id)arg1 fromCache:(bool)arg2 allowPreAssociationScan:(bool)arg3 context:(id)arg4 error:(id*)arg5;
- (id)__morePreferredKnownNetworksWithCandidate:(id)arg1 knownNetworks:(id)arg2 context:(id)arg3;
- (bool)__nextRequest;
- (unsigned long long)__nextRequestInterval;
- (id)__passpointScanResults:(id)arg1;
- (bool)__performAutoHotspotWithBrowseTimeout:(unsigned long long)arg1 maxCacheAge:(unsigned long long)arg2 cacheOnly:(bool)arg3 error:(id*)arg4;
- (void)__performAutoJoin;
- (id)__performGASQueryWithScanResults:(id)arg1 ANQPElementIDList:(id)arg2 maxCacheAge:(unsigned long long)arg3 cacheOnly:(bool)arg4 error:(id*)arg5;
- (bool)__performJoinWithNetwork:(id)arg1 error:(id*)arg2;
- (id)__performPreAssociationScanWithContext:(id)arg1 network:(id)arg2;
- (id)__performScanWithChannelList:(id)arg1 SSIDList:(id)arg2 passive:(bool)arg3 dwellTime:(unsigned long long)arg4 maxCacheAge:(unsigned long long)arg5 cacheOnly:(bool)arg6 isPreAssociationScan:(bool)arg7 error:(id*)arg8;
- (void)__prepareKnownNetworksContext:(id)arg1;
- (id)__refreshKnownNetwork:(id)arg1;
- (void)__removeRedundantRequests:(id)arg1;
- (id)__retryInterval;
- (id)__retryIntervalWithScheduleIndex:(unsigned long long)arg1;
- (long long)__retryTriggerForRetrySchedule:(long long)arg1;
- (void)__setupRetryIntervals;
- (void)__setupThrottleIntervals;
- (bool)__shouldAllowAutoHotspotForTrigger:(long long)arg1;
- (bool)__shouldAllowPreAssocScan;
- (bool)__shouldBypassUnusedNetworkPeriodCheckForTrigger:(long long)arg1;
- (bool)__shouldIgnoreRequestWithTrigger:(long long)arg1;
- (bool)__shouldInvokeImmediatelyForTrigger:(long long)arg1;
- (bool)__shouldPrioritizeRetryOverNewRequest:(long long)arg1;
- (bool)__shouldResetRetryIntervalIndexForTrigger:(long long)arg1;
- (bool)__shouldThrottleAutoJoinTrigger:(long long)arg1;
- (void)__sortHotspotCandidates:(id)arg1;
- (void)__sortJoinCandidates:(id)arg1;
- (void)__sortKnownNetworks:(id)arg1;
- (void)__sortKnownNetworksByJoinTimestamp:(id)arg1;
- (void)__updateAutoJoinState:(long long)arg1;
- (void)__updateCachedMetricAndStatistics:(id)arg1;
- (void)__updateDiscoverTimestampForJoinCandidates:(id)arg1;
- (void)__updateNextRequestTimer;
- (void)__updateRetrySchedule;
- (void)__updateStatisticsWithPreAssocScanChannels:(id)arg1;
- (void)__updateStatisticsWithScanChannels:(id)arg1;
- (id /* block */)allowAutoHotspotHandler;
- (id /* block */)allowAutoJoinHandler;
- (id /* block */)allowHotspotHandler;
- (id /* block */)allowJoinCandidateHandler;
- (id /* block */)allowKnownNetworkHandler;
- (id /* block */)associateToNetworkHandler;
- (id)associatedNetwork;
- (id /* block */)browseForHotspotsHandler;
- (void)cancelAutoJoinWithUUID:(id)arg1 error:(id)arg2 reply:(id /* block */)arg3;
- (id /* block */)connectToHotspotHandler;
- (id /* block */)eventHandler;
- (id)init;
- (void)invalidate;
- (id /* block */)invalidationHandler;
- (id /* block */)joinCandidateComparator;
- (id /* block */)knownNetworkComparator;
- (id)knownNetworks;
- (id)location;
- (id)metric;
- (id)performAutoJoinWithParameters:(id)arg1 reply:(id /* block */)arg2;
- (id /* block */)performGASQueryHandler;
- (id)preferredChannels;
- (void)resetStatistics;
- (long long)retrySchedule;
- (id /* block */)scanForNetworksHandler;
- (void)setAllowAutoHotspotHandler:(id /* block */)arg1;
- (void)setAllowAutoJoinHandler:(id /* block */)arg1;
- (void)setAllowHotspotHandler:(id /* block */)arg1;
- (void)setAllowJoinCandidateHandler:(id /* block */)arg1;
- (void)setAllowKnownNetworkHandler:(id /* block */)arg1;
- (void)setAssociateToNetworkHandler:(id /* block */)arg1;
- (void)setAssociatedNetwork:(id)arg1;
- (void)setBrowseForHotspotsHandler:(id /* block */)arg1;
- (void)setConnectToHotspotHandler:(id /* block */)arg1;
- (void)setEventHandler:(id /* block */)arg1;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setJoinCandidateComparator:(id /* block */)arg1;
- (void)setKnownNetworkComparator:(id /* block */)arg1;
- (void)setKnownNetworks:(id)arg1;
- (void)setLocation:(id)arg1;
- (void)setPerformGASQueryHandler:(id /* block */)arg1;
- (void)setPreferredChannels:(id)arg1;
- (void)setRetrySchedule:(long long)arg1;
- (void)setScanForNetworksHandler:(id /* block */)arg1;
- (void)setSupportedChannels:(id)arg1;
- (void)setTargetQueue:(id)arg1;
- (void)setUpdateKnownNetworkHandler:(id /* block */)arg1;
- (id)statistics;
- (id)supportedChannels;
- (id)targetQueue;
- (id /* block */)updateKnownNetworkHandler;

@end
