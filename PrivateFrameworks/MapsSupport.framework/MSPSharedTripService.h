/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MapsSupport.framework/MapsSupport
 */

@interface MSPSharedTripService : NSObject <MSPSharedTripContactControllerDelegate, MSPSharedTripXPCClient, MSPSharedTripXPCServer> {
    NSData * _archivedSharingState;
    NSObject<OS_dispatch_group> * _archivedSharingStateGroup;
    NSObject<OS_dispatch_group> * _checkinDispatchGroup;
    bool  _confirmedMapsIsInstalled;
    NSXPCConnection * _connection;
    bool  _connectionError;
    unsigned long long  _connectionRetryCounter;
    NSObject<OS_dispatch_queue> * _isolationQueue;
    MSPMapsPaths * _mapsPaths;
    unsigned long long  _permissions;
    NSMutableArray * _receivedTrips;
    GEOObserverHashTable * _receivingObservers;
    NSDate * _reconnectionBackoffUntilDate;
    GEOObserverHashTable * _sendingObservers;
    id  _serverDisabledDefaultListener;
    MSPSharedTripContactController * _sharingContactController;
    MSPSharedTripSharingIdentity * _sharingIdentity;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _sharingIdentityLock;
    NSMutableDictionary * _subscriptionTokensByTripID;
    id  _userDisabledDefaultListener;
}

@property (nonatomic, readonly) bool canReceiveTrips;
@property (nonatomic, readonly) bool canShareTrip;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *receivedTrips;
@property (nonatomic, readonly) NSArray *receivers;
@property (nonatomic, readonly) MSPSharedTripSharingIdentity *sharingIdentity;
@property (readonly) Class superclass;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)_addSubscriptionTokenForTripID:(id)arg1;
- (id)_archivedSharingStateGroup;
- (void)_blockSharedTrip:(id)arg1;
- (void)_checkEnabledState;
- (void)_checkin;
- (void)_checkinWithCompletion:(id /* block */)arg1;
- (void)_fetchActiveHandlesWithCompletion:(id /* block */)arg1;
- (void)_fetchArchivedSharingStateWithCompletion:(id /* block */)arg1;
- (void)_fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)arg1;
- (void)_fetchSharedTripsWithCompletion:(id /* block */)arg1;
- (void)_fetchSharingIdentityWithCompletion:(id /* block */)arg1;
- (void)_handleCheckinWithSharingIdentity:(id)arg1 activeRecipients:(id)arg2 receivedTrips:(id)arg3 permissions:(unsigned long long)arg4;
- (id)_insertOrUpdateTrip:(id)arg1;
- (bool)_isMapsInstalled;
- (void)_openConnectionIfNeeded;
- (void)_performBlockAfterInitialSync:(id /* block */)arg1;
- (void)_performBlockWhenCheckinCompleted:(id /* block */)arg1;
- (void)_purgeToken:(id)arg1 forTripID:(id)arg2;
- (id)_remoteObjectProxy;
- (id)_remoteObjectProxyWithErrorHandler:(id /* block */)arg1;
- (void)_reportUserConfirmationOfSharingIdentity:(id)arg1 completion:(id /* block */)arg2;
- (void)_resetCheckinIdentityAndPermissions;
- (void)_startSharingTripWithContacts:(id)arg1 completion:(id /* block */)arg2;
- (void)_startSharingTripWithMessagesContacts:(id)arg1 completion:(id /* block */)arg2;
- (void)_startSharingTripWithMessagesGroup:(id)arg1 completion:(id /* block */)arg2;
- (void)_startSharingWithContact:(id)arg1 completion:(id /* block */)arg2;
- (void)_stopAllSharingWithCompletion:(id /* block */)arg1;
- (void)_stopSharingTrip;
- (void)_stopSharingTripWithContacts:(id)arg1;
- (void)_stopSharingTripWithMessagesGroup:(id)arg1;
- (void)_stopSharingWithContact:(id)arg1 completion:(id /* block */)arg2;
- (void)_subscribeToSharedTripUpdatesWithIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (id)_subscriptionTokensForTripID:(id)arg1 createIfNeeded:(bool)arg2;
- (bool)_supportsArchivingSharingState;
- (void)_updateArchivedSharingState;
- (void)_validateCurrentConfigurationWithCompletion:(id /* block */)arg1;
- (void)addReceivingObserver:(id)arg1;
- (void)addSendingObserver:(id)arg1;
- (id)archivedSharingState;
- (void)blockSharedTrip:(id)arg1;
- (void)blockSharedTripWithIdentifier:(id)arg1;
- (bool)canReceiveTrips;
- (bool)canShareTrip;
- (void)checkin;
- (void)checkinWithCompletion:(id /* block */)arg1;
- (id)contactsFromArchivedTripSharingState:(id)arg1;
- (void)dealloc;
- (void)destinationDidUpdateForSharedTrip:(id)arg1;
- (void)destinationReachedDidUpdateForSharedTrip:(id)arg1;
- (void)etaDidUpdateForSharedTrip:(id)arg1;
- (void)fetchActiveHandlesWithCompletion:(id /* block */)arg1;
- (void)fetchArchivedSharingStateWithCompletion:(id /* block */)arg1;
- (void)fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)arg1;
- (void)fetchSharedTripsWithCompletion:(id /* block */)arg1;
- (void)fetchSharingIdentityWithCompletion:(id /* block */)arg1;
- (id)init;
- (bool)isSharingWithContact:(id)arg1;
- (void)performBlockAfterInitialSync:(id /* block */)arg1;
- (void)purgeToken:(id)arg1 forTripID:(id)arg2;
- (id)receivedTrips;
- (id)receivers;
- (void)refreshReceivedTripsWithCompletion:(id /* block */)arg1;
- (void)refreshSharingIdentityWithCompletion:(id /* block */)arg1;
- (void)removeReceivingObserver:(id)arg1;
- (void)removeSendingObserver:(id)arg1;
- (void)reportUserConfirmationOfSharingIdentity:(id)arg1 completion:(id /* block */)arg2;
- (void)routeDidUpdateForSharedTrip:(id)arg1;
- (void)sharedTripContactController:(id)arg1 didUpdateActiveContactsValues:(id)arg2;
- (void)sharedTripDidBecomeAvailable:(id)arg1;
- (void)sharedTripDidBecomeUnavailable:(id)arg1;
- (void)sharedTripDidClose:(id)arg1;
- (void)sharedTripDidUpdateRecipients:(id)arg1;
- (void)sharedTripInvalidatedWithError:(id)arg1;
- (id)sharingIdentity;
- (void)sharingIdentityDidChange:(id)arg1;
- (void)startSharingTripWithContacts:(id)arg1 completion:(id /* block */)arg2;
- (void)startSharingTripWithMessagesContacts:(id)arg1 completion:(id /* block */)arg2;
- (void)startSharingTripWithMessagesGroup:(id)arg1 completion:(id /* block */)arg2;
- (void)startSharingWithContact:(id)arg1 completion:(id /* block */)arg2;
- (void)stopAllSharingWithCompletion:(id /* block */)arg1;
- (void)stopSharingTrip;
- (void)stopSharingTripWithContacts:(id)arg1;
- (void)stopSharingTripWithMessagesGroup:(id)arg1;
- (void)stopSharingWithContact:(id)arg1 completion:(id /* block */)arg2;
- (void)subscribeToSharedTripUpdatesWithIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)unsubscribeFromSharedTripUpdatesWithIdentifier:(id)arg1 completion:(id /* block */)arg2;

@end
