/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MapsSupport.framework/MapsSupport
 */

@interface MSPCloudContainer : NSObject <MSPCloudNotificationReceiver> {
    MSPCloudKitAccountAccess * _access;
    MSPCloudContainerCache * _cache;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    NSError * _cancelError;
    bool  _canceled;
    MSPContainer * _container;
    bool  _hasActiveSubscription;
    MSPJournal * _journal;
    NSObject<OS_dispatch_queue> * _observerQueue;
    NSHashTable * _observers;
    unsigned long long  _operationBatchSize;
    NSMutableDictionary * _pendingOperations;
    bool  _requiresRemoteFetch;
    bool  _useSecureContainer;
}

@property (nonatomic, retain) MSPCloudKitAccountAccess *access;
@property (nonatomic, retain) MSPCloudContainerCache *cache;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, copy) NSError *cancelError;
@property (nonatomic) bool canceled;
@property (nonatomic, readonly) CKContainer *ckContainer;
@property (nonatomic, retain) MSPContainer *container;
@property (nonatomic) bool hasActiveSubscription;
@property (nonatomic, retain) MSPJournal *journal;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *observerQueue;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic) unsigned long long operationBatchSize;
@property (nonatomic, retain) NSMutableDictionary *pendingOperations;
@property (nonatomic) bool useSecureContainer;

- (void).cxx_destruct;
- (void)_forEachObserver:(id /* block */)arg1;
- (id)_modifyRecordsOperationWithRecordsToSave:(id)arg1 toDelete:(id)arg2 group:(id)arg3 modifyRecordsCompletion:(id /* block */)arg4;
- (id)access;
- (void)addCKOperation:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)batchedOperationsFromRecords:(id)arg1 toDelete:(id)arg2 group:(id)arg3 batchSize:(unsigned long long)arg4 modifyRecordsCompletionBlock:(id /* block */)arg5;
- (id)cache;
- (id)callbackQueue;
- (id)cancelError;
- (void)cancelMergeWithError:(id)arg1;
- (void)cancelPendingOperationsWithError:(id)arg1;
- (bool)canceled;
- (id)ckContainer;
- (void)configureCKOperation:(id)arg1 withGroup:(id)arg2;
- (id)container;
- (void)containerDidEraseContents;
- (id)description;
- (void)didReceiveRemoteNotification:(id)arg1;
- (void)fetchChangesWithGroup:(id)arg1 completion:(id /* block */)arg2;
- (void)handleMergeError:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasActiveSubscription;
- (id)initWithContainer:(id)arg1 accountID:(id)arg2;
- (id)initWithContainer:(id)arg1 cache:(id)arg2;
- (id)initWithContainer:(id)arg1 cache:(id)arg2 access:(id)arg3;
- (bool)isCanceled;
- (id)journal;
- (void)mergeLocalChangesFromReplica:(id)arg1 withAppliedRemoteChanges:(id)arg2 group:(id)arg3 completion:(id /* block */)arg4;
- (id)mergeOptionsForEarliestKnownSyncDate:(id)arg1;
- (void)mergeRemoteChanges:(id)arg1 withGroup:(id)arg2 completion:(id /* block */)arg3;
- (void)mergeWithGroup:(id)arg1 completion:(id /* block */)arg2;
- (id)observerQueue;
- (id)observers;
- (unsigned long long)operationBatchSize;
- (id)pendingOperations;
- (void)pushChanges:(id)arg1 withGroup:(id)arg2 completion:(id /* block */)arg3;
- (void)removeCloudContainerWithGroup:(id)arg1 completion:(id /* block */)arg2;
- (void)removeObserver:(id)arg1;
- (void)removePendingOperationWithID:(id)arg1;
- (Class)replicaRecordClass;
- (void)setAccess:(id)arg1;
- (void)setCache:(id)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setCancelError:(id)arg1;
- (void)setCanceled:(bool)arg1;
- (void)setContainer:(id)arg1;
- (void)setHasActiveSubscription:(bool)arg1;
- (void)setJournal:(id)arg1;
- (void)setObserverQueue:(id)arg1;
- (void)setObservers:(id)arg1;
- (void)setOperationBatchSize:(unsigned long long)arg1;
- (void)setPendingOperations:(id)arg1;
- (void)setUseSecureContainer:(bool)arg1;
- (void)setupCloudContainerWithGroup:(id)arg1 completion:(id /* block */)arg2;
- (void)subscribeToChangesWithCompletion:(id /* block */)arg1;
- (bool)useSecureContainer;
- (bool)useZoneWidePCS;
- (id)zoneID;
- (id)zoneName;
- (id)zoneSubscriptionName;

@end
