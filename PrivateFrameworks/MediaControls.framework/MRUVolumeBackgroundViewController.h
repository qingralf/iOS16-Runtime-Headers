/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls
 */

@interface MRUVolumeBackgroundViewController : UIViewController <CCUIContentModuleBackgroundViewController, MRUAudioFormatControllerDelegate, MRUListeningModeControllerDelegate, MRUSpatialAudioPreferencesControllerDelegate, MRUSystemOutputDeviceRouteControllerObserver, UIGestureRecognizerDelegate> {
    MRUAudioFormatController * _audioFormatController;
    <MRUVolumeBackgroundViewControllerDelegate> * _delegate;
    MRUListeningModeController * _listeningModeController;
    MRUSystemOutputDeviceRouteController * _outputDeviceRouteController;
    MRUSpatialAudioPreferencesController * _spatialAudioPreferencesController;
    float  _systemVolumeValue;
}

@property (nonatomic, retain) MRUAudioFormatController *audioFormatController;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MRUVolumeBackgroundViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasExpandedButtons;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) MRUListeningModeController *listeningModeController;
@property (nonatomic, retain) MRUSystemOutputDeviceRouteController *outputDeviceRouteController;
@property (nonatomic, retain) MRUSpatialAudioPreferencesController *spatialAudioPreferencesController;
@property (readonly) Class superclass;
@property (nonatomic) float systemVolumeValue;
@property (nonatomic, retain) MRUVolumeBackgroundView *view;
@property (nonatomic, retain) MRUVolumeBackgroundView *viewIfLoaded;

- (void).cxx_destruct;
- (bool)_canShowWhileLocked;
- (id)audioFormatController;
- (void)audioFormatControllerDidChangeAudioFormat:(id)arg1;
- (void)audioFormatControllerDidChangeBundleID:(id)arg1;
- (void)collapseExpandableButtons;
- (id)delegate;
- (void)didEndEditingPrimaryListeningModeButton:(id)arg1;
- (void)didEndEditingSecondartListeningModeButton:(id)arg1;
- (void)didTapPrimaryListeningModeButton:(id)arg1;
- (void)didTapSecondaryListeningModeButton:(id)arg1;
- (void)didTapSpatialAudioModeButton:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectiveContentFrameForContainerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hasExpandedButtons;
- (id)initWithOutputDeviceRouteController:(id)arg1;
- (id)listeningModeController;
- (void)listeningModeController:(id)arg1 didChangePrimaryListeningMode:(id)arg2;
- (void)listeningModeController:(id)arg1 didChangeSecondaryListeningMode:(id)arg2;
- (void)loadView;
- (id)outputDeviceRouteController;
- (void)performLayoutWithAnimation:(id /* block */)arg1;
- (void)primaryListeningModeButtonDidChangeValue:(id)arg1;
- (void)secondaryListeningModeButtonDidChangeValue:(id)arg1;
- (void)setAudioFormatController:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setListeningModeController:(id)arg1;
- (void)setOutputDeviceRouteController:(id)arg1;
- (void)setSpatialAudioPreferencesController:(id)arg1;
- (void)setSystemVolumeValue:(float)arg1;
- (void)spatialAudioModeButtonDidChangeValue:(id)arg1;
- (id)spatialAudioPreferencesController;
- (void)spatialAudioPreferencesController:(id)arg1 didChangeAccessoryStereoHFPStatus:(int)arg2;
- (void)spatialAudioPreferencesController:(id)arg1 didChangeHeadTrackingSupported:(bool)arg2;
- (void)spatialAudioPreferencesController:(id)arg1 didChangeMonoAudioEnabled:(bool)arg2;
- (void)spatialAudioPreferencesController:(id)arg1 didSpatialAudioSupported:(bool)arg2;
- (void)spatialAudioPreferencesControllerDidChangePreferences:(id)arg1;
- (void)systemOutputDeviceRouteControllerDidUpdateOutputDeviceProperties:(id)arg1;
- (void)systemOutputDeviceRouteControllerDidUpdateOutputDevices:(id)arg1;
- (float)systemVolumeValue;
- (void)updateNowPlayingAudioFormat;
- (void)updateNowPlayingIcon;
- (void)updatePrimaryListeningModeButton;
- (void)updatePrimaryRouteView;
- (void)updateSecondaryListeningModeButton;
- (void)updateSecondaryRouteView;
- (void)updateSpatialAudioModeButton;
- (void)updateVisibility;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;

@end
