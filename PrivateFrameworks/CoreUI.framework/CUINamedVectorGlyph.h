/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI
 */

@interface CUINamedVectorGlyph : CUINamedLookup <NSCopying> {
    CUINamedLookup * _blackInterpolationSource;
    unsigned int  _canUsePathConcatenation;
    CUICatalog * _catalog;
    struct CGImage { } * _cgImageRef;
    short  _containsNamedColorStyles;
    unsigned int  _flippable;
    double  _fontMatchingScaleFactor;
    unsigned int  _generatedImage;
    long long  _glyphSize;
    long long  _glyphWeight;
    NSDictionary * _hierarchicalPaths;
    long long  _layoutDirection;
    double  _lookedupScaleFactor;
    NSDictionary * _multicolorPaths;
    double  _pointSize;
    NSDictionary * _templatePaths;
    CUINamedLookup * _ultralightInterpolationSource;
    double  _variableMaxValue;
    double  _variableMinValue;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentRectUnrounded;
@property (nonatomic, readonly) double baselineOffset;
@property (nonatomic, readonly) double baselineOffsetUnrounded;
@property (nonatomic, readonly) double capHeight;
@property (nonatomic, readonly) double capHeightUnrounded;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentBounds;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentBoundsUnrounded;
@property (nonatomic) double fontMatchingScaleFactor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } interiorAlignmentRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } interiorAlignmentRectUnrounded;
@property (nonatomic, readonly) bool isFlippable;
@property (nonatomic, readonly) long long preferredRenderingMode;
@property (nonatomic, readonly) float templateVersion;
@property double variableMaxValue;
@property double variableMinValue;

// Image: /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI

+ (id)_colorStyleNames;
+ (id)_knockoutStyleNames;
+ (id)_layerHierarchyStyleNames;

- (void).cxx_destruct;
- (const struct CGPath { }*)CGPath;
- (id)_blackInterpolationSource;
- (bool)_canUsePathConcatenation;
- (id)_catalog;
- (struct CGColor { }*)_colorForVariableThreshold:(double)arg1 inRangeColor:(struct CGColor { }*)arg2 outOfRangeColor:(struct CGColor { }*)arg3;
- (bool)_containsWideGamutColor;
- (void)_drawHierarchicalLayerNamed:(id)arg1 inContext:(struct CGContext { }*)arg2 colorResolver:(id /* block */)arg3;
- (void)_drawHierarchicalLayersInContext:(struct CGContext { }*)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 colorResolver:(id /* block */)arg4;
- (void)_drawMulticolorLayerNamed:(id)arg1 inContext:(struct CGContext { }*)arg2 colorResolver:(id /* block */)arg3;
- (void)_drawMulticolorLayersInContext:(struct CGContext { }*)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 colorResolver:(id /* block */)arg4;
- (void)_drawTemplateLayerNamed:(id)arg1 inContext:(struct CGContext { }*)arg2 scaleFactor:(double)arg3 targetSize:(struct CGSize { double x1; double x2; })arg4 primaryColor:(struct CGColor { }*)arg5 tertiaryColor:(struct CGColor { }*)arg6;
- (struct { double x1; double x2; double x3; double x4; })_interpolatedAlignmentRectInsetsWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(struct { double x1; double x2; double x3; double x4; })arg3 regular:(struct { double x1; double x2; double x3; double x4; })arg4 black:(struct { double x1; double x2; double x3; double x4; })arg5;
- (double)_interpolatedBaselineOffsetWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;
- (struct CGSize { double x1; double x2; })_interpolatedCanvasSizeWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(struct CGSize { double x1; double x2; })arg3 regular:(struct CGSize { double x1; double x2; })arg4 black:(struct CGSize { double x1; double x2; })arg5;
- (double)_interpolatedCapHeightWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;
- (struct CGPath { }*)_interpolatedPathWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralightSmall:(struct CGPath { }*)arg3 regularSmall:(struct CGPath { }*)arg4 blackSmall:(struct CGPath { }*)arg5;
- (id)_layersForRenderingMode:(int)arg1 inRendition:(id)arg2;
- (void)_lookupCatalogImageForIdiom:(long long)arg1;
- (id)_referencePathsForHierarchicalMode;
- (id)_referencePathsForMulticolorMode;
- (id)_referencePathsForTemplateMode;
- (double)_requestedPointSizeRatio;
- (void)_setBlackInterpolationSource:(id)arg1;
- (void)_setCanUsePathConcatenation:(bool)arg1;
- (void)_setCatalog:(id)arg1;
- (void)_setContainsNamedColorStyles:(short)arg1;
- (void)_setFlippable:(bool)arg1;
- (void)_setGlyphSize:(long long)arg1;
- (void)_setGlyphWeight:(long long)arg1;
- (void)_setLayoutDirection:(long long)arg1;
- (void)_setPointSize:(double)arg1;
- (void)_setScale:(double)arg1;
- (void)_setUltralightInterpolationSource:(id)arg1;
- (id)_stylePrefixForRenderingMode:(int)arg1;
- (id)_ultralightInterpolationSource;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRectForTargetSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRectUnrounded;
- (double)baselineOffset;
- (double)baselineOffsetUnrounded;
- (double)capHeight;
- (double)capHeightUnrounded;
- (bool)containsNamedColorStyle:(id)arg1;
- (bool)containsNamedColorStyles;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentBoundsUnrounded;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)debugDescription;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext { }*)arg2 withColorResolver:(id /* block */)arg3;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawInContext:(struct CGContext { }*)arg1 withPaletteColors:(id)arg2;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext { }*)arg2 withColorResolver:(id /* block */)arg3;
- (void)drawPaletteLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext { }*)arg2 withColorResolver:(id /* block */)arg3;
- (double)fontMatchingScaleFactor;
- (bool)generatedImage;
- (long long)glyphSize;
- (long long)glyphWeight;
- (id)graphicVariantWithOptions:(id)arg1;
- (unsigned long long)hash;
- (id)hierarchicalLayerThresholds;
- (id)hierarchyLayers;
- (id)hierarchyLevels;
- (struct CGImage { }*)image;
- (struct CGImage { }*)imageWithColorResolver:(id /* block */)arg1;
- (struct CGImage { }*)imageWithHierarchicalPrimaryColor:(struct CGColor { }*)arg1;
- (struct CGImage { }*)imageWithHierarchyColorResolver:(id /* block */)arg1;
- (struct CGImage { }*)imageWithPaletteColorResolver:(id /* block */)arg1;
- (struct CGImage { }*)imageWithPaletteColors:(id)arg1;
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 fromCatalog:(id)arg5 usingRenditionKey:(id)arg6 fromTheme:(unsigned long long)arg7;
- (id)intWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 weight:(long long)arg5 glyphSize:(long long)arg6 interpolatedFromRegular:(id)arg7 ultralight:(id)arg8 black:(id)arg9 fromCatalog:(id)arg10 themeRef:(unsigned long long)arg11;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })interiorAlignmentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })interiorAlignmentRectForTargetSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })interiorAlignmentRectUnrounded;
- (bool)isEqual:(id)arg1;
- (bool)isFlippable;
- (bool)isKnockoutEnabledForHierarchicalLayerAtIndex:(long long)arg1 opacity:(double*)arg2;
- (bool)isKnockoutEnabledForMulticolorLayerAtIndex:(long long)arg1 opacity:(double*)arg2;
- (bool)isKnockoutEnabledForPaletteLayerAtIndex:(long long)arg1 opacity:(double*)arg2;
- (id)knownAvailableVectorSizes;
- (long long)layoutDirection;
- (id)makeLayerWithColorResolver:(id /* block */)arg1;
- (id)multicolorColorNames;
- (id)multicolorLayerColorNames;
- (id)multicolorLayerThresholds;
- (unsigned long long)numberOfHierarchyLayers;
- (unsigned long long)numberOfMulticolorLayers;
- (unsigned long long)numberOfPaletteLayers;
- (unsigned long long)numberOfTemplateLayers;
- (id)paletteLayerThresholds;
- (id)paletteLevels;
- (double)pointSize;
- (long long)preferredRenderingMode;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2 hierarchicalPrimaryColor:(struct CGColor { }*)arg3;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2 withColorResolver:(id /* block */)arg3;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2 withHierarchyColorResolver:(id /* block */)arg3;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2 withPaletteColorResolver:(id /* block */)arg3;
- (struct CGImage { }*)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize { double x1; double x2; })arg2 withPaletteColors:(id)arg3;
- (struct CGSize { double x1; double x2; })referenceCanvasSize;
- (struct CGSVGDocument { }*)referenceGlyph;
- (double)referencePointSize;
- (double)scale;
- (void)setFontMatchingScaleFactor:(double)arg1;
- (void)setRepresentsOnDemandContent:(bool)arg1;
- (void)setVariableMaxValue:(double)arg1;
- (void)setVariableMinValue:(double)arg1;
- (id)templateLayerThresholds;
- (id)templateLayersInRendition:(id)arg1;
- (float)templateVersion;
- (double)variableMaxValue;
- (double)variableMinValue;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (id)UIImageWithAsset:(id)arg1 configuration:(id)arg2 flippedHorizontally:(bool)arg3;
- (id)configuration;

@end
