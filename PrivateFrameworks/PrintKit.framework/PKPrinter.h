/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PrintKit.framework/PrintKit
 */

@interface PKPrinter : NSObject <NSSecureCoding> {
    long long  _jobAccountIDSupport;
    NSArray * _jpegFeaturesSupported;
    PKPaperList * _paperList;
    NSDictionary * _translations;
    NSArray * _trays;
    long long  accessState;
    long long  btleMeasuredPower;
    NSUUID * btleUUID;
    bool  connectionShouldNotBeTrusted;
    bool  hasIdentifyPrinterOp;
    long long  identifyActionsSupported;
    bool  isFromMCProfile;
    bool  isLocal;
    struct _http_s { } * job_http;
    long long  kind;
    NSArray * mandatoryJobAttributes;
    int  maxCopies;
    int  maxDocumentPasswordLength;
    int  maxJPEGKBytes;
    int  maxJPEGXDimension;
    int  maxJPEGYDimension;
    int  maxPDFKBytes;
    NSString * name;
    int  preferred_landscape;
    NSDictionary * printInfoSupported;
    NSArray * printScalingSupported;
    int  printerStateReasons;
    NSMutableDictionary * privateData;
    long long  proximity;
    NSString * quotaManagementURL;
    int  recentRssiValues;
    NSMutableDictionary * specialFeedOrientation;
    long long  type;
}

@property (retain) NSDictionary *TXTRecord;
@property (readonly) bool _isAlwaysAvailable;
@property long long accessState;
@property (readonly) long long accessState;
@property long long btleMeasuredPower;
@property (retain) NSUUID *btleUUID;
@property (readonly) bool hasIdentifyPrinterOp;
@property (readonly) bool hasPrintInfoSupported;
@property (retain) NSString *hostname;
@property (readonly) long long identifyActionsSupported;
@property (readonly) bool isAdobeRGBSupported;
@property bool isFromMCProfile;
@property (readonly) bool isIPPS;
@property bool isLocal;
@property long long jobAccountIDSupport;
@property (readonly) long long jobTypesSupported;
@property (retain) NSArray *jpegFeaturesSupported;
@property (readonly) long long kind;
@property (readonly) NSArray *localizedNamesOfEmptyTrays;
@property (retain) NSString *name;
@property (readonly) bool needsSetup;
@property (retain) PKPaperList *paperList;
@property (retain) NSNumber *port;
@property (readonly) NSDictionary *printInfoSupported;
@property (readonly) NSURL *printerURL;
@property long long proximity;
@property (readonly, retain) NSString *scheme;
@property (readonly) bool setupSupportsPasswordScope;
@property (retain) NSDictionary *translations;
@property (retain) NSArray *trays;
@property (readonly) long long type;
@property (readonly) NSString *uuid;

+ (struct http_addrlist_s { struct http_addrlist_s {} *x1; union _http_addr_u { struct sockaddr { unsigned char x_1_2_1; unsigned char x_1_2_2; BOOL x_1_2_3[14]; } x_2_1_1; struct sockaddr_in { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned short x_2_2_3; struct in_addr { unsigned int x_4_3_1; } x_2_2_4; BOOL x_2_2_5[8]; } x_2_1_2; struct sockaddr_in6 { unsigned char x_3_2_1; unsigned char x_3_2_2; unsigned short x_3_2_3; unsigned int x_3_2_4; struct in6_addr { union { unsigned char x_1_4_1[16]; unsigned short x_1_4_2[8]; unsigned int x_1_4_3[4]; } x_5_3_1; } x_3_2_5; unsigned int x_3_2_6; } x_2_1_3; struct sockaddr_un { unsigned char x_4_2_1; unsigned char x_4_2_2; BOOL x_4_2_3[104]; } x_2_1_4; BOOL x_2_1_5[256]; } x2; }*)_createAddrList:(const char *)arg1 hostName:(const char *)arg2 port:(int)arg3;
+ (struct _ipp_s { }*)_data_to_ipp:(id)arg1;
+ (id)_ipp_to_data:(struct _ipp_s { }*)arg1;
+ (id)defaultPrinter;
+ (struct _ipp_s { }*)getAttributes:(const char **)arg1 count:(int)arg2 fromURI:(id)arg3;
+ (id)hardcodedURIs;
+ (bool)ippsIsRequired;
+ (void)listenForPrinterNotifications;
+ (bool)mcProfilePrintersOnlyAllowed;
+ (id)nameForHardcodedURI:(id)arg1;
+ (bool)printerLookupWithName:(id)arg1 andTimeout:(double)arg2;
+ (id)printerWithName:(id)arg1;
+ (id)printerWithName:(id)arg1 discoveryTimeout:(double)arg2;
+ (id)requiredPDL;
+ (bool)supportsSecureCoding;
+ (bool)urfIsOptional;
+ (bool)uriMatchesMCProfileAdded:(id)arg1;

- (id)TXTRecord;
- (id)TXTRecordWithTimeout:(int)arg1;
- (void)_checkAvailable:(double)arg1 queue:(id)arg2 completionHandler:(id /* block */)arg3;
- (struct _pk_proxy_s { }*)_httpConnectViaSelfHost:(int)arg1 msTimeout:(int)arg2;
- (bool)_isAlwaysAvailable;
- (long long)abortJob;
- (void)abortJobCompletionHandler:(id /* block */)arg1;
- (long long)accessState;
- (void)addRSSIValue:(id)arg1;
- (id)availableRollPapersPreferBorderless:(bool)arg1;
- (long long)btleMeasuredPower;
- (id)btleUUID;
- (void)cancelUnlock;
- (void)checkOperations:(struct _ipp_s { }*)arg1;
- (struct _ipp_s { }*)createRequest:(id)arg1 ofType:(id)arg2 url:(id)arg3;
- (void)dealloc;
- (id)description;
- (id)displayName;
- (void)doMedia2:(struct _ipp_s { }*)arg1;
- (void)encodeWithCoder:(id)arg1;
- (long long)feedOrientation:(id)arg1;
- (long long)finalizeJob:(int)arg1;
- (void)finalizeJob:(int)arg1 completionHandler:(id /* block */)arg2;
- (long long)finishJob;
- (void)finishJobCompletionHandler:(id /* block */)arg1;
- (struct _ipp_s { }*)getAttributes:(const char **)arg1 count:(int)arg2;
- (struct _ipp_s { }*)getPrinterAttributes;
- (struct _ipp_s { }*)getSupplyLevelAttributes;
- (void)getSupplyLevels:(id /* block */)arg1;
- (void)handlePrinterStateReasonsFromResponse:(struct _ipp_s { }*)arg1;
- (bool)hasIdentifyPrinterOp;
- (bool)hasPrintInfoSupported;
- (id)hostname;
- (long long)identifyActionsSupported;
- (void)identifySelf;
- (id)initWithCoder:(id)arg1;
- (id)initWithName:(id)arg1 TXT:(id)arg2;
- (id)initWithName:(id)arg1 TXTRecord:(id)arg2;
- (bool)isAdobeRGBSupported;
- (bool)isBonjour;
- (bool)isEqual:(id)arg1;
- (bool)isFromMCProfile;
- (bool)isIPPS;
- (bool)isLocal;
- (bool)isPaperReady:(id)arg1;
- (long long)jobAccountIDSupport;
- (long long)jobTypesSupported;
- (id)jpegFeaturesSupported;
- (long long)kind;
- (bool)knowsReadyPaperList;
- (id)loadTranslations;
- (id)localName;
- (id)localizedNamesOfEmptyTrays;
- (id)localizedPrinterWarnings;
- (id)location;
- (id)makeAndModel;
- (id)matchedPaper:(id)arg1 preferBorderless:(bool)arg2 withDuplexMode:(id)arg3 didMatch:(bool*)arg4;
- (id)name;
- (bool)needsSetup;
- (id)paperList;
- (id)paperListForDuplexMode:(id)arg1;
- (id)papersForDocumentWithSize:(struct CGSize { double x1; double x2; })arg1 andDuplex:(bool)arg2;
- (id)papersForDocumentWithSize:(struct CGSize { double x1; double x2; })arg1 scaleUpOnRoll:(bool)arg2 andDuplex:(bool)arg3;
- (id)papersForPhotoWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)pollForPrinterStatusQueue:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)port;
- (id)printInfoSupported;
- (id)printInfoSupported:(struct _ipp_s { }*)arg1;
- (long long)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3;
- (void)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)printerURL;
- (id)privateObjectForKey:(id)arg1;
- (long long)proximity;
- (void)reconfirmWithForce:(bool)arg1;
- (void)removeCredentialsFromKeychain;
- (bool)resolve;
- (bool)resolveIfNeeded;
- (bool)resolveWithTimeout:(int)arg1;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x1; double x2; })arg1;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x1; double x2; })arg1 forPhoto:(bool)arg2;
- (id)scheme;
- (long long)sendData:(const char *)arg1 ofLength:(long long)arg2;
- (void)setAccessState:(long long)arg1;
- (void)setAccessStateFromTXT;
- (void)setBtleMeasuredPower:(long long)arg1;
- (void)setBtleUUID:(id)arg1;
- (void)setHostname:(id)arg1;
- (void)setIsFromMCProfile:(bool)arg1;
- (void)setIsLocal:(bool)arg1;
- (void)setJobAccountIDSupport:(long long)arg1;
- (void)setJpegFeaturesSupported:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPaperList:(id)arg1;
- (void)setPort:(id)arg1;
- (void)setPrivateObject:(id)arg1 forKey:(id)arg2;
- (void)setProximity:(long long)arg1;
- (void)setTXTRecord:(id)arg1;
- (void)setTranslations:(id)arg1;
- (void)setTrays:(id)arg1;
- (bool)setupSupportsPasswordScope;
- (void)setupWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)showPassCodeForSetupWithCompletionHandler:(id /* block */)arg1;
- (long long)startJob:(id)arg1 ofType:(id)arg2;
- (bool)supportsJobAccountID;
- (id)translations;
- (id)trays;
- (id)txtRecordObjectForKey:(id)arg1;
- (long long)type;
- (void)unlockWithCompletionHandler:(id /* block */)arg1;
- (void)updateType;
- (id)uuid;
- (void)validatePassCode:(id)arg1 withCompletionHandler:(id /* block */)arg2;

@end
