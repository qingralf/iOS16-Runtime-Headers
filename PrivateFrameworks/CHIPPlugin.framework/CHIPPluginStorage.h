/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin
 */

@interface CHIPPluginStorage : HMFObject <HMFLogging, MTRPersistentStorageDelegate> {
    <CHIPPluginStorageDataSource> * _dataSource;
    <CHIPPluginStorageDelegate> * _delegate;
    <CHIPPluginFabricStorageDataSource> * _fabricDataSource;
    NSNumber * _fabricMappingIndex;
    NSOperationQueue * _keyValueStoreUpdateQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSMutableDictionary * _temporaryStorage;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property <CHIPPluginStorageDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property <CHIPPluginStorageDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (retain) <CHIPPluginFabricStorageDataSource> *fabricDataSource;
@property (retain) NSNumber *fabricMappingIndex;
@property (readonly) unsigned long long hash;
@property (readonly) NSOperationQueue *keyValueStoreUpdateQueue;
@property (readonly, copy) NSSet *pairedNodeIDs;
@property (readonly) Class superclass;
@property (readonly) NSMutableDictionary *temporaryStorage;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *workQueue;

+ (id)CHIPPLUGIN_STORAGE_KEYS;
+ (id)MATTER_STORAGE_KEYS;
+ (void)deleteCHIPPluginDataForNodeID:(id)arg1 withStorage:(id)arg2;
+ (bool)didUpdateMatterItems:(id)arg1 oldStorage:(id)arg2;
+ (id)formatKeyForNodeId:(id)arg1 key:(id)arg2;
+ (bool)keyMatchesMatterKey:(id)arg1;
+ (id)logCategory;
+ (id)matterItemsFromDictionary:(id)arg1;
+ (id)shortDescription;
+ (id)stripNodeIdFromKey:(id)arg1;

- (void).cxx_destruct;
- (bool)_checkVersion:(id)arg1;
- (id)_getCHIPFrameworkVersion;
- (bool)_handlePerFabricStorageMaybeAvailable:(id)arg1;
- (void)_handleUpdatedDataWithIsLocalChange:(bool)arg1;
- (void)_moveTempStorageIntoDataSource;
- (id)_preferencesValueForKey:(id)arg1;
- (void)_removeAllDataSourceDataWithCompletion:(id /* block */)arg1;
- (void)_removeTempValueForKey:(id)arg1;
- (void)_setPreferencesValueForKey:(id)arg1 value:(id)arg2;
- (void)_setTempValueForKey:(id)arg1 value:(id)arg2;
- (bool)_syncSetDataSourceValue:(id)arg1 forKey:(id)arg2;
- (id)_tempValueForKey:(id)arg1;
- (void)addPairedNodeID:(id)arg1;
- (id)dataSource;
- (id)delegate;
- (id)fabricDataSource;
- (id)fabricMappingIndex;
- (void)handleUpdatedCurrentFabricIndex;
- (void)handleUpdatedDataForFabricIndex:(id)arg1 isLocalChange:(bool)arg2;
- (void)handleUpdatedDataForFabricIndex:(id)arg1 nodeID:(id)arg2 isLocalChange:(bool)arg3;
- (void)handleUpdatedDataWithIsLocalChange:(bool)arg1;
- (id)initWithQueue:(id)arg1;
- (id)ipkForCurrentFabricMappingIndex;
- (id)keyValueStoreUpdateQueue;
- (id)logIdentifier;
- (id)pairedNodeIDs;
- (void)prepareStorageForFabricMappingIndex:(id)arg1;
- (void)removePairedNodeID:(id)arg1;
- (bool)removeStorageDataForKey:(id)arg1;
- (void)resetStorage;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFabricDataSource:(id)arg1;
- (void)setFabricMappingIndex:(id)arg1;
- (void)setFabricMappingIndexSync:(unsigned char)arg1;
- (void)setPairedNodeIDs:(id)arg1;
- (bool)setStorageData:(id)arg1 forKey:(id)arg2;
- (bool)setValueForKey:(id)arg1 value:(id)arg2;
- (id)storageDataForKey:(id)arg1;
- (id)temporaryStorage;
- (id)valueForKey:(id)arg1;
- (id)workQueue;

@end
