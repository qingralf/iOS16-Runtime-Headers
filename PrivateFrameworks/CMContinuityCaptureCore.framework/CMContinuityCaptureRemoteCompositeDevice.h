/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMContinuityCaptureCore.framework/CMContinuityCaptureCore
 */

@interface CMContinuityCaptureRemoteCompositeDevice : NSObject <CMContinuityCaptureThermalMonitorDelegate, ContinuityCaptureAVCNegotiationDataDelegate, ContinuityCaptureClockSynchronizationDelegate, ContinuityCaptureControlDelegate, ContinuityCaptureEventDelegate, ContinuityCaptureStillImageCaptureDelegate, ContinuityCaptureStreamDelegate> {
    NSMutableSet * _activeAVCaptureStreamEntitySet;
    AVCaptureSession * _audioCaptureSession;
    CMContinuityCaptureCapabilities * _capabilities;
    NSMutableDictionary * _captureDeviceByEntityType;
    AVCaptureSession * _captureSession;
    CMContinuityCaptureRemoteClient * _client;
    NSMutableDictionary * _cmControlByName;
    <ContinuityCaptureCommandNotificationDelegate> * _commandNotificationDelegate;
    NSObject<OS_dispatch_group> * _debugInfoLogBlock;
    NSMutableArray * _entitiesToAbort;
    id /* block */  _falsePreStartStreamRecoveryBlock;
    bool  _forceCenterStageEnabled;
    struct IONotificationPort { } * _ioNotificationPort;
    CMContinuityCapturePongSoundManager * _pongSoundManager;
    CMContinuityCaptureConfiguration * _preStartedStreamConfig;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _registeredBatteryNotifications;
    unsigned int  _serviceNotification;
    unsigned long long  _sessionID;
    NSUUID * _sidecarIdentifier;
    id /* block */  _statusHandler;
    bool  _streaming;
    unsigned long long  _thermalLevel;
    CMContinuityCaptureThermalMonitor * _thermalMonitor;
    bool  _throttlingBackWide;
    int  _throttlingFrameRateLevel;
    AVCaptureDeviceInput * _videoCameraInput;
    AVCaptureVideoPreviewLayer * _videoPreviewLayer;
}

@property (readonly) NSSet *activeAVCaptureStreamEntitySet;
@property (readonly, retain) AVCaptureSession *audioCaptureSession;
@property (readonly, retain) AVCaptureSession *captureSession;
@property (readonly, retain) CMContinuityCaptureRemoteClient *client;
@property (readonly, retain) NSArray *continuityCaptureDevices;
@property (readonly, retain) NSArray *controls;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) long long deskViewCameraMode;
@property (readonly) unsigned long long hash;
@property (readonly, retain) NSUUID *sidecarIdentifier;
@property (readonly) bool streaming;
@property (readonly) Class superclass;
@property (readonly) int throttlingFrameRateLevel;

- (void).cxx_destruct;
- (void)_abort:(id /* block */)arg1;
- (bool)_configureAudioCaptureSessionForInput:(id)arg1 andOutput:(id)arg2;
- (bool)_configureCaptureSessionForConnections:(id)arg1;
- (void)_executeAbort:(id /* block */)arg1;
- (void)_handleThermalLevelLowPowerModeChange;
- (void)_logDebugInfo:(id /* block */)arg1;
- (void)_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)_postEvent:(id)arg1 entity:(long long)arg2;
- (void)_postNotification:(id)arg1 value:(id)arg2;
- (void)_registerForBatteryNotifications;
- (void)_removeConnections:(id)arg1;
- (void)_reset:(id /* block */)arg1;
- (void)_restartStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_setDeskViewCameraModeOnDefaultVideoCamera:(long long)arg1;
- (bool)_startAudioCaptureSession:(id*)arg1;
- (void)_startStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (bool)_startVideoCaptureSessionIfNeeded:(id*)arg1;
- (bool)_stopAudioCaptureSession:(id*)arg1;
- (void)_stopStream:(long long)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (bool)_stopVideoCaptureSessionIfNeeded:(id*)arg1;
- (bool)_stopVideoStreamForConnections:(id)arg1 error:(id*)arg2;
- (void)_terminateAVCSession:(id /* block */)arg1;
- (void)_throttleFrameRateIfNeeded;
- (void)_unregisterBatteryNotifications;
- (void)abort:(id /* block */)arg1;
- (void)activateClient:(id /* block */)arg1;
- (id)activeAVCaptureStreamEntitySet;
- (id)audioCaptureSession;
- (id)captureSession;
- (void)captureStillImage:(id)arg1 entity:(long long)arg2 completion:(id /* block */)arg3;
- (bool)centerStageForceEnabled;
- (id)client;
- (bool)configureAudioCaptureSessionForInput:(id)arg1 andOutput:(id)arg2;
- (bool)configureCaptureSessionForConnections:(id)arg1;
- (id)continuityCaptureDevices;
- (id)controls;
- (void)dealloc;
- (id)description;
- (long long)deskViewCameraMode;
- (bool)forceCenterStage:(bool)arg1;
- (unsigned int)getThrottlingFrameRateByThermalLevelAndLowPowerModeWithDefault:(unsigned int)arg1;
- (void)handleAVCNegotiation:(long long)arg1 data:(id)arg2;
- (void)handleSynchronizeAudioClockCompletion;
- (id)initWithSidecarRequest:(id)arg1 videoPreviewLayer:(id)arg2 commandNotificationDelegate:(id)arg3 sessionID:(unsigned long long)arg4 statusHandler:(id /* block */)arg5;
- (void)invalidate;
- (bool)isCenterStageRunning;
- (bool)isDeskCamRunning;
- (bool)isUSBConnected;
- (void)logDebugInfo:(id /* block */)arg1;
- (void)lowPowerModeChanged:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)postEvent:(id)arg1 entity:(long long)arg2;
- (void)postNotification:(id)arg1 value:(id)arg2;
- (void)preStartAVCaptureSessionForConfiguration:(id)arg1;
- (void)preStartStreamForConfiguration:(id)arg1;
- (bool)prewarmDeskCam;
- (void)removeConnections:(id)arg1;
- (void)reset:(id /* block */)arg1;
- (void)resetClientWithNewSidecarRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)restartStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)setCenterStageForceEnabled:(bool)arg1;
- (void)setDefaultVideoCameraFaceDrivenAFEnabled:(bool)arg1;
- (void)setDeskViewCameraModeOnDefaultVideoCamera:(long long)arg1;
- (void)setValueForControl:(id)arg1 completion:(id /* block */)arg2;
- (bool)setupCaptureDevices:(id)arg1 multiCamRequired:(bool*)arg2;
- (bool)setupClient:(id)arg1;
- (void)setupControls;
- (id)sidecarIdentifier;
- (bool)startAudioCaptureSession:(id*)arg1;
- (void)startStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (bool)startVideoCaptureSessionIfNeeded:(id*)arg1;
- (bool)stopAudioCaptureSession:(id*)arg1;
- (void)stopStream:(long long)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (bool)stopVideoCaptureSessionIfNeeded:(id*)arg1;
- (bool)stopVideoStreamForConnections:(id)arg1 error:(id*)arg2;
- (bool)streaming;
- (void)tearDownPrewarmedDeskCamIfNeeded;
- (void)terminateAVCSession:(id /* block */)arg1;
- (void)thermalLevelChanged:(unsigned long long)arg1;
- (void)throttleFrameRateIfNeeded;
- (int)throttlingFrameRateLevel;

@end
