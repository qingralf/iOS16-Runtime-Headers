/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CMContinuityCaptureCore.framework/CMContinuityCaptureCore
 */

@interface CMContinuityCaptureRemoteVideoDevice : NSObject <CMContinuityCaptureRemoteDevice> {
    CMContinuityCaptureConfiguration * _activeConfiguration;
    CMContinuityCaptureStreamFormat * _activeFormat;
    bool  _avCaptureSessionStarted;
    bool  _avcActive;
    AVCStreamInput * _avcStreamInput;
    AVCMediaStreamNegotiator * _avcStreamNegotiator;
    AVCVideoStream * _avcVideoStream;
    id /* block */  _bufferFailureCheckBlock;
    CMContinuityCaptureDeviceCapabilities * _capabilities;
    CMContinuityCaptureRemoteClient * _client;
    NSMutableDictionary * _cmControlByName;
    CMContinuityCaptureRemoteCompositeDevice * _compositeDevice;
    NSMutableArray * _connections;
    NSMutableArray * _controlSetLogs;
    NSData * _currentAnswer;
    long long  _entity;
    unsigned int  _frameRateThrottledByThermalLevelOrPowerMode;
    NSString * _lastStreamFirstFrameDispatchTime;
    unsigned long long  _lastStreamGenerationID;
    NSString * _lastStreamStartTime;
    NSString * _lastStreamStopTime;
    AVCaptureMetadataOutput * _metadataOutput;
    unsigned long long  _numberOfAVCFramesDropped;
    NSObject<OS_dispatch_group> * _pendingAVCActivationGroup;
    NSObject<OS_dispatch_group> * _pendingAVCNegotiationGroup;
    NSObject<OS_dispatch_group> * _pendingAVCTeardownGroup;
    bool  _pendingFirstSendStreamLogPrintAfterSetup;
    AVCapturePhotoOutput * _photoOutput;
    NSMutableDictionary * _photoRequests;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _photoRequestsLock;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _startAVCaptureTimeoutBlock;
    NSMutableArray * _streamSessionLogs;
    NSObject<OS_dispatch_group> * _streamStreamGroup;
    bool  _streaming;
    unsigned int  _streamingSessionID;
    unsigned int  _throttledEffectFrameRate;
    long long  _videoBufferDropCounter;
    long long  _videoBufferOutputCounter;
    AVCaptureDeviceInput * _videoDataInput;
    AVCaptureDevice * _videoDevice;
}

@property (readonly, retain) CMContinuityCaptureConfiguration *activeConfiguration;
@property (readonly, retain) CMContinuityCaptureDeviceCapabilities *capabilities;
@property (getter=isCenterStageRunning, readonly) bool centerStageRunning;
@property (readonly, retain) CMContinuityCaptureRemoteClient *client;
@property (readonly) CMContinuityCaptureRemoteCompositeDevice *compositeDevice;
@property (readonly, retain) NSArray *controls;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) long long entity;
@property (readonly) unsigned long long hash;
@property (readonly, retain) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;
@property (readonly, retain) AVCaptureDevice *videoDevice;

- (void).cxx_destruct;
- (void)_abort:(id /* block */)arg1;
- (bool)_configureWithConfiguration:(id)arg1 error:(id*)arg2;
- (bool)_deviceFormat:(id)arg1 isCompatibleWithConfiguration:(id)arg2 requiringMultiCamSupport:(bool)arg3;
- (void)_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)_postEvent:(id)arg1 entity:(long long)arg2;
- (void)_setFaceDrivenAFEnabled:(bool)arg1 forCaptureDevice:(id)arg2;
- (void)_setValueForControl:(id)arg1 completion:(id /* block */)arg2;
- (bool)_shouldPrintDroppedSampleBufferLog:(long long)arg1;
- (bool)_shouldPrintSampleBufferLog:(long long)arg1;
- (void)_startStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_stopStream:(long long)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_terminateAVCSession:(id /* block */)arg1;
- (void)_throttleFrameRateByThermalLevelPowerMode;
- (void)_unthrottleFrameRateByThermalLevelPowerMode;
- (void)_updateActiveMaxFrameRate:(unsigned int)arg1;
- (void)_updateActiveMinFrameRate:(unsigned int)arg1;
- (void)_updateControlStatus;
- (void)_updatePhotoOutputConfigs;
- (void)_updatePortraitEffect:(bool)arg1;
- (void)_updateStudioLighting:(bool)arg1;
- (void)_updateVideoZoomFactor:(double)arg1;
- (void)abort:(id /* block */)arg1;
- (id)activeConfiguration;
- (id)capabilities;
- (void)captureOutput:(id)arg1 didDropSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)captureOutput:(id)arg1 didFinishCaptureForResolvedSettings:(id)arg2 error:(id)arg3;
- (void)captureOutput:(id)arg1 didFinishProcessingPhoto:(id)arg2 error:(id)arg3;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)captureStillImage:(id)arg1 entity:(long long)arg2 completion:(id /* block */)arg3;
- (void)checkThermalLevelPowerModeAndToggleFrameRateThrottling;
- (void)clearAVCArtifacts;
- (id)client;
- (id)compositeDevice;
- (bool)configureWithConfiguration:(id)arg1 error:(id*)arg2;
- (id)controls;
- (id)createAVCVideoStreamForSidecarStream:(id)arg1;
- (void)debugInfo:(id /* block */)arg1;
- (id)description;
- (void)didStartStreamInput:(id)arg1;
- (void)didStopStreamInput:(id)arg1;
- (void)dispatchFrame:(struct opaqueCMSampleBuffer { }*)arg1 entity:(long long)arg2 completion:(id /* block */)arg3;
- (long long)entity;
- (bool)forceCenterStage:(bool)arg1;
- (void)handleAVCNegotiation:(long long)arg1 data:(id)arg2;
- (id)initWithCompositeDevice:(id)arg1 entity:(long long)arg2 capabilities:(id)arg3 client:(id)arg4;
- (bool)isCenterStageRunning;
- (void)logControlSetSummary:(id)arg1;
- (void)logStreamSessionSummary;
- (id)newVideoStreamConfigWithIsWired:(bool)arg1 key:(id)arg2 streamInputID:(long long)arg3 format:(id)arg4 frameRate:(unsigned int)arg5;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)postEvent:(id)arg1 entity:(long long)arg2;
- (void)preStartAVCaptureSessionForConfiguration:(id)arg1;
- (id)queue;
- (void)resetClient:(id)arg1;
- (void)resetClientComplete:(id)arg1;
- (void)restoreConfigurationFrameRate;
- (void)serverDidDie;
- (void)setFaceDrivenAFEnabled:(bool)arg1;
- (void)setValueForControl:(id)arg1 completion:(id /* block */)arg2;
- (void)setupControls;
- (void)startAVCInputForConfiguration:(id)arg1 completion:(id /* block */)arg2;
- (void)startStream:(id)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)stopAVCInput:(id /* block */)arg1 option:(unsigned long long)arg2;
- (void)stopStream:(long long)arg1 option:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)stream:(id)arg1 didStart:(bool)arg2 error:(id)arg3;
- (void)streamDidRTCPTimeOut:(id)arg1;
- (void)streamDidRTPTimeOut:(id)arg1;
- (void)streamDidServerDie:(id)arg1;
- (void)streamDidStop:(id)arg1;
- (bool)streaming;
- (void)terminateAVCSession:(id /* block */)arg1;
- (void)updateControlStatus;
- (id)videoDevice;

@end
