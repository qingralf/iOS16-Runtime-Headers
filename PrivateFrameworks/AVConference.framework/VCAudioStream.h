/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCAudioStream : VCMediaStream <VCAudioIODelegate, VCAudioIOSink, VCMediaStreamSyncSource, VCTelephonyInterfaceDelegate> {
    unsigned int  _abnormalOWRDCount;
    bool  _anbrActive;
    bool  _anbrEnabled;
    VCAudioIO * _audioIO;
    VCAudioTransmitter * _audioTransmitter;
    unsigned int  _awdTimeTransmitter;
    int  _clientPid;
    bool  _currentDTXEnable;
    bool  _enableAudioPowerSpectrum;
    VCAudioPowerSpectrumSource * _inputAudioPowerSpectrumSource;
    long long  _inputAudioPowerSpectrumToken;
    bool  _isMuted;
    double  _lastAbnormalOWRDVerificationTime;
    struct ifnet_interface_advisory { 
        union { 
            struct { 
                unsigned char version; 
                unsigned char direction; 
                unsigned short _reserved; 
                int rate_trend_suggestion; 
                unsigned long long timestamp; 
                unsigned long long max_bandwidth; 
                unsigned long long total_byte_count; 
                unsigned long long average_throughput; 
                unsigned int flushable_queue_size; 
                unsigned int non_flushable_queue_size; 
                unsigned int average_delay; 
                unsigned char frequency_band; 
                unsigned char intermittent_state; 
                unsigned short estimated_intermittent_period; 
                unsigned short single_outage_period; 
                unsigned char bt_coex; 
                unsigned char quality_score_delay; 
                unsigned char quality_score_loss; 
                unsigned char quality_score_channel; 
            } ; 
            struct { 
                struct ifnet_interface_advisory_header { 
                    unsigned char version; 
                    unsigned char direction; 
                    unsigned char interface_type; 
                    unsigned char reserved; 
                } header; 
                struct ifnet_interface_advisory_capacity { 
                    int rate_trend_suggestion; 
                    unsigned long long timestamp; 
                    unsigned long long max_bandwidth; 
                    unsigned long long total_byte_count; 
                    unsigned long long average_throughput; 
                    unsigned int flushable_queue_size; 
                    unsigned int non_flushable_queue_size; 
                    unsigned int average_delay; 
                } capacity; 
                union { 
                    struct ifnet_interface_advisory_wifi_context { 
                        unsigned char frequency_band; 
                        unsigned char intermittent_state; 
                        unsigned short estimated_intermittent_period; 
                        unsigned short single_outage_period; 
                        unsigned char bt_coex; 
                        unsigned char quality_score_delay; 
                        unsigned char quality_score_loss; 
                        unsigned char quality_score_channel; 
                        unsigned char radio_coex; 
                        unsigned short wlan_duty_cycle; 
                        unsigned int wifi_observed_tx_bitrate[6]; 
                    } wifi_context; 
                    struct ifnet_interface_advisory_cell_context { 
                        unsigned char radio_access_technology; 
                        short reference_signal_level; 
                        short signal_level; 
                        BOOL signal_quality; 
                        unsigned char uplink_bler; 
                        unsigned char downlink_bler; 
                        unsigned char bandwidth_limitation_indication; 
                        unsigned char cdrx_state; 
                        unsigned short cdrx_cycle; 
                        unsigned short estimated_outage_period; 
                        unsigned char outage_state; 
                        unsigned char __pad; 
                    } cell_context; 
                } ; 
            } ; 
        } ; 
    }  _lastNWConnectionNotification;
    double  _lastNetworkHealthPrintTime;
    unsigned int  _lastNoVoiceActivityPacketCount;
    VCAudioPowerSpectrumSource * _outputAudioPowerSpectrumSource;
    long long  _outputAudioPowerSpectrumToken;
    double  _packetLossRate5Secs;
    double  _packetLossRateAccum;
    int  _packetLossRateCount;
    unsigned int  _preferredMediaBitrate;
    unsigned int  _pullAudioSamplesCount;
    double  _remoteMediaStallTimeout;
    int  _reportingModuleID;
    unsigned int  _reportingSSRCCount;
    unsigned int * _reportingSSRCList;
    bool  _rtcpEnabledBeforeInterrupt;
    bool  _rtpEnabledBeforeInterrupt;
    bool  _sendActiveVoiceOnly;
    struct _VCAudioStreamSinkContext { 
        struct _METER_INFO { 
            bool frequencyMeteringEnabled; 
            struct opaqueVCFFTMeter {} *fftMeter; 
        } soundMeter; 
    }  _sinkContext;
    struct _VCAudioStreamSourceContext { 
        bool isRemoteMuted; 
        struct _METER_INFO { 
            bool frequencyMeteringEnabled; 
            struct opaqueVCFFTMeter {} *fftMeter; 
        } soundMeter; 
        struct tagVCAudioReceiver {} *audioReceiver; 
        unsigned int framesProcessed; 
        float volume; 
        bool shouldPostProcessSamples; 
        bool isSendOnly; 
        bool isRemoteMediaStalled; 
        double lastReceivedAudioTimestamp; 
        int packetsSinceStallCount; 
        double remoteMediaStallTimeout; 
        unsigned int awdTimeReceiver; 
        unsigned char stallReportCount; 
        struct _VCSingleLinkedList { 
            struct _VCSingleLinkedListEntry {} *head; 
            bool initialized; 
            int (*compare)(); 
            unsigned long long countEntries; 
        } transports; 
        unsigned short oneToOneStreamID; 
        AVCStatisticsCollector *oneToOneStatisticsCollector; 
        bool isMultiwayConfig; 
        unsigned int targetBitrate; 
        <VCMediaStreamDelegate> *delegate; 
        VCAudioStream *self; 
        <VCMediaStreamSyncSourceDelegate> *syncSourceDelegate; 
        <VCMomentsCollectorDelegate> *momentsCollectorDelegate; 
        struct tagWRMMetricsInfo {} *wrmInfo; 
        struct tagHANDLE {} *defaultRtpHandle; 
    }  _sourceContext;
    AVCStatisticsCollector * _statsCollector;
    NSNumber * _targetStreamID;
    VCTelephonyInterface * _telephonyInterface;
    double  _timeLastPLR5Secs;
    bool  _useExternalIO;
    struct tagVCAudioFrameFormat { 
        struct AudioStreamBasicDescription { 
            double mSampleRate; 
            unsigned int mFormatID; 
            unsigned int mFormatFlags; 
            unsigned int mBytesPerPacket; 
            unsigned int mFramesPerPacket; 
            unsigned int mBytesPerFrame; 
            unsigned int mChannelsPerFrame; 
            unsigned int mBitsPerChannel; 
            unsigned int mReserved; 
        } format; 
        unsigned int samplesPerFrame; 
    }  _vpioFormat;
    NSMutableArray * audioPayloads;
    unsigned int  conferenceID;
    VCAudioPayload * currentAudioPayload;
    VCAudioPayload * currentDTXPayload;
    double  dAudioHostTime;
    int  deviceRole;
    DTMFEventHandler * dtmfEventHandler;
    bool  isValid;
    unsigned int  lastInputAudioTimeStamp;
    unsigned int  lastSentAudioSampleTime;
    bool  lastVoiceActive;
    int  numBufferBytesAvailable;
    NSObject<OS_dispatch_source> * pausedAudioHeartBeat;
    int  preferredAudioCodec;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  stateLock;
    id  syncSourceDelegate;
    WRMClient * wrmClient;
}

@property (nonatomic, readonly) unsigned int actualAudioSendingBitrate;
@property (retain) VCAudioIO *audioIO;
@property (retain) VCAudioTransmitter *audioTransmitter;
@property (readonly) unsigned int conferenceID;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int deviceRole;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isValid;
@property (nonatomic) unsigned int lastNoVoiceActivityPacketCount;
@property (getter=isMuted, nonatomic) bool muted;
@property (nonatomic, readonly) void*realtimeSourceContext;
@property (getter=isRemoteMuted, nonatomic) bool remoteMuted;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (readonly) Class superclass;
@property (nonatomic) NSObject<VCMediaStreamSyncSourceDelegate> *syncSourceDelegate;
@property (nonatomic, retain) NSNumber *targetStreamID;
@property (nonatomic) float volume;

+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)arg1;
+ (id)capabilities;
+ (id)newPayloadConfigForCodecConfig:(id)arg1 streamConfig:(id)arg2 inputSampleRate:(unsigned int)arg3;
+ (int)operatingModeForAudioStreamMode:(long long)arg1;
+ (bool)shouldUseAACELDSBRForMode:(long long)arg1;
+ (bool)shouldUseRandomRTPTimestampForMode:(int)arg1;
+ (id)supportedAudioPayloads;
+ (void)terminateProcess:(id)arg1 terminateSource:(id)arg2 agent:(struct opaqueRTCReporting { }*)arg3;

- (void)_computeInternalFormatForStreamConfigurations:(id)arg1;
- (unsigned int)actualAudioSendingBitrate;
- (id)addAudioPayload:(int)arg1;
- (id)audioIO;
- (id)audioTransmitter;
- (bool)canProcessAudio;
- (int)captureMeshMode:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)cleanupAudio;
- (void)cleanupBeforeReconfigure:(id)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1 interval:(float)arg2;
- (void)collectTxChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1;
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)arg1 numSamples:(int)arg2 hostTime:(double)arg3;
- (unsigned int)conferenceID;
- (id)configForPayloadType:(int)arg1;
- (void)configureAudioJBAlgos:(struct tagVCAudioReceiverConfig { unsigned int x1; struct tagVCAudioReceiverStream { struct tagHANDLE {} *x_2_1_1; unsigned short x_2_1_2; bool x_2_1_3; bool x_2_1_4; struct tagVCCryptor {} *x_2_1_5; int x_2_1_6; bool x_2_1_7; struct tagVCAudioReceiver {} *x_2_1_8; void *x_2_1_9; void *x_2_1_10; } x2[4]; void *x3; unsigned int x4; int x5; unsigned int x6; int x7; int x8; bool x9; struct opaqueRTCReporting {} *x10; int x11; bool x12; struct __CFString {} *x13; struct __CFString {} *x14; unsigned short x15; bool x16; bool x17; bool x18; bool x19; bool x20; int x21; bool x22; void *x23; int (*x24)(); int (*x25)(); int (*x26)(); struct tagVCJBTargetEstimatorSynchronizer {} *x27; void *x28; void *x29; unsigned int x30; bool x31; unsigned int x32; int x33; bool x34; bool x35; }*)arg1;
- (bool)createAudioReceiver;
- (bool)createAudioTransmitter:(long long)arg1 streamIDs:(id)arg2;
- (void)createReportSSRCListWithStreamConfigs:(id)arg1;
- (id)createTransportWithStreamConfig:(id)arg1;
- (void)dealloc;
- (int)deviceRole;
- (void)didEnterState:(int)arg1 oldState:(int)arg2;
- (void)didResumeAudioIO:(id)arg1;
- (void)didServerDie;
- (void)didSuspendAudioIO:(id)arg1;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)arg1;
- (void)gatherRealtimeStats:(struct __CFDictionary { }*)arg1;
- (bool)generateRTCPXRSummaryReports:(struct tagVCRTCPXRSummaryReport { bool x1; bool x2; bool x3; int x4; unsigned int x5; unsigned short x6; unsigned short x7; unsigned int x8; unsigned int x9; int x10; int x11; int x12; int x13; unsigned char x14; unsigned char x15; unsigned char x16; unsigned char x17; }*)arg1 reportCount:(char *)arg2;
- (bool)generateRTCPXRVoIPMetricsReports:(struct tagVCRTCPXRVoIPMetricsReport { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; unsigned char x16; unsigned char x17; unsigned short x18; unsigned short x19; unsigned short x20; }*)arg1 reportCount:(char *)arg2;
- (bool)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned char x9; }*)arg1 reportCount:(char *)arg2;
- (struct __CFDictionary { }*)getClientSpecificUserInfo:(id)arg1;
- (void)getCodecConfigForPayload:(int)arg1 block:(id /* block */)arg2;
- (int)getPacketsPerBundleForStreamConfig:(id)arg1;
- (int)getRatTypeForStreamMode:(long long)arg1;
- (struct __CFString { }*)getReportingClientName;
- (int)getReportingClientType;
- (id)getReportingServiceID;
- (id)getSupportedPayloads;
- (long long)getSyncSourceSampleRate;
- (void)handleANBR:(unsigned int)arg1 forDirection:(long long)arg2;
- (void)handleActiveConnectionChange:(id)arg1;
- (void)handleCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1;
- (void)handleDownlinkANBR:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1;
- (void)handleUplinkANBR:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1;
- (id)initWithClientPid:(int)arg1;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2 transportSessionID:(unsigned int)arg3;
- (unsigned int)internalSampleRateForCodecType:(long long)arg1;
- (bool)isCurrentDTXEnabled;
- (bool)isFrequencyMeteringEnabled:(int)arg1;
- (bool)isMuted;
- (bool)isRemoteMuted;
- (bool)isValid;
- (unsigned int)lastNoVoiceActivityPacketCount;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (struct _METER_INFO { bool x1; struct opaqueVCFFTMeter {} *x2; }*)meterWithType:(int)arg1;
- (void)notifyCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1 didUpdateBandwidth:(bool)arg2 didUpdateBitrate:(bool)arg3;
- (void)notifyCodecModeChangeToCT:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1;
- (void)onCallIDChanged;
- (bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id*)arg2;
- (void)onPauseWithCompletionHandler:(id /* block */)arg1;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)arg1;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)arg1;
- (void)onStopWithCompletionHandler:(id /* block */)arg1;
- (unsigned int)preferredAudioBitrateForPayload:(int)arg1;
- (void)prepareAudio;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (int (*)pullSamplesCallback;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushSamplesOutputPowerSpectrum:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)queryAnbrBitrate:(unsigned int)arg1 forDirection:(long long)arg2;
- (void*)realtimeSourceContext;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;
- (void)registerActiveAudioStreamChangeNotifications;
- (void)registerCodecRateModeChangeNotifications;
- (void)reportInputHostTimeJumpWithSize:(double)arg1;
- (void)reportingAlgosAudioStreamEvent:(unsigned short)arg1;
- (void)reportingAudioStreamEvent:(unsigned short)arg1;
- (double)rtcpHeartbeatLeeway;
- (int)selectCodecBandwidthForCodecRateMode:(int)arg1;
- (bool)sendActiveVoiceOnly;
- (void)sendDTMFEvent:(id)arg1;
- (void)setAudioIO:(id)arg1;
- (void)setAudioTransmitter:(id)arg1;
- (void)setCanProcessAudio:(bool)arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setDTXPayload:(id)arg1;
- (void)setDeviceRole:(int)arg1;
- (void)setDeviceRoleForAudioStreamMode:(long long)arg1 direction:(long long)arg2;
- (void)setFrequencyMeteringEnabled:(bool)arg1 meterType:(int)arg2;
- (void)setInputTimestamp:(unsigned int)arg1 packetTimestamp:(int)arg2 hostTime:(double)arg3;
- (void)setIsValid:(bool)arg1;
- (void)setLastNoVoiceActivityPacketCount:(unsigned int)arg1;
- (id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id*)arg3;
- (void)setMuted:(bool)arg1;
- (void)setPreferredMediaBitrateWithConfiguration:(id)arg1;
- (bool)setReceiverPayloads;
- (void)setRemoteCodecTypeAndSampleRate:(struct _VCAudioCodecModeChangeEvent { int x1; int x2; int x3; unsigned int x4; })arg1;
- (void)setRemoteMuted:(bool)arg1;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setStreamDirection:(long long)arg1;
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;
- (void)setSyncSourceDelegate:(id)arg1;
- (void)setTargetBitrate:(unsigned int)arg1 rateChangeCounter:(unsigned int)arg2;
- (void)setTargetStreamID:(id)arg1;
- (void)setVCStatistics:(struct { int x1; int x2; double x3; bool x4; bool x5; bool x6; bool x7; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; double x_1_2_7; double x_1_2_8; double x_1_2_9; double x_1_2_10; double x_1_2_11; BOOL x_1_2_12[64]; int x_1_2_13; } x_8_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; unsigned int x_2_2_3; unsigned int x_2_2_4; unsigned int x_2_2_5; unsigned int x_2_2_6; unsigned int x_2_2_7; unsigned int x_2_2_8; unsigned int x_2_2_9; unsigned int x_2_2_10; unsigned int x_2_2_11; unsigned int x_2_2_12; double x_2_2_13; double x_2_2_14; unsigned int x_2_2_15; unsigned int x_2_2_16; double x_2_2_17; unsigned int x_2_2_18; bool x_2_2_19; struct { int x_20_3_1; unsigned int x_20_3_2; unsigned int x_20_3_3; unsigned int x_20_3_4; double x_20_3_5; double x_20_3_6; double x_20_3_7; unsigned int x_20_3_8; unsigned int x_20_3_9; } x_2_2_20; struct { unsigned short x_21_3_1; bool x_21_3_2; bool x_21_3_3; unsigned int x_21_3_4; } x_2_2_21; } x_8_1_2; struct { double x_3_2_1; double x_3_2_2; double x_3_2_3; unsigned int x_3_2_4; unsigned int x_3_2_5; unsigned int x_3_2_6; unsigned int x_3_2_7; unsigned int x_3_2_8; unsigned long long x_3_2_9; unsigned int x_3_2_10; } x_8_1_3; } x8; })arg1;
- (void)setVolume:(float)arg1;
- (void)setupAudioPowerSpectrum;
- (bool)setupAudioStreamWithClientPid:(int)arg1 enableAudioPowerSpectrum:(bool)arg2;
- (bool)setupPayloads;
- (void)setupPeriodicReporting;
- (void)setupReportingAgent:(id)arg1;
- (bool)setupSourceTransport:(id)arg1;
- (bool)shouldReportNetworkInterfaceType;
- (bool)shouldResetRTPTimestampOnStart;
- (bool)shouldUseNWConnectionBackingSocket;
- (void)startAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stopAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stopSendDTMFEvent;
- (id)streamIDsFromTransport;
- (id)supportedPayloads;
- (id)syncSourceDelegate;
- (id)targetStreamID;
- (void)telephonyInterface:(id)arg1 anbrActivationUpdate:(bool)arg2;
- (void)telephonyInterface:(id)arg1 anbrRecommendation:(unsigned int)arg2 forDirection:(long long)arg3;
- (void)unregisterCodecRateModeChangeNotifications;
- (void)updateCodecPayloadAndBitrateForStartEvent:(int*)arg1 bitrate:(unsigned int*)arg2;
- (void)updateSoundMeter:(struct _METER_INFO { bool x1; struct opaqueVCFFTMeter {} *x2; }*)arg1 isInputMeter:(bool)arg2 sampleBuffer:(struct opaqueVCAudioBufferList { }*)arg3;
- (bool)validateAudioStreamConfigurations:(id)arg1;
- (float)volume;
- (void)willExitState:(int)arg1 newState:(int)arg2;

@end
