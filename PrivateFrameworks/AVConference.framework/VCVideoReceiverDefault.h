/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCVideoReceiverDefault : VCVideoReceiverBase {
    bool  _canLocalResizePIP;
    bool  _canRemoteResizePIP;
    void * _controlInfoGenerator;
    unsigned long long  _cvoExtensionID;
    VCDisplayLink * _displayLink;
    bool  _forceZeroRegionOfInterestOrigin;
    unsigned short  _lastKeyFrameRequestStreamID;
    double  _lastKeyFrameRequestTime;
    bool  _lastLocalPortrait;
    bool  _lastRemotePortrait;
    bool  _notifyDelegateVideoAttributeChanges;
    VCVideoStreamRateAdaptationFeedbackOnly * _rateAdaptation;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteExpectedLandscapeAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteExpectedPortraitAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteScreenLandscapeAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteScreenPortraitAspectRatio;
    bool  _remoteSupportsExpectedAspectRatio;
    bool  _shouldEnableFaceZoom;
    bool  _shouldEnableMLEnhance;
    bool  _shouldUpdateRemoteScreenAttributes;
    long long  _streamToken;
    struct tagVCVideoReceiverConfig { 
        unsigned int streamCount; 
        struct tagVCVideoReceiverStreamConfig { 
            struct tagVCVideoReceiverStreamIDInfo { 
                unsigned short streamID; 
                unsigned short repairStreamID; 
                unsigned short baseStreamID; 
                unsigned int subStreamCount; 
                unsigned short subStreamIDs[9]; 
                unsigned short subStreamRepairIDs[9]; 
            } streamInfo; 
            struct tagHANDLE {} *rtpHandle; 
            struct __CFDictionary {} *featureListStrings; 
            bool onDemandIDR; 
            unsigned short framerate; 
            unsigned char tileIndex; 
            bool isOneToOne; 
            bool isTemporalScalingEnabled; 
            struct tagVCCryptor {} *sframeCryptor; 
            void *mediaControlInfoGenerator; 
            void *statisticsCollector; 
            int mode; 
            bool isLTRPEnabled; 
        } streamConfigs[9]; 
        int mode; 
        int jitterBufferMode; 
        long long streamToken; 
        int audioTSRate; 
        int videoTSRate; 
        int enableVPBLogging; 
        unsigned int dumpID; 
        int enableControlByte; 
        int enableBitstreamCapture; 
        int enableRxDecodeYUVDump; 
        int enableUEP; 
        int enableRecvBitstreamDump; 
        int reportingParentID; 
        bool shouldEnableFaceZoom; 
        bool shouldEnableMLEnhance; 
        bool useDisplayLink; 
        bool enableDeferredAssembly; 
        double deferredAssemblyOffset; 
        void *callbackContext; 
        int (*remoteFrameCallback)(); 
        int (*sampleBufferCallback)(); 
        int (*streamSwitchCallback)(); 
        int (*keyFrameGenerationCallback)(); 
        int (*sendLTRAckCallback)(); 
        int (*ackLTRFrameCallback)(); 
        int (*modeSwitchCallback)(); 
        unsigned long long idsParticipantID; 
        bool triggerSoundAlarmOnRTPReceive; 
        unsigned short decoderNumOfTiles; 
        bool useInternalRTPThreading; 
        struct tagWRMMetricsInfo {} *wrmInfo; 
        unsigned int maxDisplayRefreshRate; 
        bool enableJitterBufferInReceiver; 
        bool enableJitterBufferInPlayer; 
        bool enableImmediateDecode; 
        bool isLTRPEnabled; 
        bool isRTCPForLTRPAckEnabled; 
        bool isAsyncDecodingEnabled; 
        bool isReceiverSideVCRCFeedbackEnabled; 
        bool isVCRCStatsOnlyVideoBased; 
        bool fecHeaderV1Enabled; 
        bool enableQueueAlarmForDisplay; 
        bool useRTCPForFIR; 
        bool sendRTCP_PSFB_FIR; 
        bool enableJBDynamicModeSwitch; 
        bool useInternalClockForPresentation; 
        void *mediaControlInfoGenerator; 
        bool isVariableSliceModeEnabled; 
        bool streamSwitchEnabled; 
        unsigned int cvoExtensionID; 
        bool videoJBEnabled; 
        bool enableAVLooseSync; 
        unsigned short targetDisplayAlarmCount; 
        struct tagVCJBTargetEstimatorSynchronizer {} *jbTargetEstimatorSynchronizer; 
        struct __CFString {} *participantId; 
        struct __CFString {} *sessionId; 
        unsigned int streamGroupID; 
        bool isReferenceFrameEnabled; 
        bool isLateFrameRecoveryEnabled; 
        bool enableHighWatermarkQueueDiscard; 
        int externalPresentationClockType; 
        bool isServerPacketRetransmissionEnabled; 
        bool isRTTBasedFIRThrottlingEnabled; 
        struct tagVCNACKGeneratorStoreBagsConfig { 
            unsigned char nackGeneratorStorebagConfigVersion; 
            float nackSeqNumAgingDuration; 
            float nackThrottlingBitRateLimitingMaxRatio; 
            bool isExtraDelayForPacketRetransmissionsEnabled; 
            float nackThrottlingFactorBuckets[4]; 
            float nackThrottlingPlrBuckets[4]; 
        } nackGeneratorStoreBagsConfig; 
        bool forceZeroRegionOfInterestOrigin; 
    }  _videoReceiverConfig;
    struct tagHANDLE { int x1; } * _videoReceiverHandle;
    struct tagHANDLE { int x1; } * _videoTransmitterHandle;
    bool  receivedFirstRemoteFrame;
    VideoAttributes * remoteVideoAttributes;
}

@property (nonatomic) int mode;
@property (retain) VideoAttributes *remoteVideoAttributes;
@property (nonatomic) bool shouldEnableFaceZoom;
@property (nonatomic) bool shouldEnableMLEnhance;
@property (nonatomic) bool shouldUpdateRemoteScreenAttributes;
@property struct tagVCVideoReceiverConfig { unsigned int x1; struct tagVCVideoReceiverStreamConfig { struct tagVCVideoReceiverStreamIDInfo { unsigned short x_1_2_1; unsigned short x_1_2_2; unsigned short x_1_2_3; unsigned int x_1_2_4; unsigned short x_1_2_5[9]; unsigned short x_1_2_6[9]; } x_2_1_1; struct tagHANDLE {} *x_2_1_2; struct __CFDictionary {} *x_2_1_3; bool x_2_1_4; unsigned short x_2_1_5; unsigned char x_2_1_6; bool x_2_1_7; bool x_2_1_8; struct tagVCCryptor {} *x_2_1_9; void *x_2_1_10; void *x_2_1_11; int x_2_1_12; bool x_2_1_13; } x2[9]; int x3; int x4; long long x5; int x6; int x7; int x8; unsigned int x9; int x10; int x11; int x12; int x13; int x14; int x15; bool x16; bool x17; bool x18; bool x19; double x20; void *x21; int (*x22)(); int (*x23)(); int (*x24)(); int (*x25)(); int (*x26)(); int (*x27)(); int (*x28)(); unsigned long long x29; bool x30; unsigned short x31; bool x32; struct tagWRMMetricsInfo {} *x33; unsigned int x34; bool x35; bool x36; bool x37; bool x38; bool x39; bool x40; bool x41; bool x42; bool x43; bool x44; bool x45; } videoReceiverConfig;

- (void)cleanUpDisplayLink;
- (void)collectChannelMetrics:(struct { unsigned int x1; unsigned int x2[5]; unsigned int x3; double x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; unsigned int x7; double x8; unsigned int x9; unsigned int x10; }*)arg1 interval:(float)arg2;
- (void)dealloc;
- (void)didSwitchFromStreamID:(unsigned short)arg1 toStreamID:(unsigned short)arg2;
- (void)handleActiveConnectionChange:(id)arg1;
- (void)handleKeyFrameRequestWithSizeAndFistMBs:(unsigned short*)arg1 count:(int)arg2 didReceiveRTCPFB:(bool)arg3 didReceiveFIR:(bool)arg4;
- (void)handleRemoteFrame:(struct __CVBuffer { }*)arg1 timestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3;
- (void)handleRequestingKeyFrameGenerationWithStreamID:(unsigned short)arg1 firType:(int)arg2;
- (void)handleSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id)initWithConfig:(struct tagVCVideoReceiverConfig { unsigned int x1; struct tagVCVideoReceiverStreamConfig { struct tagVCVideoReceiverStreamIDInfo { unsigned short x_1_2_1; unsigned short x_1_2_2; unsigned short x_1_2_3; unsigned int x_1_2_4; unsigned short x_1_2_5[9]; unsigned short x_1_2_6[9]; } x_2_1_1; struct tagHANDLE {} *x_2_1_2; struct __CFDictionary {} *x_2_1_3; bool x_2_1_4; unsigned short x_2_1_5; unsigned char x_2_1_6; bool x_2_1_7; bool x_2_1_8; struct tagVCCryptor {} *x_2_1_9; void *x_2_1_10; void *x_2_1_11; int x_2_1_12; bool x_2_1_13; } x2[9]; int x3; int x4; long long x5; int x6; int x7; int x8; unsigned int x9; int x10; int x11; int x12; int x13; int x14; int x15; bool x16; bool x17; bool x18; bool x19; double x20; void *x21; int (*x22)(); int (*x23)(); int (*x24)(); int (*x25)(); int (*x26)(); int (*x27)(); int (*x28)(); unsigned long long x29; bool x30; unsigned short x31; bool x32; struct tagWRMMetricsInfo {} *x33; unsigned int x34; bool x35; bool x36; bool x37; bool x38; bool x39; bool x40; bool x41; bool x42; bool x43; bool x44; bool x45; }*)arg1 delegate:(id)arg2 reportingAgent:(struct opaqueRTCReporting { }*)arg3 statisticsCollector:(id)arg4 transmitterHandle:(struct tagHANDLE { int x1; }*)arg5;
- (bool)initializeDisplayLink;
- (unsigned int)lastDisplayedFrameRTPTimestamp;
- (float)lastLastVideoStallDuration;
- (double)lastReceivedVideoRTCPPacketTime;
- (double)lastReceivedVideoRTPPacketTime;
- (int)mode;
- (int)oneToOneStreamIndex;
- (void)pauseVideo;
- (id)remoteVideoAttributes;
- (double)roundTripTime;
- (void)rtcpSendIntervalElapsed;
- (void)setEnableCVO:(bool)arg1 cvoExtensionID:(unsigned long long)arg2;
- (void)setEnableRateAdaptation:(bool)arg1 maxBitrate:(unsigned int)arg2 minBitrate:(unsigned int)arg3 adaptationInterval:(double)arg4;
- (void)setFeedbackDelegate:(id)arg1;
- (void)setMode:(int)arg1;
- (void)setRemoteVideoAttributes:(id)arg1;
- (void)setShouldEnableFaceZoom:(bool)arg1;
- (void)setShouldEnableMLEnhance:(bool)arg1;
- (void)setShouldUpdateRemoteScreenAttributes:(bool)arg1;
- (void)setSynchronizer:(id)arg1;
- (void)setTargetStreamID:(unsigned short)arg1;
- (void)setUpRemoteAspectRatios;
- (void)setUpRemoteAspectRatiosForPayload:(int)arg1;
- (void)setUpRemoteAspectRatiosFromFreatureListString:(const char *)arg1;
- (void)setVideoReceiverConfig:(struct tagVCVideoReceiverConfig { unsigned int x1; struct tagVCVideoReceiverStreamConfig { struct tagVCVideoReceiverStreamIDInfo { unsigned short x_1_2_1; unsigned short x_1_2_2; unsigned short x_1_2_3; unsigned int x_1_2_4; unsigned short x_1_2_5[9]; unsigned short x_1_2_6[9]; } x_2_1_1; struct tagHANDLE {} *x_2_1_2; struct __CFDictionary {} *x_2_1_3; bool x_2_1_4; unsigned short x_2_1_5; unsigned char x_2_1_6; bool x_2_1_7; bool x_2_1_8; struct tagVCCryptor {} *x_2_1_9; void *x_2_1_10; void *x_2_1_11; int x_2_1_12; bool x_2_1_13; } x2[9]; int x3; int x4; long long x5; int x6; int x7; int x8; unsigned int x9; int x10; int x11; int x12; int x13; int x14; int x15; bool x16; bool x17; bool x18; bool x19; double x20; void *x21; int (*x22)(); int (*x23)(); int (*x24)(); int (*x25)(); int (*x26)(); int (*x27)(); int (*x28)(); unsigned long long x29; bool x30; unsigned short x31; bool x32; struct tagWRMMetricsInfo {} *x33; unsigned int x34; bool x35; bool x36; bool x37; bool x38; bool x39; bool x40; bool x41; bool x42; bool x43; bool x44; bool x45; })arg1;
- (bool)shouldEnableFaceZoom;
- (bool)shouldEnableMLEnhance;
- (bool)shouldUpdateRemoteScreenAttributes;
- (void)startVideo;
- (void)stopVideo;
- (void)updateSourcePlayoutTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg1;
- (struct tagVCVideoReceiverConfig { unsigned int x1; struct tagVCVideoReceiverStreamConfig { struct tagVCVideoReceiverStreamIDInfo { unsigned short x_1_2_1; unsigned short x_1_2_2; unsigned short x_1_2_3; unsigned int x_1_2_4; unsigned short x_1_2_5[9]; unsigned short x_1_2_6[9]; } x_2_1_1; struct tagHANDLE {} *x_2_1_2; struct __CFDictionary {} *x_2_1_3; bool x_2_1_4; unsigned short x_2_1_5; unsigned char x_2_1_6; bool x_2_1_7; bool x_2_1_8; struct tagVCCryptor {} *x_2_1_9; void *x_2_1_10; void *x_2_1_11; int x_2_1_12; bool x_2_1_13; } x2[9]; int x3; int x4; long long x5; int x6; int x7; int x8; unsigned int x9; int x10; int x11; int x12; int x13; int x14; int x15; bool x16; bool x17; bool x18; bool x19; double x20; void *x21; int (*x22)(); int (*x23)(); int (*x24)(); int (*x25)(); int (*x26)(); int (*x27)(); int (*x28)(); unsigned long long x29; bool x30; unsigned short x31; bool x32; struct tagWRMMetricsInfo {} *x33; unsigned int x34; bool x35; bool x36; bool x37; bool x38; bool x39; bool x40; bool x41; bool x42; bool x43; bool x44; bool x45; })videoReceiverConfig;

@end
