/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation
 */

@interface IDSNWLink : NSObject <IDSLink> {
    <IDSLinkDelegate> * _alternateDelegate;
    NSString * _cbuuid;
    NSIndexSet * _cellularInterfaceIndices;
    NSObject<OS_nw_listener> * _cellularListener;
    unsigned short  _cellularPort;
    NSMutableArray * _cellularPortList;
    unsigned char  _clientUUID;
    <IDSLinkDelegate> * _delegate;
    NSString * _deviceUniqueID;
    NSMutableDictionary * _interfaceIndexToNAT64LocalAddress;
    bool  _isDefaultPairedDevice;
    bool  _isInvalidated;
    NSObject<OS_nw_listener> * _listener;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    struct _opaque_pthread_t { long long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[8176]; } * _nwtid;
    unsigned short  _port;
    NSMutableDictionary * _portToExtraListener;
    NSMutableArray * _recentQRServerList;
    unsigned long long  _state;
    NSMutableDictionary * _tokenToChildConnectionEvaluator;
    NSMutableDictionary * _tokenToNWLinkConnection;
    NSMutableArray * _tokensForUDPConnectionInProgress;
    bool  _useDefaultInterfaceOnly;
    bool  _wantsCellular;
    bool  _wantsWiFi;
    bool  _wifiAssistEnabled;
}

@property <IDSLinkDelegate> *alternateDelegate;
@property (retain) NSString *cbuuid;
@property (nonatomic, retain) NSIndexSet *cellularInterfaceIndices;
@property (nonatomic) unsigned short cellularPort;
@property (readonly, copy) NSString *debugDescription;
@property <IDSLinkDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (retain) NSString *deviceUniqueID;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long headerOverhead;
@property (getter=linkTypeString, readonly) NSString *linkTypeString;
@property (nonatomic) unsigned short port;
@property (readonly) unsigned long long state;
@property (readonly) Class superclass;
@property (nonatomic) bool useDefaultInterfaceOnly;
@property (nonatomic) bool wifiAssistEnabled;

+ (id)derivePSKFromSessionKey:(id)arg1 salt:(id)arg2;
+ (bool)isSkywalkDemuxSupported;

- (void).cxx_destruct;
- (unsigned int)_NAT64LocalAddressForInterfaceIndex:(unsigned int)arg1;
- (id)_NWLinkConnectionForToken:(id)arg1;
- (void)_addChildConnectionEvaluator:(id)arg1 token:(id)arg2;
- (void)_addExtraListener:(id)arg1 port:(unsigned short)arg2 isCellular:(bool)arg3;
- (void)_addInterfaceIndex:(unsigned int)arg1 NAT64LocalAddress:(unsigned int)arg2;
- (void)_addNWLinkConnection:(id)arg1 token:(id)arg2;
- (void)_addToRecentQRServerList:(id)arg1;
- (void)_addUDPConnectionInProgress:(id)arg1;
- (id)_childConnectionEvaluatorForToken:(id)arg1;
- (void)_cleanup:(bool)arg1;
- (bool)_createChannelDataConnection:(id)arg1;
- (bool)_createChannelDataConnectionForH2:(id)arg1;
- (bool)_createIndicationConnection:(id)arg1;
- (id)_createNetworkInterfaceArrayWithIPVersion:(unsigned long long)arg1 wantsWiFi:(bool)arg2 wantsCellular:(bool)arg3;
- (id)_createNewListenerWithLocalPort:(unsigned short*)arg1;
- (void)_createUDPConnectionForNWLinkConnection:(id)arg1 readyHandler:(id /* block */)arg2;
- (bool)_doesUDPConnectionInProgressExist:(id)arg1;
- (id)_extraListenerForPort:(unsigned short)arg1;
- (bool)_findExistingCollidingQRConnection:(id)arg1 remoteEndpoint:(id)arg2 sessionID:(id)arg3 localEndpointToUse:(id*)arg4;
- (id)_findListenerWithLocalEndpoint:(id)arg1;
- (id)_findNewLocalEndpointForQRConnection:(id)arg1;
- (void)_handleIncomingIndicationMessage:(id)arg1;
- (void)_handleIncomingMessage:(id)arg1 keepWaiting:(bool)arg2;
- (bool)_peelOffQUICConnection:(id)arg1 type:(unsigned long long)arg2 readyHandler:(id /* block */)arg3;
- (bool)_recentQRServerListEmptyOrContains:(id)arg1 anotherRemoteEndpoint:(id)arg2;
- (void)_removeExtraListener:(unsigned short)arg1;
- (void)_removeNWLinkConnection:(id)arg1 token:(id)arg2;
- (void)_removeUDPConnectionInProgress:(id)arg1;
- (unsigned long long)_sendData:(id)arg1 withPacketBuffer:(struct { char *x1; unsigned long long x2; long long x3; long long x4; unsigned int x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; unsigned int x14; struct sockaddr_storage { unsigned char x_15_1_1; unsigned char x_15_1_2; BOOL x_15_1_3[6]; long long x_15_1_4; BOOL x_15_1_5[112]; } x15; struct sockaddr_storage { unsigned char x_16_1_1; unsigned char x_16_1_2; BOOL x_16_1_3[6]; long long x_16_1_4; BOOL x_16_1_5[112]; } x16; struct sockaddr_storage { unsigned char x_17_1_1; unsigned char x_17_1_2; BOOL x_17_1_3[6]; long long x_17_1_4; BOOL x_17_1_5[112]; } x17; unsigned short x18; unsigned char x19; int x20; struct { char *x_21_1_1; unsigned short x_21_1_2; int x_21_1_3; unsigned short x_21_1_4[12]; long long x_21_1_5; unsigned char x_21_1_6; unsigned short x_21_1_7; unsigned char x_21_1_8; bool x_21_1_9; bool x_21_1_10; unsigned short x_21_1_11; struct { unsigned short x_12_2_1; unsigned short x_12_2_2; unsigned short x_12_2_3; unsigned short x_12_2_4; unsigned short x_12_2_5; } x_21_1_12; bool x_21_1_13; bool x_21_1_14; int x_21_1_15; unsigned short x_21_1_16[4]; unsigned char x_21_1_17; bool x_21_1_18; bool x_21_1_19; bool x_21_1_20; unsigned int x_21_1_21; } x21[8]; }*)arg2 NWLinkConnection:(id)arg3;
- (bool)_setParameters:(id)arg1 NWLinkConnection:(id)arg2 sharePortWithListener:(bool)arg3 isTCP:(bool)arg4;
- (void)_setWiFiAssistStateForCellularLink:(id)arg1 isEnabled:(bool)arg2;
- (id)alternateDelegate;
- (id)cbuuid;
- (id)cellularInterfaceIndices;
- (unsigned short)cellularPort;
- (void)cleanup;
- (bool)connect:(int)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 clientUUID:(unsigned char)arg4 sessionID:(id)arg5 relaySessionToken:(id)arg6 relaySessionKey:(id)arg7 randomSalt:(id)arg8 newLocalPort:(unsigned short*)arg9 disconnectAfterUse:(bool)arg10 readyHandler:(id /* block */)arg11;
- (bool)connectTCP:(int)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 clientUUID:(unsigned char)arg4 sessionID:(id)arg5 relaySessionToken:(id)arg6 relaySessionKey:(id)arg7 randomSalt:(id)arg8 newLocalPort:(unsigned short*)arg9 readyHandler:(id /* block */)arg10;
- (id)copyChildConnectionIDForLocalAddress:(struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg1 remoteAddress:(struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 clientUniquePID:(unsigned long long)arg3 sessionID:(id)arg4 isRelay:(bool)arg5;
- (id)copyCurrentNetworkInterfaces;
- (id)copyLinkStatsDict;
- (void)dealloc;
- (id)delegate;
- (id)deviceUniqueID;
- (void)disconnectWithSessionID:(id)arg1 localAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 remoteAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg3 waitTime:(double)arg4;
- (id)generateLinkReport:(double)arg1 isCurrentLink:(bool)arg2;
- (bool)getEffectiveSourceAddress:(struct sockaddr_storage { unsigned char x1; unsigned char x2; BOOL x3[6]; long long x4; BOOL x5[112]; }*)arg1 fromSourceAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg2 effectiveDestinationAddress:(struct sockaddr_storage { unsigned char x1; unsigned char x2; BOOL x3[6]; long long x4; BOOL x5[112]; }*)arg3 fromDestinationAddress:(const struct sockaddr { unsigned char x1; unsigned char x2; BOOL x3[14]; }*)arg4 sessionID:(id)arg5 isQRConnection:(bool)arg6;
- (bool)hasListener;
- (unsigned long long)headerOverhead;
- (id)initWithDeviceUniqueID:(id)arg1 cbuuid:(id)arg2;
- (void)invalidate;
- (id)linkTypeString;
- (id)newListenerWithClientUUID:(unsigned char)arg1 wantsWiFi:(bool)arg2 wantsCellular:(bool)arg3;
- (unsigned short)port;
- (unsigned long long)sendPacketBuffer:(struct { char *x1; unsigned long long x2; long long x3; long long x4; unsigned int x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; unsigned int x14; struct sockaddr_storage { unsigned char x_15_1_1; unsigned char x_15_1_2; BOOL x_15_1_3[6]; long long x_15_1_4; BOOL x_15_1_5[112]; } x15; struct sockaddr_storage { unsigned char x_16_1_1; unsigned char x_16_1_2; BOOL x_16_1_3[6]; long long x_16_1_4; BOOL x_16_1_5[112]; } x16; struct sockaddr_storage { unsigned char x_17_1_1; unsigned char x_17_1_2; BOOL x_17_1_3[6]; long long x_17_1_4; BOOL x_17_1_5[112]; } x17; unsigned short x18; unsigned char x19; int x20; struct { char *x_21_1_1; unsigned short x_21_1_2; int x_21_1_3; unsigned short x_21_1_4[12]; long long x_21_1_5; unsigned char x_21_1_6; unsigned short x_21_1_7; unsigned char x_21_1_8; bool x_21_1_9; bool x_21_1_10; unsigned short x_21_1_11; struct { unsigned short x_12_2_1; unsigned short x_12_2_2; unsigned short x_12_2_3; unsigned short x_12_2_4; unsigned short x_12_2_5; } x_21_1_12; bool x_21_1_13; bool x_21_1_14; int x_21_1_15; unsigned short x_21_1_16[4]; unsigned char x_21_1_17; bool x_21_1_18; bool x_21_1_19; bool x_21_1_20; unsigned int x_21_1_21; } x21[8]; }*)arg1 toDeviceUniqueID:(id)arg2 cbuuid:(id)arg3;
- (unsigned long long)sendPacketBufferArray:(struct { /* ? */ }**)arg1 arraySize:(int)arg2 toDeviceUniqueID:(id)arg3 cbuuid:(id)arg4;
- (void)setAlternateDelegate:(id)arg1;
- (void)setCbuuid:(id)arg1;
- (void)setCellularInterfaceIndices:(id)arg1;
- (void)setCellularPort:(unsigned short)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceUniqueID:(id)arg1;
- (void)setPort:(unsigned short)arg1;
- (void)setUseDefaultInterfaceOnly:(bool)arg1;
- (void)setWiFiAssistState:(bool)arg1;
- (void)setWifiAssistEnabled:(bool)arg1;
- (unsigned long long)state;
- (bool)useDefaultInterfaceOnly;
- (bool)wifiAssistEnabled;

@end
