/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreChart.framework/CoreChart
 */

@interface CCChartView : UIView {
    UIAccessibilityElement * _accessibilityDataSeriesElement;
    NSString * _baseConfigType;
    bool  _caUpdateFromBackground;
    NSCalendar * _calendar;
    NSString * _config;
    NSDictionary * _configDictionary;
    bool  _didCustomizeCalendar;
    bool  _didCustomizeLocale;
    NSLayoutConstraint * _heightConstraint;
    NSMutableSet * _knownNamedDatasets;
    NSArray * _legacyData;
    NSLocale * _locale;
    bool  _preventGestures;
    CCVegaRenderer * _renderer;
    double  _rendererHeight;
    NSString * _rendererType;
    double  _rendererWidth;
    NSString * _spec;
    NSDictionary * _specDictionary;
    unsigned long long  _translatesChartSizeIntoConstraints;
    NSLayoutConstraint * _widthConstraint;
    CCVegaWorker * _worker;
    CCVegaWorkerClient * _workerClient;
    double  _zoomFactor;
    NSObject<CCChartViewDelegate> * delegate;
}

@property (nonatomic) bool CATransactionFromBackgroundThread;
@property (readonly) struct CGImage { }*CGImage;
@property (retain) UIAccessibilityElement *accessibilityDataSeriesElement;
@property (retain) NSArray *accessibilityDataSeriesElements;
@property (nonatomic, retain) NSString *baseConfig;
@property (nonatomic, retain) NSCalendar *calendar;
@property (retain) NSString *config;
@property (retain) NSDictionary *configDictionary;
@property (nonatomic) double contentScaleFactor;
@property (nonatomic, retain) NSArray *data;
@property NSObject<CCChartViewDelegate> *delegate;
@property (nonatomic, retain) NSLocale *locale;
@property (nonatomic, retain) NSString *rendererType;
@property (retain) NSString *spec;
@property (retain) NSDictionary *specDictionary;
@property (nonatomic) unsigned long long translatesChartSizeIntoConstraints;
@property (nonatomic) double zoomFactor;

+ (id)JSONStringFromDictionary:(id)arg1;
+ (void)cleanUp;
+ (id)compileSpec:(id)arg1 config:(id)arg2 baseConfig:(id)arg3 expressionFunctionNames:(id)arg4 error:(id*)arg5;
+ (id)compileSpecDictionary:(id)arg1 configDictionary:(id)arg2 baseConfig:(id)arg3 expressionFunctionNames:(id)arg4 error:(id*)arg5;
+ (id)configForBaseConfigType:(id)arg1;
+ (id)dictionaryFromJSONString:(id)arg1;
+ (id)getBenchmarkRecords;
+ (void)preloadFrameworkAssets;
+ (void)registerExpressionFunction:(id /* block */)arg1 withName:(id)arg2;
+ (id)unwrapJSValue:(id)arg1;

- (void).cxx_destruct;
- (bool)CATransactionFromBackgroundThread;
- (struct CGImage { }*)CGImage;
- (long long)accessibilityContainerType;
- (id)accessibilityDataSeriesElement;
- (id)accessibilityDataSeriesElements;
- (id)accessibilityElements;
- (id)addListener:(id /* block */)arg1 toSignalWithName:(id)arg2;
- (id)baseConfig;
- (id)calendar;
- (void)changeConstraints;
- (void)changeDefaultDatasetByInserting:(id)arg1 removingIDs:(id)arg2;
- (void)changeNamedDataset:(id)arg1 inserting:(id)arg2 removingIDs:(id)arg3;
- (id)colorNamed:(id)arg1;
- (id)config;
- (id)configDictionary;
- (double)contentScaleFactor;
- (id)data;
- (void)dealloc;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)dynamicColorNamed:(id)arg1;
- (id)eventToMouseEvent:(id)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)getSignalWithName:(id)arg1;
- (id)imageNamed:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithSpec:(id)arg1;
- (id)initWithSpec:(id)arg1 config:(id)arg2;
- (id)initWithSpec:(id)arg1 config:(id)arg2 options:(id)arg3;
- (void)initialize;
- (void)lazilyInitializeRenderer;
- (id)loadChartDataFromURL:(id)arg1 error:(id*)arg2;
- (id)locale;
- (id)localizedStringNamed:(id)arg1;
- (void)mouseHoverGestureRecognized:(id)arg1;
- (void)refreshLocaleAndCalendar;
- (void)registerExpressionFunction:(id /* block */)arg1 withName:(id)arg2;
- (void)registerLocalExpressionFunction:(id /* block */)arg1 withName:(id)arg2;
- (void)reinitializeRenderer;
- (void)removeListener:(id)arg1 fromSignalWithName:(id)arg2;
- (void)render;
- (id)renderToImageWithType:(unsigned long long)arg1;
- (id)renderer;
- (void)rendererDidUpdate;
- (id)rendererType;
- (void)setAccessibilityDataSeriesElement:(id)arg1;
- (void)setAccessibilityDataSeriesElements:(id)arg1;
- (void)setAccessibilityElements:(id)arg1;
- (void)setBaseConfig:(id)arg1;
- (void)setCATransactionFromBackgroundThread:(bool)arg1;
- (void)setCalendar:(id)arg1;
- (void)setConfig:(id)arg1;
- (void)setConfigDictionary:(id)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setData:(id)arg1;
- (void)setDefaultDataset:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLocale:(id)arg1;
- (void)setNamedDataset:(id)arg1 rows:(id)arg2;
- (void)setRenderer:(id)arg1;
- (void)setRendererType:(id)arg1;
- (void)setSignalWithName:(id)arg1 toValue:(id)arg2;
- (void)setSpec:(id)arg1;
- (void)setSpec:(id)arg1 config:(id)arg2;
- (void)setSpec:(id)arg1 config:(id)arg2 baseConfig:(id)arg3;
- (void)setSpec:(id)arg1 config:(id)arg2 baseConfig:(id)arg3 rendererType:(id)arg4;
- (void)setSpecDictionary:(id)arg1;
- (void)setSpecDictionary:(id)arg1 configDictionary:(id)arg2;
- (void)setSpecDictionary:(id)arg1 configDictionary:(id)arg2 baseConfig:(id)arg3;
- (void)setSpecDictionary:(id)arg1 configDictionary:(id)arg2 baseConfig:(id)arg3 rendererType:(id)arg4;
- (void)setTranslatesChartSizeIntoConstraints:(unsigned long long)arg1;
- (void)setZoomFactor:(double)arg1;
- (void)setupWithSpec:(id)arg1;
- (void)setupWithSpec:(id)arg1 options:(id)arg2;
- (void)setupWithSpecDictionary:(id)arg1;
- (void)setupWithSpecDictionary:(id)arg1 options:(id)arg2;
- (id)spec;
- (id)specDictionary;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (unsigned long long)translatesChartSizeIntoConstraints;
- (void)triggerMouseEvent:(id)arg1 type:(id)arg2;
- (void)triggerMouseEvent:(id)arg1 type:(id)arg2 setConsumed:(bool)arg3;
- (double)zoomFactor;

@end
